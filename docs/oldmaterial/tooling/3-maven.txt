<h2>Archetypes</h2>
Using the "Archetypes" plugin, we can automate the creation of new projects.  Maven uses <code style="color: #c7254e;">archetype</code> and <code style="color: #c7254e;">maven-archetype-quickstart</code> plugin plugins to create projects.

Go to the folder created in the previous lesson i.e. <code style="color: #c7254e;">C:\mvn_test</code>

<strong>Clear all folders and files in the directory  </strong><code style="color: #c7254e;">C:\mvn_test </code><strong>before proceeding </strong>

In <code style="color: #c7254e;">C:\mvn_test</code> execute the following mvn command.
<pre>C:\mvn_test&gt;mvn archetype:generate -DgroupId=com.bbd.ide -DartifactId=xmlFileEditor -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
</pre>
Here is the output.
<pre>c:\mvn_test&gt;mvn archetype:generate -DgroupId=com.bbd.ide -DartifactId=xmlFileEditor -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
[INFO] Scanning <span class="r" style="font-weight: bold; color: #7f0055;">for</span> projects...
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-clean-plugin/2.5/maven-clean-plugin-2.5.pom
...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Stub Project (No POM) 1
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] &gt;&gt;&gt; maven-archetype-plugin:2.2:generate (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-cli) &gt; generate-sources @ standalone-pom &gt;&gt;&gt;
[INFO]
[INFO] &lt;&lt;&lt; maven-archetype-plugin:2.2:generate (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-cli) &lt; generate-sources @ standalone-pom &lt;&lt;&lt;
[INFO]
[INFO] --- maven-archetype-plugin:2.2:generate (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-cli) @ standalone-pom ---
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/archetype/archetype-catalog/2.2/archetype-catalog-2.2.pom
...
Downloaded: https://repo.maven.apache.org/maven2/org/codehaus/groovy/groovy/1.8.3/groovy-1.8.3.jar (5394 KB at 1501.4 KB/sec)
[INFO] Generating project in Batch mode
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/archetypes/maven-archetype-quickstart/1.0/maven-archetype-quickstart-1.0.jar
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters <span class="r" style="font-weight: bold; color: #7f0055;">for</span> creating project from Old (1.x) Archetype: maven-archetype-quickstart:1.0
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: basedir, Value: c:\mvn_test
[INFO] Parameter: package, Value: com.bbd.ide
[INFO] Parameter: groupId, Value: com.bbd.ide
[INFO] Parameter: artifactId, Value: xmlFileEditor
[INFO] Parameter: packageName, Value: com.bbd.ide
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] project created from Old (1.x) Archetype in dir: c:\mvn_test\xmlFileEditor
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 30.178 s
[INFO] Finished at: 2014-11-03T15:58:42-08:00
[INFO] Final Memory: 26M/369M
[INFO] ------------------------------------------------------------------------
c:\mvn_test&gt;
</pre>
<img class="alignnone size-full wp-image-2571" src="https://community.bbd.co.za/wp-content/uploads/2016/12/maven_directory-.png" alt="maven_directory" width="406" height="315" />

The folders generated by the Maven.  It also created two source file for us, one with the main method another is the unit test case.
<pre>package com.bbd.ide;

/**
 * Hello world!
 *
 */
<span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> App 
{
    <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> void main( String[] args )
    {
        System.out.println( <span class="q" style="font-weight: bold; color: #2a00ff;">"Hello World!"</span> );
    }
}
</pre>
Maven also created test cases for the generated app.
<pre>package com.bbd.ide;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

/**
 * Unit test <span class="r" style="font-weight: bold; color: #7f0055;">for</span> simple App.
 */
<span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> AppTest 
    <span class="r" style="font-weight: bold; color: #7f0055;">extends</span> TestCase
{
    /**
     * Create the test <span class="r" style="font-weight: bold; color: #7f0055;">case</span>
     *
     * @param testName name of the test <span class="r" style="font-weight: bold; color: #7f0055;">case</span>
     */
    <span class="r" style="font-weight: bold; color: #7f0055;">public</span> AppTest( String testName )
    {
        super( testName );
    }

    /**
     * @return the suite of tests being tested
     */
    <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> Test suite()
    {
        return <span class="r" style="font-weight: bold; color: #7f0055;">new</span> TestSuite( AppTest.class );
    }

    /**
     * Rigourous Test :-)
     */
    <span class="r" style="font-weight: bold; color: #7f0055;">public</span> void testApp()
    {
        assertTrue( true );
    }
}
</pre>
The generated pom.xml file is listed as follows.
<pre>&lt;project xmlns=<span class="q" style="font-weight: bold; color: #2a00ff;">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="q" style="font-weight: bold; color: #2a00ff;">"http://www.w3.org/2001/XMLSchema-instance"</span>
  xsi:schemaLocation=<span class="q" style="font-weight: bold; color: #2a00ff;">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;com.bbd.ide&lt;/groupId&gt;
  &lt;artifactId&gt;xmlFileEditor&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;xmlFileEditor&lt;/name&gt;
  &lt;url&gt;http://maven.apache.org&lt;/url&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;</pre>
<div></div>
<h2 id="Note">Note</h2>
Maven already added Junit as test framework. By default Maven adds a source file <code style="color: #c7254e;">App.java </code>and a test file <code style="color: #c7254e;">AppTest.java</code> in its default directory structure.
<h1></h1>
<h1>Maven Package Project</h1>
Since we have created an empty project we can go the C:\mvn_test\xmlFileEditor directory and execute the following mvn command to compile and package the project.
<pre>c:\mvn_test\xmlFileEditor&gt;mvn clean package
[INFO] Scanning <span class="r" style="font-weight: bold; color: #7f0055;">for</span> projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building xmlFileEditor 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/2.6/maven-resources-plugin-2.6.pom
...
...
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to c:\mvn_test\xmlFileEditor\target\classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-testResources) @ xmlFileEditor ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory c:\mvn_test\xmlFileEditor\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:testCompile (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-testCompile) @ xmlFileEditor ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to c:\mvn_test\xmlFileEditor\target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-test) @ xmlFileEditor ---
[INFO] Surefire report directory: c:\mvn_test\xmlFileEditor\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.bbd.ide.AppTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.019 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-jar) @ xmlFileEditor ---
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 35.354 s
[INFO] Finished at: 2014-11-03T16:14:01-08:00
[INFO] Final Memory: 25M/369M
[INFO] ------------------------------------------------------------------------
c:\mvn_test\xmlFileEditor&gt;
</pre>
<div></div>
<h2 id="Note">Note</h2>
We've built our project and created final jar file.

<a href="https://community.bbd.co.za/wp-content/uploads/2016/12/maven_install-.png"><img class="alignnone size-full wp-image-2572" src="https://community.bbd.co.za/wp-content/uploads/2016/12/maven_install-.png" alt="maven_install" width="617" height="217" /></a>

From the command above we can see that two goals can be combine into one command. First we can clean the target directory with <code style="color: #c7254e;">clean</code> goal and then package the project build output as jar with <code style="color: #c7254e;">package</code> goal. Packaged jar is available in xmlFileEditor\target folder as <code style="color: #c7254e;">xmlFileEditor-1.0-SNAPSHOT.jar</code>. Test reports are available in xmlFileEditor\target\surefire-reports folder. Maven compiled source code files and then test source code files. Then Maven run the test cases. Finally Maven created the package.
<h1></h1>
<h1>Maven Run Java Main</h1>
After packaging the source to a Jar file we can use the following three ways to run the Java main method. We can use Maven <code style="color: #c7254e;">exec</code> plugin to run the main method of a Java class, with the project dependencies automatically included in the classpath.
<h2 id="Running_from_Command_line">Running from Command line</h2>
Suppose we have the project created in the previous chapters. To run the Java main method from Maven, we can use the following command.
<pre>mvn exec:java -Dexec.mainClass=<span class="q" style="font-weight: bold; color: #2a00ff;">"com.bbd.ide.App"</span>
</pre>
The code above generates the following result.
<pre>c:\mvn_test\xmlFileEditor&gt;mvn exec:java -Dexec.mainClass=<span class="q" style="font-weight: bold; color: #2a00ff;">"com.bbd.ide.App"</span>
[INFO] Scanning <span class="r" style="font-weight: bold; color: #7f0055;">for</span> projects...
Downloading: https://repo.maven.apache.org/maven2/org/codehaus/mojo/exec-maven-plugin/maven-metadata.xml
...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building xmlFileEditor 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- exec-maven-plugin:1.3.2:java (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-cli) @ xmlFileEditor ---
Downloading: https://repo.maven.apache.org/maven2/junit/junit/4.11/junit-4.11.pom
...
[WARNING] Warning: killAfter is now deprecated. Do you need it ? Please comment on MEXEC-6.
Hello World!
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8.847 s
[INFO] Finished at: 2014-11-03T16:25:54-08:00
[INFO] Final Memory: 22M/369M
[INFO] ------------------------------------------------------------------------
c:\mvn_test\xmlFileEditor&gt;
</pre>
With arguments:
<pre>mvn exec:java -Dexec.mainClass=<span class="q" style="font-weight: bold; color: #2a00ff;">"com.bbd.ide.App"</span> -Dexec.args=<span class="q" style="font-weight: bold; color: #2a00ff;">"arg0 arg1 arg2"</span>
</pre>
With runtime dependencies in the CLASSPATH:
<pre>mvn exec:java -Dexec.mainClass=<span class="q" style="font-weight: bold; color: #2a00ff;">"com.bbd.ide.App"</span> -Dexec.classpathScope=runtime</pre>
<div></div>
<h2 id="Running_in_a_phase_in_pom_xml">Running in a phase in pom.xml</h2>
We can run the <code style="color: #c7254e;">main</code> method in a maven phase. For example, you can run the App.main() method as part of the test phase.
<pre>&lt;build&gt;  
 &lt;plugins&gt;  
  &lt;plugin&gt;  
   &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;  
   &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;  
   &lt;version&gt;1.1.1&lt;/version&gt;  
   &lt;executions&gt;  
    &lt;execution&gt;  
     &lt;phase&gt;test&lt;/phase&gt;  
     &lt;goals&gt;  
      &lt;goal&gt;java&lt;/goal&gt;  
     &lt;/goals&gt;  
     &lt;configuration&gt;  
      &lt;mainClass&gt;com.bbd.ide.App&lt;/mainClass&gt;  
      &lt;arguments&gt;  
       &lt;argument&gt;arg0&lt;/argument&gt;  
       &lt;argument&gt;arg1&lt;/argument&gt;  
      &lt;/arguments&gt;  
     &lt;/configuration&gt;  
    &lt;/execution&gt;  
   &lt;/executions&gt;  
  &lt;/plugin&gt;  
 &lt;/plugins&gt;  
&lt;/build&gt;  

</pre>
To run the exec plugin with above configuration, simply run the corresponding phase.
<pre>mvn test</pre>
<div></div>
<h2 id="Running_in_a_profile_in_pom_xml">Running in a profile in pom.xml</h2>
We can run the main method in a different profile. wrap the above config in the &lt;profile&gt; tag.
<pre>&lt;profiles&gt;  
 &lt;profile&gt;  
  &lt;id&gt;code-generator&lt;/id&gt;  
  &lt;build&gt;  
   &lt;plugins&gt;  
    &lt;plugin&gt;  
     &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;  
     &lt;artifactId&gt;exec-maven-plugin&lt;/artifactId&gt;  
     &lt;version&gt;1.1.1&lt;/version&gt;  
     &lt;executions&gt;  
      &lt;execution&gt;  
       &lt;phase&gt;test&lt;/phase&gt;  
       &lt;goals&gt;  
        &lt;goal&gt;java&lt;/goal&gt;  
       &lt;/goals&gt;  
       &lt;configuration&gt;  
        &lt;mainClass&gt;com.bbd.ide.App&lt;/mainClass&gt;  
        &lt;arguments&gt;  
         &lt;argument&gt;arg0&lt;/argument&gt;  
         &lt;argument&gt;arg1&lt;/argument&gt;  
        &lt;/arguments&gt;  
       &lt;/configuration&gt;  
      &lt;/execution&gt;  
     &lt;/executions&gt;  
    &lt;/plugin&gt;  
   &lt;/plugins&gt;  
  &lt;/build&gt;  
 &lt;/profile&gt;  
&lt;/profiles&gt;  
</pre>
To call the above profile, run the following command:
<pre>mvn test -Pcode-generator</pre>
We can use Maven to create documentation of the application in command.
<pre>c:\mvn_test\xmlFileEditor&gt;mvn site
[INFO] Scanning <span class="r" style="font-weight: bold; color: #7f0055;">for</span> projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building xmlFileEditor 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-site-plugin:3.3:site (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-site) @ xmlFileEditor ---
Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-exec/1.1/maven-reporting-exec-1.1.pom
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/reporting/maven-reporting-exec/1.1/maven-reporting-exec-1.1.pom (11 KB at 11.4 KB/sec)
Downloading other <span class="r" style="font-weight: bold; color: #7f0055;">if</span> necessary
...
...
[WARNING] Report plugin org.apache.maven.plugins:maven-project-info-reports-plugin has an empty version.
[WARNING]
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING]
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/skins/maven-<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-skin/1.0/maven-<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-skin-1.0.jar (8 KB at 84.9 KB/sec)
Downloading other <span class="r" style="font-weight: bold; color: #7f0055;">if</span> necessary
...
...
[INFO] Rendering site with org.apache.maven.skins:maven-<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-skin:jar:1.0 skin.
[INFO] Generating <span class="q" style="font-weight: bold; color: #2a00ff;">"About"</span> report    --- maven-project-info-reports-plugin:2.7
[INFO] Generating <span class="q" style="font-weight: bold; color: #2a00ff;">"Plugin Management"</span> report    --- maven-project-info-reports-plugin:2.7
[INFO] Generating <span class="q" style="font-weight: bold; color: #2a00ff;">"Distribution Management"</span> report    --- maven-project-info-reports-plugin:2.7
[INFO] Generating <span class="q" style="font-weight: bold; color: #2a00ff;">"Dependency Information"</span> report    --- maven-project-info-reports-plugin:2.7
[INFO] Generating <span class="q" style="font-weight: bold; color: #2a00ff;">"Source Repository"</span> report    --- maven-project-info-reports-plugin:2.7
[INFO] Generating <span class="q" style="font-weight: bold; color: #2a00ff;">"Mailing Lists"</span> report    --- maven-project-info-reports-plugin:2.7
[INFO] Generating <span class="q" style="font-weight: bold; color: #2a00ff;">"Issue Tracking"</span> report    --- maven-project-info-reports-plugin:2.7
[INFO] Generating <span class="q" style="font-weight: bold; color: #2a00ff;">"Continuous Integration"</span> report    --- maven-project-info-reports-plugin:2.7
[INFO] Generating <span class="q" style="font-weight: bold; color: #2a00ff;">"Project Plugins"</span> report    --- maven-project-info-reports-plugin:2.7
[INFO] Generating <span class="q" style="font-weight: bold; color: #2a00ff;">"Project License"</span> report    --- maven-project-info-reports-plugin:2.7
[INFO] Generating <span class="q" style="font-weight: bold; color: #2a00ff;">"Project Team"</span> report    --- maven-project-info-reports-plugin:2.7
[INFO] Generating <span class="q" style="font-weight: bold; color: #2a00ff;">"Project Summary"</span> report    --- maven-project-info-reports-plugin:2.7
[INFO] Generating <span class="q" style="font-weight: bold; color: #2a00ff;">"Dependencies"</span> report    --- maven-project-info-reports-plugin:2.7
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:24 min
[INFO] Finished at: 2014-11-22T09:34:18-08:00
[INFO] Final Memory: 28M/369M
[INFO] ------------------------------------------------------------------------

c:\mvn_test\xmlFileEditor&gt;

</pre>
Maven has created a site within target directory.

<a href="https://community.bbd.co.za/wp-content/uploads/2016/12/site-.png"><img class="alignnone size-full wp-image-2576" src="https://community.bbd.co.za/wp-content/uploads/2016/12/site-.png" alt="site" width="542" height="515" /></a>

&nbsp;

&nbsp;

Open c:\mvn_test\xmlFileEditor\target\site folder. Click on index.html to see the documentation.

<a href="https://community.bbd.co.za/wp-content/uploads/2016/12/mavensite-.png"><img class="alignnone size-full wp-image-2573" src="https://community.bbd.co.za/wp-content/uploads/2016/12/mavensite-.png" alt="mavensite" width="436" height="374" /></a>

&nbsp;
<h1 style="font-weight: 500; color: inherit;">Maven Command Test (in detail)</h1>
When using Maven to create a project it creates a class with main method as well as the test cases.

<a href="https://community.bbd.co.za/wp-content/uploads/2016/12/apptest-.png"><img class="alignnone size-full wp-image-2575" src="https://community.bbd.co.za/wp-content/uploads/2016/12/apptest-.png" alt="apptest" width="712" height="352" /></a>

&nbsp;

The content of AppTest.java
<pre>package com.bbd.ide;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

/**
 * Unit test <span class="r" style="font-weight: bold; color: #7f0055;">for</span> simple App.
 */
<span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> AppTest 
    <span class="r" style="font-weight: bold; color: #7f0055;">extends</span> TestCase
{
    /**
     * Create the test <span class="r" style="font-weight: bold; color: #7f0055;">case</span>
     *
     * @param testName name of the test <span class="r" style="font-weight: bold; color: #7f0055;">case</span>
     */
    <span class="r" style="font-weight: bold; color: #7f0055;">public</span> AppTest( String testName )
    {
        super( testName );
    }

    /**
     * @return the suite of tests being tested
     */
    <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> Test suite()
    {
        return <span class="r" style="font-weight: bold; color: #7f0055;">new</span> TestSuite( AppTest.class );
    }

    /**
     * Rigourous Test :-)
     */
    <span class="r" style="font-weight: bold; color: #7f0055;">public</span> void testApp()
    {
        assertTrue( true );
    }
}
</pre>
To run unit test via Maven, issue this command :
<pre>c:\mvn_test\xmlFileEditor&gt;mvn test
</pre>
The code above generates the following result.
<pre>c:\mvn_test\xmlFileEditor&gt;mvn test
[INFO] Scanning <span class="r" style="font-weight: bold; color: #7f0055;">for</span> projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building xmlFileEditor 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-resources) @ xmlFileEditor ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory c:\mvn_test\xmlFileEditor\src\main\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:compile (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-compile) @ xmlFileEditor ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-testResources) @ xmlFileEditor ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory c:\mvn_test\xmlFileEditor\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:testCompile (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-testCompile) @ xmlFileEditor ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-test) @ xmlFileEditor ---
[INFO] Surefire report directory: c:\mvn_test\xmlFileEditor\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.bbd.ide.AppTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.765 s
[INFO] Finished at: 2014-11-22T10:14:39-08:00
[INFO] Final Memory: 19M/369M
[INFO] ------------------------------------------------------------------------
c:\mvn_test\xmlFileEditor&gt;</pre>
<div></div>
<h2 id="More_Test_Cases" style="font-weight: 500; color: inherit;">More Test Cases</h2>
We can add more test cases to test directory. First we add two more static method to App.java. The two dummy methods just return String constant. We are going to use those methods to illustrate how to add test cases to Maven project.
<pre>package com.bbd.ide;
<span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> App {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> void main(String[] args) {
     System.out.println(getHelloWorld());
  }
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> String getHelloWorld() {
    return <span class="q" style="font-weight: bold; color: #2a00ff;">"Hello World"</span>;
  }
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> String getHelloWorld2() {
    return <span class="q" style="font-weight: bold; color: #2a00ff;">"Hello World 2"</span>;
  }
}
</pre>
We can unit test for getHelloWorld() method by adding a new class to the <code style="color: #c7254e;">test</code> folder.
<pre>package com.bbd.ide;
import junit.framework.Assert;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;
<span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> TestApp1 {
 
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> void testPrintHelloWorld() {
    Assert.assertEquals(App.getHelloWorld(), <span class="q" style="font-weight: bold; color: #2a00ff;">"Hello World"</span>);
  }
}

</pre>
The following code shows how to add another unit test for getHelloWorld2() method.
<pre>package com.bbd.ide; 
import junit.framework.Assert;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;
<span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> TestApp2 {

  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> void testPrintHelloWorld2() {
    Assert.assertEquals(App.getHelloWorld2(), <span class="q" style="font-weight: bold; color: #2a00ff;">"Hello World 2"</span>);
  }
}
</pre>
<div></div>
<h2 id="Run_test_cases" style="font-weight: 500; color: inherit;">Run test cases</h2>
After adding those two test cases we can run the following Maven command again for testing.
<pre>c:\mvn_test\xmlFileEditor&gt;mvn test
</pre>
The code above generates the following result.
<pre>c:\mvn_test\xmlFileEditor&gt;mvn clean test
[INFO] Scanning <span class="r" style="font-weight: bold; color: #7f0055;">for</span> projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building xmlFileEditor 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-clean) @ xmlFileEditor ---
[INFO] Deleting c:\mvn_test\xmlFileEditor\target
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-resources) @ xmlFileEditor ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory c:\mvn_test\xmlFileEditor\src\main\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:compile (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-compile) @ xmlFileEditor ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to c:\mvn_test\xmlFileEditor\target\classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-testResources) @ xmlFileEditor ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory c:\mvn_test\xmlFileEditor\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:testCompile (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-testCompile) @ xmlFileEditor ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 3 source files to c:\mvn_test\xmlFileEditor\target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-test) @ xmlFileEditor ---
[INFO] Surefire report directory: c:\mvn_test\xmlFileEditor\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.bbd.ide.AppTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
Running com.bbd.ide.TestApp1
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
Running com.bbd.ide.TestApp2
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec

Results :

Tests run: 3, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 5.125 s
[INFO] Finished at: 2014-11-22T10:22:06-08:00
[INFO] Final Memory: 25M/369M
[INFO] ------------------------------------------------------------------------
c:\mvn_test\xmlFileEditor&gt;
</pre>
<h2 id="Run_single_test_case" style="font-weight: 500; color: inherit;">Run single test case</h2>
The command above runs all test cases To run single test (<code style="color: #c7254e;">TestApp1</code>), issue this command :
<pre>mvn -Dtest=TestApp1 test
</pre>
The command above generates the following result.
<pre>c:\mvn_test\xmlFileEditor&gt;mvn -Dtest=TestApp1 test
[INFO] Scanning <span class="r" style="font-weight: bold; color: #7f0055;">for</span> projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building xmlFileEditor 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-resources) @ xmlFileEditor ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory c:\mvn_test\xmlFileEditor\src\main\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:compile (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-compile) @ xmlFileEditor ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-testResources) @ xmlFileEditor ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory c:\mvn_test\xmlFileEditor\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:testCompile (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-testCompile) @ xmlFileEditor ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-test) @ xmlFileEditor ---
[INFO] Surefire report directory: c:\mvn_test\xmlFileEditor\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.bbd.ide.TestApp1
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec

Results :

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.704 s
[INFO] Finished at: 2014-11-22T10:22:54-08:00
[INFO] Final Memory: 19M/369M
[INFO] ------------------------------------------------------------------------
c:\mvn_test\xmlFileEditor&gt;
</pre>
<h2 id="Skip_test" style="font-weight: 500; color: inherit;">Skip test</h2>
We can skip test by using the following command.
<pre>mvn package -Dmaven.test.skip=true
</pre>
The command above generates the following result.
<pre>c:\mvn_test\xmlFileEditor&gt;mvn package -Dmaven.test.skip=true
[INFO] Scanning <span class="r" style="font-weight: bold; color: #7f0055;">for</span> projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building xmlFileEditor 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-resources) @ xmlFileEditor ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory c:\mvn_test\xmlFileEditor\src\main\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:compile (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-compile) @ xmlFileEditor ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-testResources) @ xmlFileEditor ---
[INFO] Not copying test resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:testCompile (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-testCompile) @ xmlFileEditor ---
[INFO] Not compiling test sources
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-test) @ xmlFileEditor ---
[INFO] Tests are skipped.
[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-jar) @ xmlFileEditor ---
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.703 s
[INFO] Finished at: 2014-11-22T10:25:31-08:00
[INFO] Final Memory: 15M/369M
[INFO] ------------------------------------------------------------------------
c:\mvn_test\xmlFileEditor&gt;

</pre>
<h1>How To Install Your Project Into Maven Local Repository</h1>
When building software we often have to create some library to gather all functions and classes in common together and put that compiled library file to build path,

so that the compiler can find the library when compiling the code.

In Java this usually means creating a jar file which has the library classes.

In Maven, we can use "mvn install" to package the project and deploy to our local repository automatically.

When "install" phase is executed, all of the phases before it, for example, "validate", "compile", "test", "package", "integration-test", "verify" phase , phase will be executed.

After those phases install phase will be executed.
<div></div>
<h2 id="mvn_install_example">mvn install example</h2>
The following code shows a POM file generated from maven.
<pre>&lt;project xmlns=<span class="q" style="font-weight: bold; color: #2a00ff;">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="q" style="font-weight: bold; color: #2a00ff;">"http://www.w3.org/2001/XMLSchema-instance"</span>
  xsi:schemaLocation=<span class="q" style="font-weight: bold; color: #2a00ff;">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;com.bbd.ide&lt;/groupId&gt;
  &lt;artifactId&gt;xmlFileEditor&lt;/artifactId&gt;
  &lt;packaging&gt;jar&lt;/packaging&gt;
  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
  &lt;name&gt;xmlFileEditor&lt;/name&gt;
  &lt;url&gt;http://maven.apache.org&lt;/url&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
&lt;/project&gt;
</pre>
Based on above pom.xml file, when "mvn install" is executed, it will package the project into jar file and copy to your local repository. It's always recommended to run "clean" and "install" together, so that you are always deploy the latest project to your local repository.
<pre>mvn clean install
</pre>
The command above generates the following result.
<pre>c:\mvn_test\xmlFileEditor&gt;mvn clean install
[INFO] Scanning <span class="r" style="font-weight: bold; color: #7f0055;">for</span> projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building xmlFileEditor 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-clean) @ xmlFileEditor ---
[INFO] Deleting c:\mvn_test\xmlFileEditor\target
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-resources) @ xmlFileEditor ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory c:\mvn_test\xmlFileEditor\src\main\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:compile (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-compile) @ xmlFileEditor ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 1 source file to c:\mvn_test\xmlFileEditor\target\classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-testResources) @ xmlFileEditor ---
[WARNING] Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] skip non existing resourceDirectory c:\mvn_test\xmlFileEditor\src\test\resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:testCompile (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-testCompile) @ xmlFileEditor ---
[INFO] Changes detected - recompiling the module!
[WARNING] File encoding has not been set, using platform encoding Cp1252, i.e. build is platform dependent!
[INFO] Compiling 3 source files to c:\mvn_test\xmlFileEditor\target\test-classes
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-test) @ xmlFileEditor ---
[INFO] Surefire report directory: c:\mvn_test\xmlFileEditor\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.bbd.ide.AppTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
Running com.bbd.ide.TestApp1
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
Running com.bbd.ide.TestApp2
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec

Results :

Tests run: 3, Failures: 0, Errors: 0, Skipped: 0

[INFO]
[INFO] --- maven-jar-plugin:2.4:jar (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-jar) @ xmlFileEditor ---
[INFO] Building jar: c:\mvn_test\xmlFileEditor\target\xmlFileEditor-1.0-SNAPSHOT.jar
[INFO]
[INFO] --- maven-install-plugin:2.4:install (<span class="r" style="font-weight: bold; color: #7f0055;">default</span>-install) @ xmlFileEditor ---
[INFO] Installing c:\mvn_test\xmlFileEditor\target\xmlFileEditor-1.0-SNAPSHOT.jar to C:\Users\abc\.m2\repository\com\bbd\ide\xmlFileEditor\1.0-SNAPSHOT\xmlFileEditor-1.0-SNAPSHOT.jar
[INFO] Installing c:\mvn_test\xmlFileEditor\pom.xml to C:\Users\abc\.m2\repository\com\bbd\ide\xmlFileEditor\1.0-SNAPSHOT\xmlFileEditor-1.0-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6.250 s
[INFO] Finished at: 2014-11-22T10:27:10-08:00
[INFO] Final Memory: 27M/369M
[INFO] ------------------------------------------------------------------------
c:\mvn_test\xmlFileEditor&gt;
</pre>
We can view the installed jar file in our local maven repository.

&nbsp;

<a href="https://community.bbd.co.za/wp-content/uploads/2016/12/repositoryinstall-.png"><img class="alignnone size-full wp-image-2574" src="https://community.bbd.co.za/wp-content/uploads/2016/12/repositoryinstall-.png" alt="repositoryinstall" width="674" height="181" /></a>
<div></div>
<h2 id="Access_Deployed_Project">Access Deployed Project</h2>
After installing the jar file to local repository we access our deployed "jar" file by declaring below dependency tag in their pom.xml file.
<pre>&lt;dependency&gt;
      &lt;groupId&gt;com.bbd.ide&lt;/groupId&gt;
      &lt;artifactId&gt;xmlFileEditor&lt;/artifactId&gt;
      &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;
</pre>