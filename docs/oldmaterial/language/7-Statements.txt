<h1>If</h1>
The if statement is used to execute a block of code based on a condition.

The following the simplest form of if statement:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">if</span>(condition) 
   statement;
</pre>
<code style="color: #c7254e;">condition</code> is a boolean expression. If <code style="color: #c7254e;">condition</code> is <code style="color: #c7254e;">true</code>, then the <code style="color: #c7254e;">statement</code> is executed.

If <code style="color: #c7254e;">condition</code> is <code style="color: #c7254e;">false</code>, then the <code style="color: #c7254e;">statement</code> is bypassed.

The following code outputs a message based on the value of an integer. It uses the if statement to do the check.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {

  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> num = 99;
    <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (num &lt; 100) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"num is less than 100"</span>);

    }
  }
}
</pre>
The output generated by this program is shown here:
<pre>num is less than 100</pre>
<div></div>
<h2 id="Example">Example</h2>
If statement is often used to to compare two variables. The following code defines two variables,<code style="color: #c7254e;">x</code> and <code style="color: #c7254e;">y</code>, the it uses the if statement to compare them and prints out messages.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {

  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> x, y;

    x = 10;
    y = 20;

    <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (x &lt; y){
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"x is less than y"</span>);
    }

    x = x * 2;
    <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (x == y){
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"x now equal to y"</span>);
    }

    x = x * 2;
    <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (x &gt; y){
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"x now greater than y"</span>);
    }

    <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (x == y){
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"==="</span>);
    }
  }
}
</pre>
The output generated by this program is shown here:
<pre>x is less than y
x now equal to y
x now greater than y</pre>
<h2 id="Example_2">Example 2</h2>
We can also use a boolean value to control the if statement. The value of a <code style="color: #c7254e;">boolean</code> variable is sufficient, by itself, to control the if statement.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">boolean</span> b;
    b = false;
    <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (b) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"This is executed."</span>);
    } <span class="r" style="font-weight: bold; color: #7f0055;">else</span> {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"This is NOT executed."</span>);
    }

  }
}
</pre>
There is no need to write an <code style="color: #c7254e;">if</code> statement like this:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">if</span>(b == true) ...
</pre>
The output generated by this program is shown here:
<pre>This is NOT executed.</pre>
<h2 id="Java_if_else_Statement">if else Statement</h2>
The <code style="color: #c7254e;">if</code> statement is a conditional branch statement. We can add else statement to the if statement.

Here is the general form of the <code style="color: #c7254e;">if-else</code> statement:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">if</span> (condition) 
   statement1; 
<span class="r" style="font-weight: bold; color: #7f0055;">else</span> 
   statement2;
</pre>
The <code style="color: #c7254e;">else</code> clause is optional. Each statement may be a single statement or a compound statement enclosed in curly braces (a block). Only one statement can appear directly after the <code style="color: #c7254e;">if</code> or the <code style="color: #c7254e;">else</code>. To include more statements, you'll need to create a block, as in this fragment.

The following example shows how to use <code style="color: #c7254e;">if else</code> statement.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String[] argv) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 1;

    <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (i &gt; 0) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Here"</span>);
      i -= 1;

    } <span class="r" style="font-weight: bold; color: #7f0055;">else</span>
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"There"</span>);
  }
}
</pre>
The output:
<pre>Here</pre>
It is good to include the curly braces when using the <code style="color: #c7254e;">if</code> statement, even when there is only one statement in each clause.
<h2 id="Java_if_else_ladder_statement">if else ladder statement</h2>
The if else ladder statement is used to work on multiple conditions.

The if-else-if Ladder looks like this:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">if</span>(condition) 
   statement; 
<span class="r" style="font-weight: bold; color: #7f0055;">else</span> <span class="r" style="font-weight: bold; color: #7f0055;">if</span>(condition) 
   statement; 
<span class="r" style="font-weight: bold; color: #7f0055;">else</span> <span class="r" style="font-weight: bold; color: #7f0055;">if</span>(condition) 
   statement; 
. 
.
<span class="r" style="font-weight: bold; color: #7f0055;">else</span> 
   statement;
</pre>
Here is a program that uses an <code style="color: #c7254e;">if-else-if</code> ladder.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> month = 4;
    String value;
    <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (month == 1 )
      value = <span class="q" style="font-weight: bold; color: #2a00ff;">"A"</span>;
    <span class="r" style="font-weight: bold; color: #7f0055;">else</span> <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (month == 2)
      value = <span class="q" style="font-weight: bold; color: #2a00ff;">"B"</span>;
    <span class="r" style="font-weight: bold; color: #7f0055;">else</span> <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (month == 3)
      value = <span class="q" style="font-weight: bold; color: #2a00ff;">"C"</span>;
    <span class="r" style="font-weight: bold; color: #7f0055;">else</span> <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (month == 4)
      value = <span class="q" style="font-weight: bold; color: #2a00ff;">"D"</span>;
    <span class="r" style="font-weight: bold; color: #7f0055;">else</span>
      value = <span class="q" style="font-weight: bold; color: #2a00ff;">"Error"</span>;

    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"value = "</span> + value);
  }
}
</pre>
Here is the output produced by the program:
<pre>value = D</pre>
<h2 id="Java_nested_if_statement">Nested if statement</h2>
A nested <code style="color: #c7254e;">if</code> is an <code style="color: #c7254e;">if</code> statement inside another another <code style="color: #c7254e;">if</code> statement or <code style="color: #c7254e;">else</code>.

The following code uses a nested if statement to compare values.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String[] argv) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 10;
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> j = 4;
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> k = 200;
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> a = 3;
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> b = 5;
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> c = 0;
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> d =0;
    <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (i == 10) {
      <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (j &lt; 20){
        a = b;
      }
      <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (k &gt; 100){
        c = d;
      }
      <span class="r" style="font-weight: bold; color: #7f0055;">else</span>{
        a = c;
      }
    } <span class="r" style="font-weight: bold; color: #7f0055;">else</span>{
      a = d;
    }
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"a = "</span> + a);
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"b = "</span> + b);
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"c = "</span> + c);
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"d = "</span> + d);
    
  }
}
</pre>
The output:
<pre>a = 5
b = 5
c = 0
d = 0</pre>
&nbsp;
<h1>Switch</h1>
The <code style="color: #c7254e;">switch</code> statement is a multiway branch statement. It provides a better alternative than a large series of <code style="color: #c7254e;">if-else-if</code> statements.

Here is the general form of a <code style="color: #c7254e;">switch</code> statement:

<span class="r" style="color: #7f0055;">switch</span> (expression) {
<pre><span class="r" style="font-weight: bold; color: #7f0055;">case</span> value1: 
    statement sequence 
    <span class="r" style="font-weight: bold; color: #7f0055;">break</span>; 
<span class="r" style="font-weight: bold; color: #7f0055;">case</span> value2: 
    statement sequence 
    <span class="r" style="font-weight: bold; color: #7f0055;">break</span>; 
. 
. 
. 
<span class="r" style="font-weight: bold; color: #7f0055;">case</span> valueN: 
    statement sequence 
    <span class="r" style="font-weight: bold; color: #7f0055;">break</span>; 
<span class="r" style="font-weight: bold; color: #7f0055;">default</span>: 
    <span class="r" style="font-weight: bold; color: #7f0055;">default</span> statement sequence 
}
</pre>
The <code style="color: #c7254e;">value1</code> to <code style="color: #c7254e;">valueN</code> are the possible case values for <code style="color: #c7254e;">expression</code>. Duplicate case values are not allowed.

A <code style="color: #c7254e;">break</code> statement jumps out of switch statement to the first line that follows the entire <code style="color: #c7254e;">switch</code>statement.

Here is a simple example that uses a <code style="color: #c7254e;">switch</code> statement:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0; i &lt; 6; i++)
      <span class="r" style="font-weight: bold; color: #7f0055;">switch</span> (i) {
        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 0:
          System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i is zero."</span>);
          <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;

        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 1:
          System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i is one."</span>);
          <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;

        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 2:
          System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i is two."</span>);
          <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;

        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 3:
          System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i is three."</span>);
          <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;

        <span class="r" style="font-weight: bold; color: #7f0055;">default</span>:
          System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i is greater than 3."</span>);
      }
  }
}
</pre>
The output produced by this program is shown here:
<pre>i is zero.
i is one.
i is two.
i is three.
i is greater than 3.
i is greater than 3.</pre>
<h2 id="Example">Example</h2>
The break statement is optional. If you omit the <code style="color: #c7254e;">break</code>, execution will continue on into the next case. For example, consider the following program:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0; i &lt; 12; i++)
      <span class="r" style="font-weight: bold; color: #7f0055;">switch</span> (i) {
        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 0:
        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 1:
        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 2:
        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 3:
        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 4:
          System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i is less than 5"</span>);
          <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 5:
        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 6:
        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 7:
        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 8:
        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 9:
          System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i is less than 10"</span>);
          <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
        <span class="r" style="font-weight: bold; color: #7f0055;">default</span>:
          System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i is 10 or more"</span>);
      }
  }
}
</pre>
This program generates the following output:
<pre>i is less than 5
i is less than 5
i is less than 5
i is less than 5
i is less than 5
i is less than 10
i is less than 10
i is less than 10
i is less than 10
i is less than 10
i is 10 or more
i is 10 or more</pre>
<div></div>
<h2 id="Example_2">Example 2</h2>
Java supports the nested <code style="color: #c7254e;">switch</code> statements. For example, the following fragment is a valid nested <code style="color: #c7254e;">switch</code> statement.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0; i &lt; 6; i++)
      <span class="r" style="font-weight: bold; color: #7f0055;">switch</span>(i) { 
        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 0: 
          <span class="r" style="font-weight: bold; color: #7f0055;">switch</span>(i+1) { <span class="c" style="font-weight: bold; color: #3f7f5f;">// nested switch 
</span>            <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 0: 
              System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"target is zero"</span>); 
              <span class="r" style="font-weight: bold; color: #7f0055;">break</span>; 
            <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 1: 
              System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"target is one"</span>); 
              <span class="r" style="font-weight: bold; color: #7f0055;">break</span>; 
          } 
          <span class="r" style="font-weight: bold; color: #7f0055;">break</span>; 
        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 2: <span class="c" style="font-weight: bold; color: #3f7f5f;">// ...
</span>     }
  }
}
</pre>
The output:
<pre>target is one</pre>
<h2 id="Example_3">Example 3</h2>
The following code shows how to switch with char value.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">import</span> java.util.Scanner;

<span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">static</span> Scanner sc = <span class="r" style="font-weight: bold; color: #7f0055;">new</span> Scanner(System.in);

  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String[] args) {
    <span class="r" style="font-weight: bold; color: #7f0055;">char</span> p = <span class="q" style="font-weight: bold; color: #2a00ff;">'a'</span>;

    String details = <span class="q" style="font-weight: bold; color: #2a00ff;">""</span>;

    <span class="r" style="font-weight: bold; color: #7f0055;">switch</span> (p) {
    <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">'E'</span>:
    <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">'e'</span>:
      details += <span class="q" style="font-weight: bold; color: #2a00ff;">"\tE...\n"</span>;
    <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">'D'</span>:
    <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">'d'</span>:
      details += <span class="q" style="font-weight: bold; color: #2a00ff;">"\tD...\n"</span>;
    <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">'C'</span>:
    <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">'c'</span>:
      details += <span class="q" style="font-weight: bold; color: #2a00ff;">"\tC...\n"</span>;
    <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">'B'</span>:
    <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">'b'</span>:
      details += <span class="q" style="font-weight: bold; color: #2a00ff;">"\tB...\n"</span>;
    <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">'A'</span>:
    <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">'a'</span>:
      details += <span class="q" style="font-weight: bold; color: #2a00ff;">"\tA.\n"</span>;
      <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
    <span class="r" style="font-weight: bold; color: #7f0055;">default</span>:
      details = <span class="q" style="font-weight: bold; color: #2a00ff;">"That's"</span>;
      <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
    }
    System.out.println(details);
  }
}
</pre>
The code above generates the following result.
<pre>  A.</pre>
<h2 id="Example_4">Example 4</h2>
The following code shows how to use string literals in switch statements.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String[] args) {
    String[] data = <span class="r" style="font-weight: bold; color: #7f0055;">new</span> String[]{<span class="q" style="font-weight: bold; color: #2a00ff;">"a"</span>,<span class="q" style="font-weight: bold; color: #2a00ff;">"b"</span>,<span class="q" style="font-weight: bold; color: #2a00ff;">"bbd.co.za"</span>};
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (String argument : data) {
      <span class="r" style="font-weight: bold; color: #7f0055;">switch</span> (argument) {
      <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">"a"</span>:
      <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">"b"</span>:
        System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"a or b"</span>);
        <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
      <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">"bbd.co.za"</span>:
        System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"bbd.co.za"</span>);
        <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
      <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">"-help"</span>:
        System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"displayHelp"</span>);
        <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
      <span class="r" style="font-weight: bold; color: #7f0055;">default</span>:
        System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Illegal command line argument"</span>);
      }
    }
  }
}
</pre>
The code above generates the following result.
<pre>a or b
a or b
bbd.co.za</pre>
<h1></h1>
<h1>For</h1>
The simplest form of the <code style="color: #c7254e;">for</code> loop is shown here:
<pre>   <span class="r" style="font-weight: bold; color: #7f0055;">for</span>(initialization; condition; iteration) 
     statement; 
</pre>
for loop statement has three parts:
<ul>
	<li><code style="color: #c7254e;">initialization</code> sets a loop control variable to an initial value.</li>
	<li><code style="color: #c7254e;">condition</code> is a <code style="color: #c7254e;">Boolean</code> expression that tests the loop control variable. If <code style="color: #c7254e;">condition</code> is <code style="color: #c7254e;">true</code>, the for loop continues to iterate. If <code style="color: #c7254e;">condition</code> is <code style="color: #c7254e;">false</code>, the loop terminates.</li>
	<li>The <code style="color: #c7254e;">iteration</code> determines how the loop control variable is changed each time the loop iterates.</li>
</ul>
Here is a short program that illustrates the for loop. <code style="color: #c7254e;">i</code> is the loop control variable and <code style="color: #c7254e;">i</code> is initialized to zero in the initialization. At the start of each iteration, the conditional test <code style="color: #c7254e;">x &lt; 10</code> is performed. If the outcome of this test is true, the <code style="color: #c7254e;">println()</code> statement is executed, and then the iteration portion of the loop is executed. This process continues until the conditional test is <code style="color: #c7254e;">false</code>.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> i;
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (i = 0; i &lt; 10; i = i + 1)
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"This is i: "</span> + i);
  }
}
</pre>
This program generates the following output:
<pre>This is i: 0
This is i: 1
This is i: 2
This is i: 3
This is i: 4
This is i: 5
This is i: 6
This is i: 7
This is i: 8
This is i: 9</pre>
<h2 id="Example">Example</h2>
The following code writes the code logic from above again but loops reversively:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> n = 10; n &gt; 0; n--)
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"n:"</span> + n);
  }
}
</pre>
The output:
<pre>n:10
n:9
n:8
n:7
n:6
n:5
n:4
n:3
n:2
n:1</pre>
<h2 id="Example_2">Example 2</h2>
Here is a program that tests for prime numbers using <code style="color: #c7254e;">for</code> loop statement.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> num;
    <span class="r" style="font-weight: bold; color: #7f0055;">boolean</span> isPrime = true;
    num = 50;
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 2; i &lt;= num / 2; i++) {
      <span class="r" style="font-weight: bold; color: #7f0055;">if</span> ((num % i) == 0) {
        isPrime = false;
        <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
      }
    }
    <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (isPrime)
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Prime"</span>);
    <span class="r" style="font-weight: bold; color: #7f0055;">else</span>
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Not Prime"</span>);

  }
}
</pre>
The output:
<pre>Not Prime</pre>
<div></div>
<h2 id="Example_3">Example 3</h2>
Java allows two or more variables to control a <code style="color: #c7254e;">for</code> loop. And you can include multiple statements in both the initialization and iteration portions of the <code style="color: #c7254e;">for</code> loop. Each statement is separated from the next by a comma. Here is an example:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {

    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> a = 1, b = 4; a &lt; b; a++, b--) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"a = "</span> + a);
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"b = "</span> + b);
    }
  }
}
</pre>
The program generates the following output:
<pre>a = 1
b = 4
a = 2
b = 3</pre>
<h2 id="Example_4">Example 4</h2>
The three sections of the <code style="color: #c7254e;">for</code> can be used for any purpose and parts of the <code style="color: #c7254e;">for</code> loop can be empty.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0;
    <span class="r" style="font-weight: bold; color: #7f0055;">boolean</span> done = false;
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (; !done;) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i is "</span> + i);
      <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (i == 10)
        done = true;
      i++;

    }
  }
}
</pre>
The output:
<pre>i is 0
i is 1
i is 2
i is 3
i is 4
i is 5
i is 6
i is 7
i is 8
i is 9
i is 10</pre>
<h2 id="Example_5">Example 5</h2>
<code style="color: #c7254e;">for</code> loop can be nested to produce powerful logic, for example, we can use nested <code style="color: #c7254e;">for</code> loop to iterate a two-dimensional array. For example, here is a program that nests <code style="color: #c7254e;">for</code> loops:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0; i &lt; 10; i++) {
      <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> j = i; j &lt; 10; j++)
        System.out.print(<span class="q" style="font-weight: bold; color: #2a00ff;">"."</span>);
      System.out.println();
    }
  }
}
</pre>
The output produced by this program is shown here:
<pre>..........
.........
........
.......
......
.....
....
...
..
.</pre>
<h2 id="Java_for_each_loop">for each loop</h2>
The <code style="color: #c7254e;">for each</code> loop iterates elements in a sequence without using the loop counter.

The syntax of <code style="color: #c7254e;">for each</code> loop is:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">for</span> (type variable_name:<span class="r" style="font-weight: bold; color: #7f0055;">array</span>){
       
}
</pre>
The <code style="color: #c7254e;">type</code> must be compatible with the <code style="color: #c7254e;">array</code> type.

The following code shows how to use for each loop.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    String[] arr = <span class="r" style="font-weight: bold; color: #7f0055;">new</span> String[]{<span class="q" style="font-weight: bold; color: #2a00ff;">"bbd.co.za"</span>,<span class="q" style="font-weight: bold; color: #2a00ff;">"a"</span>,<span class="q" style="font-weight: bold; color: #2a00ff;">"b"</span>,<span class="q" style="font-weight: bold; color: #2a00ff;">"c"</span>};
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span>(String s:arr){
      System.out.println(s);
    }
  }
}
</pre>
The output:
<pre>bbd.co.za
a
b
c</pre>
<h2 id="Example_6">Example 6</h2>
The following code uses the <code style="color: #c7254e;">for-each</code> style loop to iterate a two-dimensional array.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> sum = 0;
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> nums[][] = <span class="r" style="font-weight: bold; color: #7f0055;">new</span> <span class="r" style="font-weight: bold; color: #7f0055;">int</span>[3][5];
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0; i &lt; 3; i++){
      <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> j = 0; j &lt; 5; j++){
        nums[i][j] = (i + 1) * (j + 1);
      }  
    }
    <span class="c" style="font-weight: bold; color: #3f7f5f;">// use for-each for to display and sum the values
</span>    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> x[] : nums) {
      <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> y : x) {
        System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Value is: "</span> + y);
        sum += y;
      }
    }
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Summation: "</span> + sum);
  }
}
</pre>
The output from this program is shown here:
<pre>Value is: 1
Value is: 2
Value is: 3
Value is: 4
Value is: 5
Value is: 2
Value is: 4
Value is: 6
Value is: 8
Value is: 10
Value is: 3
Value is: 6
Value is: 9
Value is: 12
Value is: 15
Summation: 90</pre>
<h2 id="Example_7">Example 7</h2>
<code style="color: #c7254e;">for-each</code> style loop is useful when searching an element in an array.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> nums[] = { 6, 8, 3, 7, 5, 6, 1, 4 };
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> val = 5;
    <span class="r" style="font-weight: bold; color: #7f0055;">boolean</span> found = false;
    <span class="c" style="font-weight: bold; color: #3f7f5f;">// use for-each style for to search nums for val
</span>    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> x : nums) {
      <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (x == val) {
        found = true;
        <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
      }
    }
    <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (found)
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Value found!"</span>);
  }
}
</pre>
The code above generates the following result.
<pre>Value found!</pre>
<h1>While</h1>
The <code style="color: #c7254e;">while</code> loop repeats a statement or block while its controlling <code style="color: #c7254e;">condition</code> is <code style="color: #c7254e;">true</code>.

Here is its general form:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">while</span>(condition) { 
   // body of loop 
}
</pre>
<ul>
	<li>The <code style="color: #c7254e;">condition</code> can be any <code style="color: #c7254e;">Boolean</code> expression.</li>
	<li>The body of the loop will be executed as long as the conditional <code style="color: #c7254e;">condition</code> is <code style="color: #c7254e;">true</code>.</li>
	<li>The curly braces are unnecessary if only a single statement is being repeated.</li>
</ul>
Here is a while loop that counts down from 10, printing exactly ten lines of "tick":
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> n = 10;
    <span class="r" style="font-weight: bold; color: #7f0055;">while</span> (n &gt; 0) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"n:"</span> + n);
      n--;
    }
  }
}
</pre>
When you run this program, you will get the following result:
<pre>n:10
n:9
n:8
n:7
n:6
n:5
n:4
n:3
n:2
n:1</pre>
<h2 id="Example">Example</h2>
The following code shows how to use the while loop to calculate sum.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String[] args) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> limit = 20;
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> sum = 0;
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 1;

    <span class="r" style="font-weight: bold; color: #7f0055;">while</span> (i &lt;= limit) {
      sum += i++;
    }
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"sum = "</span> + sum);
  }
}
</pre>
The code above generates the following result.
<pre>sum = 210</pre>
<div></div>
<h2 id="Example_2">Example 2</h2>
The body of the <code style="color: #c7254e;">while</code> loop will not execute if the condition is <code style="color: #c7254e;">false</code>. For example, in the following fragment, the call to <code style="color: #c7254e;">println()</code> is never executed:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String[] argv) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> a = 10, b = 20;
    <span class="r" style="font-weight: bold; color: #7f0055;">while</span> (a &gt; b) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"This will not be displayed"</span>);
    }
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"You are here"</span>);
  }
}
</pre>
The output:
<pre>You are here</pre>
<h2 id="Example_3">Example 3</h2>
The body of the <code style="color: #c7254e;">while</code> can be empty. For example, consider the following program:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> i, j;
    i = 10;
    j = 20;

    <span class="c" style="font-weight: bold; color: #3f7f5f;">// find midpoint between i and j
</span>    <span class="r" style="font-weight: bold; color: #7f0055;">while</span> (++i &lt; --j)
      ;
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Midpoint is "</span> + i);
  }
}
</pre>
The <code style="color: #c7254e;">while</code> loop in the code above has no loop body and <code style="color: #c7254e;">i</code> and <code style="color: #c7254e;">j</code> are calculated in the while loop condition statement. It generates the following output:
<pre>Midpoint is 15</pre>
<h2 id="Java_do_while_loop">do while loop</h2>
To execute the body of a while loop at least once, you can use the do-while loop.

The syntax for do while loop is:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">do</span> { 
   // body of loop 
} <span class="r" style="font-weight: bold; color: #7f0055;">while</span> (condition);
</pre>
Here is an example to show how to use a <code style="color: #c7254e;">do-while</code> loop.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> n = 10;
    <span class="r" style="font-weight: bold; color: #7f0055;">do</span> {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"n:"</span> + n);
      n--;
    } <span class="r" style="font-weight: bold; color: #7f0055;">while</span> (n &gt; 0);
  }
}
</pre>
The output:
<pre>n:10
n:9
n:8
n:7
n:6
n:5
n:4
n:3
n:2
n:1</pre>
The loop in the preceding program can be written as follows:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> void main(String args[]) {
    int n = 10;
    <span class="r" style="font-weight: bold; color: #7f0055;">do</span> {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"n:"</span> + n);
    } <span class="r" style="font-weight: bold; color: #7f0055;">while</span> (--n &gt; 0);
  }
}
</pre>
The output is identical the result above:
<pre>n:10
n:9
n:8
n:7
n:6
n:5
n:4
n:3
n:2
n:1</pre>
<h2 id="Example_4">Example 4</h2>
The following program implements a very simple help system with <code style="color: #c7254e;">do-while</code> loop and <code style="color: #c7254e;">switch </code>statement.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) <span class="r" style="font-weight: bold; color: #7f0055;">throws</span> java.io.IOException {
    <span class="r" style="font-weight: bold; color: #7f0055;">char</span> choice;
    <span class="r" style="font-weight: bold; color: #7f0055;">do</span> {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Help on:"</span>);
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">" 1. A"</span>);
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">" 2. B"</span>);
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">" 3. C"</span>);
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">" 4. D"</span>);
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">" 5. E"</span>);
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Choose one:"</span>);
      choice = (<span class="r" style="font-weight: bold; color: #7f0055;">char</span>) System.in.read();
    } <span class="r" style="font-weight: bold; color: #7f0055;">while</span> (choice &lt; <span class="q" style="font-weight: bold; color: #2a00ff;">'1'</span> || choice &gt; <span class="q" style="font-weight: bold; color: #2a00ff;">'5'</span>);
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"\n"</span>);
    <span class="r" style="font-weight: bold; color: #7f0055;">switch</span> (choice) {
      <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">'1'</span>:
        System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"A"</span>);
        <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
      <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">'2'</span>:
        System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"B"</span>);
        <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
      <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">'3'</span>:
        System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"C"</span>);
        <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
      <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">'4'</span>:
        System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"D"</span>);
        <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
      <span class="r" style="font-weight: bold; color: #7f0055;">case</span> <span class="q" style="font-weight: bold; color: #2a00ff;">'5'</span>:
        System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"E"</span>);
        <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
    }
  }
}
</pre>
Here is a sample run produced by this program:
<pre>Help on:
 1. A
 2. B
 3. C
 4. D
 5. E
Choose one:</pre>
<h1>Break</h1>
When a <code style="color: #c7254e;">break</code> statement is encountered inside a loop, the loop is terminated and program control resumes at the next statement following the loop.

Syntax for break statement

<code style="color: #c7254e;">break;</code>

or

<code style="color: #c7254e;">break labelName;</code>

Here is a simple example:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0; i &lt; 100; i++) {
      <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (i == 10)
        <span class="r" style="font-weight: bold; color: #7f0055;">break</span>; <span class="c" style="font-weight: bold; color: #3f7f5f;">// terminate loop if i is 10
</span>      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i: "</span> + i);
    }
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Loop complete."</span>);
  }
}
</pre>
This program generates the following output:
<pre>i: 0
i: 1
i: 2
i: 3
i: 4
i: 5
i: 6
i: 7
i: 8
i: 9
Loop complete.</pre>
<h2 id="Example">Example</h2>
The <code style="color: #c7254e;">break</code> statement can be used with <code style="color: #c7254e;">while</code> loop as well. For example, here is the preceding program coded by use of a <code style="color: #c7254e;">while</code> loop.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0;
    <span class="r" style="font-weight: bold; color: #7f0055;">while</span> (i &lt; 100) {
      <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (i == 10)
        <span class="r" style="font-weight: bold; color: #7f0055;">break</span>; <span class="c" style="font-weight: bold; color: #3f7f5f;">// terminate loop if i is 10
</span>      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i: "</span> + i);
      i++;
    }
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Loop complete."</span>);
  }
}
</pre>
The output:
<pre>i: 0
i: 1
i: 2
i: 3
i: 4
i: 5
i: 6
i: 7
i: 8
i: 9
Loop complete.</pre>
<h2 id="Example_2">Example 2</h2>
The <code style="color: #c7254e;">break</code> statement is useful to exit an infinite loop. In the following <code style="color: #c7254e;">while</code> loop the <code style="color: #c7254e;">true </code>value is hard coded in, therefore the <code style="color: #c7254e;">while</code> loop is an infinite loop. Then it uses an <code style="color: #c7254e;">if </code>statement combined with the <code style="color: #c7254e;">break</code> statement to exit the <code style="color: #c7254e;">whole</code> loop when <code style="color: #c7254e;">i</code> is 10.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0;
    <span class="r" style="font-weight: bold; color: #7f0055;">while</span> (true) {
      <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (i == 10){
        <span class="r" style="font-weight: bold; color: #7f0055;">break</span>; <span class="c" style="font-weight: bold; color: #3f7f5f;">// terminate loop if i is 10
</span>      }
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i: "</span> + i);
      i++;
    }
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Loop complete."</span>);
  }
}
</pre>
The output:
<pre>i: 0
i: 1
i: 2
i: 3
i: 4
i: 5
i: 6
i: 7
i: 8
i: 9
Loop complete.</pre>
<h2 id="Example_3">Example 3</h2>
When used inside a set of nested loops, the <code style="color: #c7254e;">break</code> statement will only break out of the inner-most loop. For example:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0; i &lt; 5; i++) {
      System.out.print(<span class="q" style="font-weight: bold; color: #2a00ff;">"Pass "</span> + i + <span class="q" style="font-weight: bold; color: #2a00ff;">": "</span>);
      <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> j = 0; j &lt; 100; j++) {
        <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (j == 10)
          <span class="r" style="font-weight: bold; color: #7f0055;">break</span>; <span class="c" style="font-weight: bold; color: #3f7f5f;">// terminate loop if j is 10
</span>        System.out.print(j + <span class="q" style="font-weight: bold; color: #2a00ff;">" "</span>);
      }
      System.out.println();
    }
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Loops complete."</span>);
  }
}
</pre>
This program generates the following output:
<pre>Pass 0: 0 1 2 3 4 5 6 7 8 9
Pass 1: 0 1 2 3 4 5 6 7 8 9
Pass 2: 0 1 2 3 4 5 6 7 8 9
Pass 3: 0 1 2 3 4 5 6 7 8 9
Pass 4: 0 1 2 3 4 5 6 7 8 9
Loops complete.</pre>
<h2 id="Example_4">Example 4</h2>
The <code style="color: #c7254e;">break</code> that terminates a <code style="color: #c7254e;">switch</code> statement affects only that <code style="color: #c7254e;">switch</code> statement and not any enclosing loops.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0; i &lt; 6; i++)
      <span class="r" style="font-weight: bold; color: #7f0055;">switch</span> (i) {
        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 1:
          System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i is one."</span>);
          <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> j = 0; j &lt; 5; j++) {
            System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"j is "</span> + j);
          }
          <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
        <span class="r" style="font-weight: bold; color: #7f0055;">case</span> 2:
          System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i is two."</span>);
          <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;

        <span class="r" style="font-weight: bold; color: #7f0055;">default</span>:
          System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i is greater than 3."</span>);
      }
  }
}
</pre>
The output:
<pre>i is greater than 3.
i is one.
j is 0
j is 1
j is 2
j is 3
j is 4
i is two.
i is greater than 3.
i is greater than 3.
i is greater than 3.</pre>
From the result we can see that the <code style="color: #c7254e;">break</code> statement only exit the <code style="color: #c7254e;">switch</code> statement.
<h2 id="Example_5">Example 5</h2>
We can specify a <code style="color: #c7254e;">label</code> for <code style="color: #c7254e;">break</code> statement and let the code logic exit to that point. The following code uses the <code style="color: #c7254e;">label</code> to make break statement exit two layers of the nested <code style="color: #c7254e;">for</code> loop.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    outer: <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0; i &lt; 10; i++) {
      <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> j = 0; j &lt; 10; j++) {
        <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (j + 1 &lt; i) {
          System.out.println();
          <span class="r" style="font-weight: bold; color: #7f0055;">continue</span> outer;
        }
        System.out.print(<span class="q" style="font-weight: bold; color: #2a00ff;">" "</span> + (i * j));
      }
    }
    System.out.println();
  }
}
</pre>
The output:
<pre> 0 0 0 0 0 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9</pre>
<h1>Continue</h1>
<code style="color: #c7254e;">continue</code> statement forces an early iteration of a loop. In <code style="color: #c7254e;">while</code> and <code style="color: #c7254e;">do-while</code> loops, a <code style="color: #c7254e;">continue</code> statement causes control to be transferred to the conditional expression that controls the loop. In a <code style="color: #c7254e;">for</code> loop, control goes first to the iteration portion of the for statement and then to the conditional expression.

Syntax for continue statement

<code style="color: #c7254e;">continue;</code>

or

<code style="color: #c7254e;">continue labelName;</code>

The following code shows how to use a continue statement.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String[] argv) {
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0; i &lt; 10; i++) {
      System.out.print(i + <span class="q" style="font-weight: bold; color: #2a00ff;">" "</span>);
      <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (i % 2 == 0)
        <span class="r" style="font-weight: bold; color: #7f0055;">continue</span>;
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">""</span>);
    }
  }
}
</pre>
The code above generates the following result.
<pre>0 1
2 3
4 5
6 7
8 9</pre>
<h2 id="Example">Example</h2>
<code style="color: #c7254e;">continue</code> may specify a <code style="color: #c7254e;">label</code> to describe which enclosing loop to continue.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    outer: <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0; i &lt; 10; i++) {
      <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> j = 0; j &lt; 10; j++) {
        <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (j &gt; i) {
          System.out.println();
          <span class="r" style="font-weight: bold; color: #7f0055;">continue</span> outer;
        }
        System.out.print(<span class="q" style="font-weight: bold; color: #2a00ff;">" "</span> + (i * j));
      }
    }
    System.out.println();
  }
}
</pre>
Here is the output of this program:
<pre> 0
 0 1
 0 2 4
 0 3 6 9
 0 4 8 12 16
 0 5 10 15 20 25
 0 6 12 18 24 30 36
 0 7 14 21 28 35 42 49
 0 8 16 24 32 40 48 56 64
 0 9 18 27 36 45 54 63 72 81</pre>
<h2 id="Example_2">Example 2</h2>
The following code shows how to use labeled while loop.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String[] args) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0;
    outer: <span class="r" style="font-weight: bold; color: #7f0055;">while</span> (true) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Outer while loop"</span>);
      <span class="r" style="font-weight: bold; color: #7f0055;">while</span> (true) {
        i++;
        System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"i = "</span> + i);
        <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (i == 1) {
          System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"continue"</span>);
          <span class="r" style="font-weight: bold; color: #7f0055;">continue</span>;
        }
        <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (i == 3) {
          System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"continue outer"</span>);
          <span class="r" style="font-weight: bold; color: #7f0055;">continue</span> outer;
        }
        <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (i == 5) {
          System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"break"</span>);
          <span class="r" style="font-weight: bold; color: #7f0055;">break</span>;
        }
        <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (i == 7) {
          System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"break outer"</span>);
          <span class="r" style="font-weight: bold; color: #7f0055;">break</span> outer;
        }
      }
    }
  }
}
</pre>
The code above generates the following result.
<pre>Outer while loop
i = 1
continue
i = 2
i = 3
continue outer
Outer while loop
i = 4
i = 5
break
Outer while loop
i = 6
i = 7
break outer</pre>
<h2 id="Example_3">Example 3</h2>
The following code shows how to calculate Primes with continue statement and label.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String[] args) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> nValues = 50;

    OuterLoop: <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 2; i &lt;= nValues; i++) {
      <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> j = 2; j &lt; i; j++) {
        <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (i % j == 0) {
          <span class="r" style="font-weight: bold; color: #7f0055;">continue</span> OuterLoop;
        }
      }
      System.out.println(i);
    }
  }
}
</pre>
The code above generates the following result.
<pre>2
3
5
7
11
13
17
19
23
...</pre>
<h2 id="Example_4">Example 4</h2>
The following code shows how to use Labeled continue statement to calculate factorial numbers.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String[] args) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> limit = 20;
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> factorial = 1;

    OuterLoop: <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 1; i &lt;= limit; i++) {
      factorial = 1;
      <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> j = 2; j &lt;= i; j++) {
        <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (i &gt; 10 &amp;&amp; i % 2 == 1) {
          <span class="r" style="font-weight: bold; color: #7f0055;">continue</span> OuterLoop;
        }
        factorial *= j;
      }
      System.out.println(i + <span class="q" style="font-weight: bold; color: #2a00ff;">"! is "</span> + factorial);
    }
  }
}
</pre>
The code above generates the following result.
<pre>1! is 1
2! is 2
3! is 6
4! is 24
5! is 120
6! is 720
7! is 5040
8! is 40320
...</pre>
<h1>Comments</h1>
Comments in source provide information about the source code. It is a good practice to write comments to document the source code

There are three types of comment supported in Java.
<ol>
	<li>Single-line,</li>
	<li>Multiline and</li>
	<li>Documentation comment.</li>
</ol>
<h2 id="Single_line_comment">Single-line comment</h2>
single line comment starts from <code style="color: #c7254e;">//</code> and ends till the end of that line.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="c" style="font-weight: bold; color: #3f7f5f;">// This is a single line comment.
</span>  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String[] argv) {
  }

}
</pre>
<h2 id="Multiline_comment">Multiline comment</h2>
multiline comment is between <code style="color: #c7254e;">/*</code> and <code style="color: #c7254e;">*/</code>. Everything from <code style="color: #c7254e;">/*</code> through <code style="color: #c7254e;">*/</code> is ignored by the compiler.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="c" style="font-weight: bold; color: #3f7f5f;">/* This 
     is 
     a
     Multiline 
     comment.
  */</span>
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String[] argv) {
  }

}</pre>
<div></div>
<h2 id="Java_documentation_comment_Javadoc_">Documentation comment(Javadoc)</h2>
Javadoc Documentation comment is used to produce an HTML file that documents your program. In short we usually call Java documentation comment -  javadoc.

A Javadoc comment occupies one or more lines of source code. The documentation comment begins with a <code style="color: #c7254e;">/**</code> and ends with a <code style="color: #c7254e;">*/</code>. Everything from /** through */ is ignored by the compiler.

The following example demonstrates a Javadoc comment:
<pre>/** 
* Application entry point 
* 
* @param args <span class="r" style="font-weight: bold; color: #7f0055;">array</span> of command-line arguments passed to this method 
*/ 
<span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> void main(String[] args) 
{ 
// TODO code application logic here 
}
</pre>
This example begins with a Javadoc comment that describes the main() method. <code style="color: #c7254e;">/**</code> and <code style="color: #c7254e;">*/</code>contains a description of the method, which could include HTML tags such as <code style="color: #c7254e;">&lt;p&gt;</code>, <code style="color: #c7254e;">&lt;code&gt;</code> and <code style="color: #c7254e;">/&lt;/code&gt;</code>, and the <code style="color: #c7254e;">@param</code> Javadoc tag (an @-prefixed instruction).

The following list identifies several commonly used tags:
<ul>
	<li><code style="color: #c7254e;">@author</code> identifies the source code's author.</li>
	<li><code style="color: #c7254e;">@deprecated</code> identifies a source code entity that should no longer be used.</li>
	<li><code style="color: #c7254e;">@param</code> identifies one of a method's parameters.</li>
	<li><code style="color: #c7254e;">@see</code> provides a see-also reference.</li>
	<li><code style="color: #c7254e;">@since</code> identifies the software release where the entity first originated.</li>
	<li><code style="color: #c7254e;">@return</code> identifies the kind of value that the method returns.</li>
</ul>
The following code has more documentation comments
<pre><span class="c" style="font-weight: bold; color: #3f7f5f;">/**
 * A simple class for introducing a Java application.
 * 
 * @author yourName
 */</span>
<span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> HelloWorld {
  <span class="c" style="font-weight: bold; color: #3f7f5f;">/**
   * Application entry point
   * 
   * @param args
   *          array of command-line arguments passed to this method
   */</span>
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String[] args) {
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Hello, world!"</span>);
  }
}
</pre>
We can extract these documentation comments into a set of HTML files by using the JDK's javadoc tool, as follows:
<pre>javadoc HelloWorld.java</pre>
<code style="color: #c7254e;">javadoc</code> command defaults to generating HTML-based documentation for public classes and public/protected members of these classes.