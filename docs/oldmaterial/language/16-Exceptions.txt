An exception is an abnormal condition that arises in a code sequence at run time. For example, read a non-existing file.

An Exception object describes an exceptional condition that has occurred in a piece of code.
<h2 id="Keywords"></h2>
Exception handling is managed via five <strong>keywords</strong>: <code style="color: #c7254e;">try, catch, throw, throws, and finally</code>.

<code style="color: #c7254e;">try</code> block has program statements that you want to monitor for exceptions.

If an exception occurs within the <code style="color: #c7254e;">try</code> block, it is thrown.

The <code style="color: #c7254e;">catch</code> statement can catch exception and handle it in rational manner.

To manually throw an exception, use the keyword <code style="color: #c7254e;">throw</code>.

Any exception that is thrown out of a method must be specified as such by a <code style="color: #c7254e;">throws</code> clause.

Any code that absolutely must be executed after a try block completes is put in a <code style="color: #c7254e;">finally</code> block.
<div></div>
To handle an exception we put code which might have exceptions in a try...catch statement.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">try</span> { 
<span class="c" style="font-weight: bold; color: #3f7f5f;">// block of code to monitor for errors 
</span>} 
<span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (ExceptionType1 exOb) { 
<span class="c" style="font-weight: bold; color: #3f7f5f;">// exception handler for ExceptionType1 
</span>}
<span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (ExceptionType2 exOb) { 
<span class="c" style="font-weight: bold; color: #3f7f5f;">// exception handler for ExceptionType2 
</span>}
</pre>
Program statements that might have exceptions are contained within a <code style="color: #c7254e;">try</code> block. The exception handler is coded using <code style="color: #c7254e;">catch</code> statement

Here, <code style="color: #c7254e;">ExceptionType</code> is the type of exception that has occurred.
<div></div>
<h2 id="Example">Example</h2>
Enclose the code that you want to monitor inside a try block and catch clause.

The following program includes a try block and a catch clause that processes the ArithmeticException generated by the division-by-zero error:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> d, a;
    <span class="r" style="font-weight: bold; color: #7f0055;">try</span> { <span class="c" style="font-weight: bold; color: #3f7f5f;">// monitor a block of code.
</span>      d = 0;
      a = 42 / d;
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"This will not be printed."</span>);
    } <span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (ArithmeticException e) { <span class="c" style="font-weight: bold; color: #3f7f5f;">// catch divide-by-zero error
</span>      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Division by zero."</span>);
    }
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"After catch statement."</span>);
  }
}
</pre>
This program generates the following output:
<pre>Division by zero.
After catch statement.</pre>
<h2 id="Example_2">Example 2</h2>
Once an exception is thrown, program control transfers out of the try block into the catch block. Execution never returns to the try block from a catch.

The following code handles an exception and move on.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">import</span> java.util.Random;

<span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> a = 0, b = 0, c = 0;
    Random r = <span class="r" style="font-weight: bold; color: #7f0055;">new</span> Random();
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0; i &lt; 32000; i++) {
      <span class="r" style="font-weight: bold; color: #7f0055;">try</span> {
        b = r.nextInt();
        c = r.nextInt();
        a = 12345 / (b / c);
      } <span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (ArithmeticException e) {
        System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Division by zero."</span>);
        a = 0; <span class="c" style="font-weight: bold; color: #3f7f5f;">// set a to zero and continue
</span>      }
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"a: "</span> + a);
    }
  }
}
</pre>
The code above generates the following result.
<pre>a: -12345
a: 6172
a: 12345
a: -12345
Division by zero.
...</pre>
<h1></h1>
<h2>try catch statement</h2>
To guard against and handle a run-time error, enclose the code to monitor inside a try block.

Immediately following the try block, include a catch clause that specifies the exception type that you wish to catch.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">try</span> { <span class="c" style="font-weight: bold; color: #3f7f5f;">// monitor a block of code.
</span>      <span class="r" style="font-weight: bold; color: #7f0055;">int</span> d = 0;
      <span class="r" style="font-weight: bold; color: #7f0055;">int</span> a = 42 / d;
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"This will not be printed."</span>);
    } <span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (ArithmeticException e) { <span class="c" style="font-weight: bold; color: #3f7f5f;">// catch divide-by-zero error
</span>      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Division by zero."</span>);
    }
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"After catch statement."</span>);
  }
}
</pre>
The code above generates the following result.
<pre>Division by zero.
After catch statement.</pre>
<div></div>
<h2 id="Multiple_catch_Clauses">Multiple catch Clauses</h2>
You can specify two or more catch clauses, each catching a different type of exception.

When an exception is thrown, each catch statement is inspected in order, and the first one whose type matches that of the exception is executed.

After one catch statement executes, the others are bypassed, and execution continues after the try/catch block.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">try</span> {
      <span class="r" style="font-weight: bold; color: #7f0055;">int</span> a = args.length;
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"a = "</span> + a);
      <span class="r" style="font-weight: bold; color: #7f0055;">int</span> b = 42 / a;
      <span class="r" style="font-weight: bold; color: #7f0055;">int</span> c[] = { 1 };
      c[42] = 99;
    } <span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (ArithmeticException e) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Divide by 0: "</span> + e);
    } <span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (ArrayIndexOutOfBoundsException e) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Array index oob: "</span> + e);
    }
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"After try/catch blocks."</span>);
  }
}
</pre>
When you use multiple catch statements, exception subclasses must come before any of their superclasses.

The code above generates the following result.
<pre>a = 0
Divide by 0: java.lang.ArithmeticException: / by zero
After try/catch blocks.</pre>
<h2></h2>
<h2 id="Nested_try_Statements">Nested try Statements</h2>
The try statement can be nested.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">try</span> {
      <span class="r" style="font-weight: bold; color: #7f0055;">int</span> a = args.length;
      <span class="r" style="font-weight: bold; color: #7f0055;">int</span> b = 42 / a;
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"a = "</span> + a);
      <span class="r" style="font-weight: bold; color: #7f0055;">try</span> { <span class="c" style="font-weight: bold; color: #3f7f5f;">// nested try block
</span>        <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (a == 1)
          a = a / (a - a); <span class="c" style="font-weight: bold; color: #3f7f5f;">// division by zero exception
</span>        <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (a == 2) {
          <span class="r" style="font-weight: bold; color: #7f0055;">int</span> c[] = { 1 };
          c[4] = 9; <span class="c" style="font-weight: bold; color: #3f7f5f;">// an out-of-bounds exception
</span>        }
      } <span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (ArrayIndexOutOfBoundsException e) {
        System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Array index out-of-bounds: "</span> + e);
      }
    } <span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (ArithmeticException e) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Divide by 0: "</span> + e);
    }
  }
}
</pre>
The code above generates the following result.
<pre>Divide by 0: java.lang.ArithmeticException: / by zero</pre>
<h2></h2>
<h2 id="Java_throw_statement">throw statement</h2>
We can throw an exception in case of an exception.

The general form of throw is shown here:
<pre> <span class="r" style="font-weight: bold; color: #7f0055;">throw</span> ThrowableInstance; 
</pre>
Here, ThrowableInstance must be an object of type Throwable or a subclass of Throwable.

There are two ways to obtain a Throwable object: using a parameter in a catch clause, or creating one with the new operator.

The flow of execution stops immediately after the throw statement; any subsequent statements are not executed.

How to use throws statement?
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> aMethod() {
    <span class="r" style="font-weight: bold; color: #7f0055;">try</span> {
      <span class="r" style="font-weight: bold; color: #7f0055;">throw</span> <span class="r" style="font-weight: bold; color: #7f0055;">new</span> NullPointerException(<span class="q" style="font-weight: bold; color: #2a00ff;">"demo"</span>);
    } <span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (NullPointerException e) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Caught inside demoproc."</span>);
      <span class="r" style="font-weight: bold; color: #7f0055;">throw</span> e; <span class="c" style="font-weight: bold; color: #3f7f5f;">// rethrow the exception
</span>    }
  }

  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">try</span> {
      aMethod();
    } <span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (NullPointerException e) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Recaught: "</span> + e);
    }
  }
}
</pre>
The code above generates the following result.
<pre>Caught inside demoproc.
Recaught: java.lang.NullPointerException: demo</pre>
<h2></h2>
<h2 id="Java_throws_statement">throw<span style="text-decoration: underline;">s</span> statement</h2>
If a method wants to throw an exception, it must specify this behavior.

This is the general form of a method declaration that includes a <strong>throws</strong> clause:
<pre>type method-name(parameter-list) throws exception-list 
{ 
// body of method 
}
</pre>
exception-list is a comma-separated list of the exceptions that a method can throw.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> throwOne() <span class="r" style="font-weight: bold; color: #7f0055;">throws</span> IllegalAccessException {
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Inside throwOne."</span>);
    <span class="r" style="font-weight: bold; color: #7f0055;">throw</span> <span class="r" style="font-weight: bold; color: #7f0055;">new</span> IllegalAccessException(<span class="q" style="font-weight: bold; color: #2a00ff;">"demo"</span>);
  }

  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">try</span> {
      throwOne();
    } <span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (IllegalAccessException e) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Caught "</span> + e);
    }
  }
}
</pre>
The code above generates the following result.
<pre>Inside throwOne.
Caught java.lang.IllegalAccessException: demo</pre>
<h2></h2>
<h2 id="Java_finally_statement">finally statement</h2>
Any code that would be executed regardless after a try block is put in a <code style="color: #c7254e;">finally</code> block.

This is the general form of an exception-handling block:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">try</span> { 
// block of code to monitor <span class="r" style="font-weight: bold; color: #7f0055;">for</span> errors 
} 
<span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (ExceptionType1 exOb) { 
// exception handler <span class="r" style="font-weight: bold; color: #7f0055;">for</span> ExceptionType1 
}
<span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (ExceptionType2 exOb) { 
// exception handler <span class="r" style="font-weight: bold; color: #7f0055;">for</span> ExceptionType2 
}
// ... 
finally { 
// block of code to be executed after <span class="r" style="font-weight: bold; color: #7f0055;">try</span> block ends 
}
</pre>
<code style="color: #c7254e;">finally</code> creates a block of code that will be executed after a <code style="color: #c7254e;">try</code>/<code style="color: #c7254e;">catch</code> block has completed.

The <code style="color: #c7254e;">finally</code> block will execute even if no catch statement matches the exception.

<code style="color: #c7254e;">finally</code> block can be useful for closing file handles and freeing up any other resources. The finally clause is optional.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="c" style="font-weight: bold; color: #3f7f5f;">// Through an exception out of the method.
</span>  <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> methodC() {
    <span class="r" style="font-weight: bold; color: #7f0055;">try</span> {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"inside methodC"</span>);
      <span class="r" style="font-weight: bold; color: #7f0055;">throw</span> <span class="r" style="font-weight: bold; color: #7f0055;">new</span> RuntimeException(<span class="q" style="font-weight: bold; color: #2a00ff;">"demo"</span>);
    } <span class="r" style="font-weight: bold; color: #7f0055;">finally</span> {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"methodC finally"</span>);
    }
  }

  <span class="c" style="font-weight: bold; color: #3f7f5f;">// Return from within a try block.
</span>  <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> methodB() {
    <span class="r" style="font-weight: bold; color: #7f0055;">try</span> {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"inside methodB"</span>);
      <span class="r" style="font-weight: bold; color: #7f0055;">return</span>;
    } <span class="r" style="font-weight: bold; color: #7f0055;">finally</span> {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"methodB finally"</span>);
    }
  }

  <span class="c" style="font-weight: bold; color: #3f7f5f;">// Execute a try block normally.
</span>  <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> methodA() {
    <span class="r" style="font-weight: bold; color: #7f0055;">try</span> {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"inside methodA"</span>);
    } <span class="r" style="font-weight: bold; color: #7f0055;">finally</span> {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"methodA finally"</span>);
    }
  }

  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">try</span> {
      methodC();
    } <span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (Exception e) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Exception caught"</span>);
    }
    methodB();
    methodA();
  }
}
</pre>
The code above generates the following result.
<pre>inside methodC
methodC finally
Exception caught
inside methodB
methodB finally
inside methodA
methodA finally</pre>
<h1></h1>
<h1>Exception Types</h1>
&nbsp;

The following diagram shows the exception type hierarchy:
<pre>Throwable
 |
 |
 +---Exception. 
 |    |
 |    |
 |    +--- RuntimeException
 |
 +---Error
</pre>
Exception and its subclasses are used for exceptional conditions that user programs should catch. You can subclass Exception to create your own custom exception types.

Error defines exceptions that are not expected to be caught under normal circumstances. Run-time system use Error to indicate errors in the run-time environment. Stack overflow is an example of such an error.
<h2></h2>
<h2 id="Uncaught_Exceptions">Uncaught Exceptions</h2>
This small program includes an expression that intentionally causes a divide-by-zero error:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> d = 0;
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> a = 42 / d;
  }
}
</pre>
Here is the exception generated when this example is executed:
<pre>| java.lang.ArithmeticException thrown: / by zero
| at Main.main (#19:4)
| at (#20:1)</pre>
<div></div>
<h2 id="Example">Example</h2>
Here is another version of the preceding program that introduces the same error but in a method separate from main( ):
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> subroutine() {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> d = 0;
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> a = 10 / d;
  }

  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    subroutine();
  }
}
</pre>
The resulting stack trace from the default exception handler shows how the entire call stack is displayed:
<pre>| java.lang.ArithmeticException thrown: / by zero
| at Main.subroutine (#21:4)
| at Main.main (#21:7)
| at (#22:1)</pre>
<h2 id="Example_2">Example 2</h2>
You can display exception description message in a println( ) statement.

For example, the catch block can be written like this:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">import</span> java.util.Random;

<span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">int</span> a = 0, b = 0, c = 0;
    Random r = <span class="r" style="font-weight: bold; color: #7f0055;">new</span> Random();
    <span class="r" style="font-weight: bold; color: #7f0055;">for</span> (<span class="r" style="font-weight: bold; color: #7f0055;">int</span> i = 0; i &lt; 32000; i++) {
      <span class="r" style="font-weight: bold; color: #7f0055;">try</span> {
        b = r.nextInt();
        c = r.nextInt();
        a = 12345 / (b / c);
      } <span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (ArithmeticException e) {
        System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Exception: "</span> + e); 
        a = 0; <span class="c" style="font-weight: bold; color: #3f7f5f;">// set a to zero and continue
</span>      }
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"a: "</span> + a);
    }
  }
}
</pre>
The code above generates the following result.
<pre>a: 0
a: -1543
Exception: java.lang.ArithmeticException: / by zero
...</pre>
<h2></h2>
<h2 id="What_are_Java_s_Built_in_Exceptions">Built-in Exceptions</h2>
Exceptions subclassing RuntimeException need not be included in any method's throws list. These are called unchecked exceptions.

The unchecked exceptions defined in java.lang are listed in the following table.
<table class="table table-bordered table-striped">
<thead>
<tr>
<th>Exception</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>ArithmeticException</td>
<td>Arithmetic error, such as divide-by-zero.</td>
</tr>
<tr>
<td>ArrayIndexOutOfBoundsException</td>
<td>Array index is out-of-bounds.</td>
</tr>
<tr>
<td>ArrayStoreException</td>
<td>Assignment to an array element of an incompatible type.</td>
</tr>
<tr>
<td>ClassCastException</td>
<td>Invalid cast.</td>
</tr>
<tr>
<td>EnumConstantNotPresentException</td>
<td>An attempt is made to use an undefined enumeration value.</td>
</tr>
<tr>
<td>IllegalArgumentException</td>
<td>Illegal argument used to invoke a method.</td>
</tr>
<tr>
<td>IllegalMonitorStateException</td>
<td>Illegal monitor operation, such as waiting on an unlocked thread.</td>
</tr>
<tr>
<td>IllegalStateException</td>
<td>Environment or application is in incorrect state.</td>
</tr>
<tr>
<td>IllegalThreadStateException</td>
<td>Requested operation not compatible with current thread state.</td>
</tr>
<tr>
<td>IndexOutOfBoundsException</td>
<td>Some type of index is out-of-bounds.</td>
</tr>
<tr>
<td>NegativeArraySizeException</td>
<td>Array created with a negative size.</td>
</tr>
<tr>
<td>NullPointerException</td>
<td>Invalid use of a null reference.</td>
</tr>
<tr>
<td>NumberFormatException</td>
<td>Invalid conversion of a string to a numeric format.</td>
</tr>
<tr>
<td>SecurityException</td>
<td>Attempt to violate security.</td>
</tr>
<tr>
<td>StringIndexOutOfBounds</td>
<td>Attempt to index outside the bounds of a string.</td>
</tr>
<tr>
<td>TypeNotPresentException</td>
<td>Type not found.</td>
</tr>
<tr>
<td>UnsupportedOperationException</td>
<td>An unsupported operation was encountered.</td>
</tr>
</tbody>
</table>
The checked exceptions are listed in the following table.
<table class="table table-bordered table-striped">
<thead>
<tr>
<th>Exception</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>ClassNotFoundException</td>
<td>Class not found.</td>
</tr>
<tr>
<td>CloneNotSupportedException</td>
<td>Attempt to clone an object that does not implement the Cloneable interface.</td>
</tr>
<tr>
<td>IllegalAccessException</td>
<td>Access to a class is denied.</td>
</tr>
<tr>
<td>InstantiationException</td>
<td>Attempt to create an object of an abstract class or interface.</td>
</tr>
<tr>
<td>InterruptedException</td>
<td>One thread has been interrupted by another thread.</td>
</tr>
<tr>
<td>NoSuchFieldException</td>
<td>A requested field does not exist.</td>
</tr>
<tr>
<td>NoSuchMethodException</td>
<td>A requested method does not exist.</td>
</tr>
</tbody>
</table>
<h2></h2>
<h2 id="Java_custom_exception_class">custom exception class</h2>
You can create your own exception class by defining a subclass of <code style="color: #c7254e;">Exception</code>.

The <code style="color: #c7254e;">Exception</code> class does not define any methods of its own. It inherits methods provided by <code style="color: #c7254e;">Throwable</code>.

The following program creates a custom exception type.
<pre><span class="r" style="font-weight: bold; color: #7f0055;">class</span> MyException <span class="r" style="font-weight: bold; color: #7f0055;">extends</span> Exception {
  <span class="r" style="font-weight: bold; color: #7f0055;">private</span> <span class="r" style="font-weight: bold; color: #7f0055;">int</span> detail;

  MyException(<span class="r" style="font-weight: bold; color: #7f0055;">int</span> a) {
    detail = a;
  }

  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> String toString() {
    <span class="r" style="font-weight: bold; color: #7f0055;">return</span> <span class="q" style="font-weight: bold; color: #2a00ff;">"MyException["</span> + detail + <span class="q" style="font-weight: bold; color: #2a00ff;">"]"</span>;
  }
}

<span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> compute(<span class="r" style="font-weight: bold; color: #7f0055;">int</span> a) <span class="r" style="font-weight: bold; color: #7f0055;">throws</span> MyException {
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Called compute("</span> + a + <span class="q" style="font-weight: bold; color: #2a00ff;">")"</span>);
    <span class="r" style="font-weight: bold; color: #7f0055;">if</span> (a &gt; 10)
      <span class="r" style="font-weight: bold; color: #7f0055;">throw</span> <span class="r" style="font-weight: bold; color: #7f0055;">new</span> MyException(a);
    System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Normal exit"</span>);
  }

  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">try</span> {
      compute(1);
      compute(20);
    } <span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (MyException e) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Caught "</span> + e);
    }
  }
}
</pre>
The code above generates the following result.
<pre>Called compute(1)
Normal exit
Called compute(20)
Caught MyException[20]</pre>
<h2></h2>
<h2 id="Java_chained_exceptions">chained exceptions</h2>
The chained exception allows you to associate another exception with an exception. This second exception describes the cause of the first exception.

To allow chained exceptions, two constructors and two methods were added to <code style="color: #c7254e;">Throwable</code>.
<pre>Throwable(Throwable causeExc) 
Throwable(String msg, Throwable causeExc)
</pre>
Here is an example that illustrates the mechanics of handling chained exceptions:
<pre><span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">class</span> Main {
  <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> demoproc() {
    NullPointerException e = <span class="r" style="font-weight: bold; color: #7f0055;">new</span> NullPointerException(<span class="q" style="font-weight: bold; color: #2a00ff;">"top layer"</span>);
    e.initCause(<span class="r" style="font-weight: bold; color: #7f0055;">new</span> ArithmeticException(<span class="q" style="font-weight: bold; color: #2a00ff;">"cause"</span>));
    <span class="r" style="font-weight: bold; color: #7f0055;">throw</span> e;
  }

  <span class="r" style="font-weight: bold; color: #7f0055;">public</span> <span class="r" style="font-weight: bold; color: #7f0055;">static</span> <span class="r" style="font-weight: bold; color: #7f0055;">void</span> main(String args[]) {
    <span class="r" style="font-weight: bold; color: #7f0055;">try</span> {
      demoproc();
    } <span class="r" style="font-weight: bold; color: #7f0055;">catch</span> (NullPointerException e) {
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Caught: "</span> + e);
      System.out.println(<span class="q" style="font-weight: bold; color: #2a00ff;">"Original cause: "</span> + e.getCause());
    }
  }
}
</pre>
The code above generates the following result.
<pre>Caught: java.lang.NullPointerException: top layer
Original cause: java.lang.ArithmeticException: cause</pre>