<div id="header" style="color: #222222;">
<div id="header" style="color: #222222;">
<div id="header">
<div id="header">
<h1 style="color: black;">Java EE 7 Hands-on Lab</h1>
(Wildfly/IntelliJ-Ultimate or Netbeans/glassfish combinations can both be used for this lab)
<div id="toc" class="toc">
<ul class="sectlevel1">
 	<li><a style="color: #005498;" href="#_introduction">1. Introduction</a>
<ul class="sectlevel2">
 	<li><a style="color: #005498;" href="#_software_requirement">1.1. Software Requirement</a></li>
</ul>
</li>
 	<li><a style="color: #005498;" href="#_problem_statement">2. Problem Statement</a>
<ul class="sectlevel2">
 	<li><a style="color: #005498;" href="#_lab_flow">2.1. Lab Flow</a></li>
 	<li><a style="color: #005498;" href="#_estimated_time">2.2. Estimated Time</a></li>
</ul>
</li>
 	<li><a style="color: #005498;" href="#walk-through">3. Walk-through of Sample Application</a></li>
 	<li><a style="color: #005498;" href="#websocket">4. Chat Room (Java API for WebSocket)</a></li>
 	<li><a style="color: #005498;" href="#batch">5. Ticket Sales (Batch Applications for the Java Platform)</a></li>
 	<li><a style="color: #005498;" href="#jaxrs">6. View and Delete Movie (Java API for RESTful Web Services)</a></li>
 	<li><a style="color: #005498;" href="#json">7. Add Movie (Java API for JSON Processing)</a></li>
 	<li><a style="color: #005498;" href="#jms">8. Movie Points (Java Message Service)</a></li>
 	<li><a style="color: #005498;" href="#jsf">9. Show Booking (JavaServer Faces)</a></li>
 	<li><a style="color: #005498;" href="#_conclusion">10. Conclusion</a></li>
 	<li><a style="color: #005498;" href="#_troubleshooting">11. Troubleshooting</a></li>
 	<li><a style="color: #005498;" href="#_acknowledgements">12. Acknowledgements</a></li>
 	<li><a style="color: #005498;" href="#_completed_solutions">13. Completed Solutions</a></li>
 	<li><a style="color: #005498;" href="#_todo">14. TODO</a></li>
 	<li><a style="color: #005498;" href="#_revision_history">15. Revision History</a></li>
 	<li><a style="color: #005498;" href="#_appendix">16. Appendix A: Appendix</a>
<ul class="sectlevel2">
 	<li><a style="color: #005498;" href="#appendix-wildfly-netbeans">16.1. Configure WildFly 8 in NetBeans</a>
<ul class="sectlevel3">
 	<li><a style="color: #005498;" href="#install-wildfly-plugin">16.1.1. Install WildFly plugin</a></li>
 	<li><a style="color: #005498;" href="#_configure_wildfly_8">16.1.2. Configure WildFly 8</a></li>
</ul>
</li>
 	<li><a style="color: #005498;" href="#appendix-wildfly-idea">16.2. Prepare IntelliJ IDEA for working with WildFly 8</a>
<ul class="sectlevel3">
 	<li><a style="color: #005498;" href="#specify-jdk-wildfly-idea">16.2.1. Specify the JDK</a></li>
 	<li><a style="color: #005498;" href="#define-wildfly-idea">16.2.2. Define WildFly</a></li>
 	<li><a style="color: #005498;" href="#create-project-wildfly-idea">16.2.3. Create a project</a></li>
 	<li><a style="color: #005498;" href="#create-run-config-wildfly-idea">16.2.4. Create a run/debug configuration</a></li>
 	<li><a style="color: #005498;" href="#run-app-wildfly-idea">16.2.5. Run the application</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<div id="content">
<div class="sect1">
<h2 id="_introduction" style="color: #ba3925;">1. Introduction</h2>
<div class="sectionbody">
<div class="paragraph">

The Java EE 7 platform continues the ease of development push that characterized prior releases by bringing further simplification to enterprise development. It adds new and important APIs such as the REST client API in JAX-RS 2.0 and the long awaited Batch Processing API. Java Message Service 2.0 has undergone an extreme makeover to align with the improvements in the Java language. There are plenty of improvements to several other components. Newer web standards like HTML 5, WebSocket, and JSON processing are embraced to build modern web applications.

</div>
<div class="paragraph">

This hands-on lab will build a typical 3-tier end-to-end application using the following Java EE 7 technologies:

</div>
<div class="ulist">
<ul>
 	<li>Java API for WebSocket 1.0 (JSR 356)</li>
 	<li>Batch Applications for the Java Platform 1.0 (JSR 352)</li>
 	<li>Java API for JSON Processing 1.0 (JSR 353)</li>
 	<li>Java API for RESTful Web Services 2.0 (JSR 339)</li>
 	<li>Java Message Service 2.0 (JSR 343)</li>
 	<li>Java Persistence API 2.1 (JSR 338)</li>
 	<li>JavaServer Faces 2.2 (JSR 344)</li>
 	<li>Contexts and Dependency Injection 1.1 (JSR 346)</li>
 	<li>Bean Validation 1.1 (JSR 349)</li>
 	<li>Java Transaction API 1.2 (JSR 907)</li>
</ul>
</div>
<div class="sect2">
<h3 id="_software_requirement" style="color: #ba3925;">1.1. Software Requirement</h3>
<div class="paragraph">

The following software needs to be downloaded and installed:

</div>
<div class="ulist">
<ul>
 	<li>JDK 8 from <a style="color: #005498;" href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a>.</li>
 	<li><strong>Application Server</strong>: This tutorial provides instructions for WildFly 8.</li>
 	<li><strong>IDE</strong>: NetBeans 8.0+, JBoss Developer Studio (Eclipse-based), or IntelliJ IDEA 13+ can be used. This tutorial provides instructions for NetBeans 8.
<div class="paragraph">

Download “All” or “Java EE” version from <a style="color: #005498;" href="http://netbeans.org/downloads/">http://netbeans.org/downloads/</a>. A snapshot of the downloads page is shown and highlights the exact ‘Download’ button to be clicked.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/1.1-netbeans-download.png" alt="1.1 netbeans download" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 1. NetBeans download</div>
</div>
<div class="paragraph">

&nbsp;

</div></li>
</ul>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_problem_statement" style="color: #ba3925;">2. Problem Statement</h2>
<div class="sectionbody">
<div class="paragraph">

This hands-on lab builds a typical 3-tier Java EE 7 Web application that allows customers to view the show timings for a movie in a 7-theater Cineplex and make reservations. Users can add new movies and delete existing movies. Customers can discuss the movie in a chat room. Total sales from each showing are calculated at the end of the day. Customers also accrue points for watching movies.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/2.0-problem-statement.png" alt="2.0 problem statement" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 2. Architecture diagram</div>
</div>
<div class="paragraph">

This figure shows the key components of the application. The User Interface initiates all the flows in the application. Show Booking, Add/Delete Movie and Ticket Sales interact with the database; Movie Points may interact with the database, however, this is out of scope for this application; and Chat Room does not interact with the database.

</div>
<div class="paragraph">

The different functions of the application, as detailed above, utilize various Java technologies and web standards in their implementation. The following figure shows how Java EE technologies are used in different flows.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/2.0-technologies.png" alt="2.0 technologies" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 3. Technologies used in the application</div>
</div>
<div class="paragraph">

The table below details the components and the selected technology used in its’ implementation.

</div>
<table class="tableblock frame-all grid-all"><colgroup> <col /> <col /></colgroup>
<thead style="font-weight: bold;">
<tr>
<th class="tableblock halign-left valign-top">Flow</th>
<th class="tableblock halign-left valign-top">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock">User Interface</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Written entirely in <em>JavaServer Faces</em> (JSF)</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Chat Room</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Utilizes client-side JavaScript and JSON to communicate with a <em>WebSocket</em> endpoint</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Ticket Sales</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Uses <em>Batch Applications for the Java Platform</em> to calculate the total sales and persist to the database.</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Add/Delete Movie</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Implemented using RESTful Web Services. JSON is used as on-the-wire data format</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Movie Points</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Uses <em>Java Message Service</em> (JMS) to update and obtain loyalty reward points; an optional implementation using database technology may be performed</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Show Booking</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Uses lightweight <em>Enterprise JavaBeans</em> to communicate with the database using Java Persistence API</p>
</td>
</tr>
</tbody>
</table>
<div class="paragraph">

This tutorial is not a comprehensive tutorial of Java EE. The attendees are expected to know the basic Java EE concepts such as EJB, JPA, JAX-RS, and CDI. The <a style="color: #005498;" href="http://docs.oracle.com/javaee/7/tutorial/doc/">Java EE 7 Tutorial</a> is a good place to learn all these concepts. However enough explanation is provided in this guide to get you started with the application.

</div>
<div class="admonitionblock warning">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title" style="font-weight: bold;">WARNING</div></td>
<td class="content" style="color: #6f6f6f;">This is a sample application and the code may not be following the best practices to prevent SQL injection, cross-side scripting attacks, escaping parameters, and other similar features expected of a robust enterprise application. This is intentional such as to stay focused on explaining the technology. It is highly recommended to make sure that the code copied from this sample application is updated to meet those requirements.</td>
</tr>
</tbody>
</table>
</div>
<div class="sect2">
<h3 id="_lab_flow" style="color: #ba3925;">2.1. Lab Flow</h3>
<div class="paragraph">

The attendees will start with an existing maven application and by following the instructions and guidance provided by this lab they will:

</div>
<div class="ulist">
<ul>
 	<li>Read existing source code to gain an understanding of the structure of the application and use of the selected platform technologies.</li>
 	<li>Add new and update existing code with provided fragments in order to demonstrate usage of different technology stacks in the Java EE 7 platform.</li>
</ul>
</div>
<div class="paragraph">

While you are copy/pasting the code from this tutorial into NetBeans, here are couple of tips that will be really useful and make your experience enjoyable!

</div>
<div class="dlist">
<dl>
 	<dt class="hdlist1" style="font-weight: bold;">Source Code Formatting</dt>
 	<dd>NetBeans provides capability to neatly format the source code following conventions. This can be done for any type of source code, whether its XML or Java or something else. It is highly recommended to use this functionality after the code is copy/pasted from this tutorial to the editor. This keeps the code legible.
<div class="openblock">
<div class="content">
<div class="paragraph">

This functionality can be accessed by right-clicking in the editor pane and selecting “Format” as shown.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/2.1-format.png" alt="2.1 format" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 4. Format code in NetBeans</div>
</div>
<div class="paragraph">

This functionality is also accessible using the following keyboard shortcuts:

</div>
<table class="tableblock frame-all grid-all"><colgroup> <col /> <col /></colgroup>
<thead style="font-weight: bold;">
<tr>
<th class="tableblock halign-left valign-top">Shortcut</th>
<th class="tableblock halign-left valign-top">Operating System</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><kbd class="keyseq" style="color: #555555;"><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>F</kbd></kbd></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">OSX</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><kbd class="keyseq" style="color: #555555;"><kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>F</kbd></kbd></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Windows</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><kbd class="keyseq" style="color: #555555;"><kbd>Alt</kbd>+<kbd>Shift</kbd>+<kbd>F</kbd></kbd></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Linux</p>
</td>
</tr>
</tbody>
</table>
</div>
</div></dd>
 	<dt class="hdlist1" style="font-weight: bold;">Automatic Imports</dt>
 	<dd>Copy/pasting the Java code from this tutorial in NetBeans editor does not auto-import the classes. This is required to be done manually in order for the classes to compile. This can be fixed for each missing import statement by clicking on the yellow bulb shown in the side bar.
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/2.1-server-endpoint.png" alt="2.1 server endpoint" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 5. ServerEndpoint import</div>
</div>
<div class="paragraph">

Alternatively all the imports can be resolved by right-clicking on the editor pane and selecting “Fix Imports” as shown.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/2.1-fix-imports.png" alt="2.1 fix imports" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 6. Fix Imports in NetBeans</div>
</div>
<div class="paragraph">

This functionality is also accessible using the following keyboard shortcuts:

</div>
<table class="tableblock frame-all grid-all"><colgroup> <col /> <col /></colgroup>
<thead style="font-weight: bold;">
<tr>
<th class="tableblock halign-left valign-top">Shortcut</th>
<th class="tableblock halign-left valign-top">Operating System</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><kbd class="keyseq" style="color: #555555;"><kbd>Command</kbd>+<kbd>Shift</kbd>+<kbd>I</kbd></kbd></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">OSX</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><kbd class="keyseq" style="color: #555555;"><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>I</kbd></kbd></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Windows</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><kbd class="keyseq" style="color: #555555;"><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>I</kbd></kbd></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Linux</p>
</td>
</tr>
</tbody>
</table>
<div class="paragraph">

The defaults may work in most of the cases. Choices are shown in case a class is available to import from multiple packages. If multiple packages are available then specific packages to import from are clearly marked in the tutorial.

</div>
</div>
</div></dd>
</dl>
</div>
</div>
<div class="sect2">
<h3 id="_estimated_time" style="color: #ba3925;">2.2. Estimated Time</h3>
<div class="paragraph">

Following the complete instructions in this tutorial can take any where from two to four hours. The wide time range accommodates for learning the new technologies, finding your way in NetBeans, copy/pasting the code, and debugging the errors.

</div>
<div class="paragraph">

The recommended flow is where you follow through the instructions in all sections in the listed sequence. Alternatively, you may like to cover section <a style="color: #005498;" href="#walk-through">Walk-through of Sample Application</a> through <a style="color: #005498;" href="#jsf">Show Booking (JavaServer Faces)</a> in an order of your choice, based upon your interest and preference of the technology. However section <a style="color: #005498;" href="#jaxrs">View and Delete Movie (Java API for RESTful Web Services)</a> is a pre-requisite for <a style="color: #005498;" href="#json">Add Movie (Java API for JSON Processing)</a>.

</div>
<div class="paragraph">

Here is an approximate time estimate for each section:

</div>
<table class="tableblock frame-all grid-all"><colgroup> <col /> <col /></colgroup>
<thead style="font-weight: bold;">
<tr>
<th class="tableblock halign-left valign-top">Section Title</th>
<th class="tableblock halign-left valign-top">Estimated Time</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><a style="color: #005498;" href="#walk-through">Walk-through of Sample Application</a></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">15 - 30 mins</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><a style="color: #005498;" href="#websocket">Chat Room (Java API for WebSocket)</a></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">30 - 45 mins</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><a style="color: #005498;" href="#batch">Ticket Sales (Batch Applications for the Java Platform)</a></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">30 - 45 mins</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><a style="color: #005498;" href="#jaxrs">View and Delete Movie (Java API for RESTful Web Services)</a></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">30 - 45 mins</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><a style="color: #005498;" href="#json">Add Movie (Java API for JSON Processing)</a></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">30 - 45 mins</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><a style="color: #005498;" href="#jms">Movie Points (Java Message Service)</a></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">30 - 45 mins</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><a style="color: #005498;" href="#jsf">Show Booking (JavaServer Faces)</a></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">30 - 45 mins</p>
</td>
</tr>
</tbody>
</table>
<div class="paragraph">

The listed time for each section is only an estimate and by no means restrict you within that. These sections have been completed in much shorter time, and you can do it too!

</div>
<div class="admonitionblock tip">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title" style="font-weight: bold;">TIP</div></td>
<td class="content" style="color: #6f6f6f;">The listed time for each section also allows you to create a custom version of the lab depending upon your target audience and available time.</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="walk-through" style="color: #ba3925;">3. Walk-through of Sample Application</h2>
<div class="sectionbody">
<div class="paragraph">

<strong>Purpose</strong>: This section will download the sample application to be used in this hands-on lab. A walk-through of the application will be performed to provide an understanding of the application architecture.

</div>
<div class="paragraph">

<strong>Estimated Time</strong>: 15-30 mins

</div>
<div class="olist arabic">
<ol class="arabic">
 	<li>Download the sample application from <a style="color: #005498;" href="https://github.com/roryp/javaee7-hol/blob/master/starting-template/movieplex7-starting-template.zip?raw=true">movieplex7-starting-template.zip</a> and unzip. This will create a ‘movieplex7’ directory and unzips all the content there.</li>
 	<li>In NetBeans IDE, select ‘File’, ‘Open Project’, select the unzipped directory, and click on ‘Open Project’. The project structure is shown.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/3.2-project-structure.png" alt="3.2 project structure" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 7. Project structure in NetBeans</div>
</div></li>
 	<li>Maven Coordinates: Expand ‘Project Files’ and double click on ‘pom.xml’. In the ‘pom.xml’, the Java EE 7 API is specified as a &lt;dependency&gt;:
<div class="openblock">
<div class="content">
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;dependencies&gt;</span>
    <span class="tag" style="color: #007700;">&lt;dependency&gt;</span>
        <span class="tag" style="color: #007700;">&lt;groupId&gt;</span>javax<span class="tag" style="color: #007700;">&lt;/groupId&gt;</span>
        <span class="tag" style="color: #007700;">&lt;artifactId&gt;</span>javaee-api<span class="tag" style="color: #007700;">&lt;/artifactId&gt;</span>
        <span class="tag" style="color: #007700;">&lt;version&gt;</span>7.0<span class="tag" style="color: #007700;">&lt;/version&gt;</span>
        <span class="tag" style="color: #007700;">&lt;scope&gt;</span>provided<span class="tag" style="color: #007700;">&lt;/scope&gt;</span>
    <span class="tag" style="color: #007700;">&lt;/dependency&gt;</span>
<span class="tag" style="color: #007700;">&lt;/dependencies&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

This will ensure that Java EE 7 APIs are retrieved from the central Maven repository.

</div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title" style="font-weight: bold;">NOTE</div></td>
<td class="content" style="color: #6f6f6f;">
<div class="paragraph">

The Java EE 6 platform introduced the notion of ‘profiles’. A profile is a configuration of the Java EE platform targeted at a specific class of applications. All Java EE profiles share a set of common features, such as naming and resource injection, packaging rules, security requirements, etc. A profile may contain a proper subset or superset of the technologies contained in the platform.

</div>
<div class="paragraph">

The Java EE Web Profile is a profile of the Java EE Platform specifically targeted at modern web applications. The complete set of specifications defined in the Web Profile is defined in the Java EE 7 Web Profile Specification.

</div></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

&nbsp;

</div>
</div>
</div></li>
 	<li><strong>Default Data Source</strong>: Expand ‘Other Sources’, ‘src/main/resources’, ‘META-INF’, and double-click on ‘persistence.xml’. By default, NetBeans opens the file in Design View. Click on ‘Source’ tab to view the XML source.
<div class="openblock">
<div class="content">
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/3.2-persistence-xml.png" alt="3.2 persistence xml" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 8. persistence.xml</div>
</div>
<div class="paragraph">

It looks like:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="preprocessor" style="color: #557799;">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="tag" style="color: #007700;">&lt;persistence</span>
    <span class="attribute-name" style="color: #007700;">version</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">2.1</span><span class="delimiter" style="color: #dd1144;">"</span></span>
    <span class="attribute-name" style="color: #007700;">xmlns</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">http://xmlns.jcp.org/xml/ns/persistence</span><span class="delimiter" style="color: #dd1144;">"</span></span>
    <span class="attribute-name" style="color: #007700;">xmlns:xsi</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">http://www.w3.org/2001/XMLSchema-instance</span><span class="delimiter" style="color: #dd1144;">"</span></span>
    <span class="attribute-name" style="color: #007700;">xsi:schemaLocation</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">http://xmlns.jcp.org/xml/ns/persistence</span>
    <span class="content" style="color: #dd1144;">http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    <span class="tag" style="color: #007700;">&lt;persistence-unit</span> <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">movieplex7PU</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">transaction-type</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">JTA</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
        <span class="comment" style="font-style: italic; color: #999999;">&lt;!--
            &lt;jta-data-source&gt;java:comp/DefaultDataSource&lt;/jta-data-source&gt;
        --&gt;</span>
        <span class="tag" style="color: #007700;">&lt;properties&gt;</span>
            <span class="tag" style="color: #007700;">&lt;property</span>
                <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">javax.persistence.schema-generation.database.action</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">drop-and-create</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;property</span>
                <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">javax.persistence.schema-generation.create-source</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">script</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;property</span>
                <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">javax.persistence.schema-generation.drop-source</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">script</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;property</span>
                <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">javax.persistence.schema-generation.drop-script-source</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">META-INF/drop.sql</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;property</span>
                <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">javax.persistence.sql-load-script-source</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">META-INF/load.sql</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;property</span>
                <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">eclipselink.deploy-on-startup</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">true</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;property</span>
                <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">eclipselink.logging.exceptions</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">false</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
        <span class="tag" style="color: #007700;">&lt;/properties&gt;</span>
    <span class="tag" style="color: #007700;">&lt;/persistence-unit&gt;</span>
<span class="tag" style="color: #007700;">&lt;/persistence&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

Notice <code style="color: #6d180b;">&lt;jta-data-source&gt;</code> is commented out, i.e. no data source element is specified. This element identifies the JDBC resource to connect to in the runtime environment of the underlying application server.

</div>
<div class="paragraph">

The Java EE 7 platform defines a new default data source that must be provided by the runtime. This pre-configured data source is accessible under the JNDI name

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;">java:comp/DefaultDataSource</code></pre>
</div>
</div>
<div class="paragraph">

The JPA 2.1 specification says if neither <code style="color: #6d180b;">jta-data-source</code> nor <code style="color: #6d180b;">non-jta-data-source</code> elements are specified, the deployer must specify a JTA data source or the default JTA data source must be provided by the container.

</div>
<div class="paragraph">

For WildFly 8, the default data source is bound to the JDBC resource <code style="color: #6d180b;">what name</code>.

</div>
<div class="paragraph">

Clicking back and forth between ‘Design’ and ‘Source’ view may prompt the error shown below:

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/3.4-missing-server.png" alt="3.4 missing server" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 9. Missing server error from persistence.xml</div>
</div>
<div class="paragraph">

This will get resolved when we run the application. Click on ‘OK’ to dismiss the dialog.

</div>
</div>
</div></li>
 	<li><strong>Schema Generation:</strong> JPA 2.1 defines a new set of <code style="color: #6d180b;">javax.persistence.schema-generation.*</code> properties that can be used to generate database artifacts like tables, indexes, and constraints in a database schema. This helps in prototyping of your application where the required artifacts are generated either prior to application deployment or as part of <code style="color: #6d180b;">EntityManagerFactory</code> creation. This feature will allow your JPA domain object model to be directly generated in a database. The generated schema may need to be tuned for actual production environment.
<div class="openblock">
<div class="content">
<div class="paragraph">

The “persistence.xml” in the application has the following <code style="color: #6d180b;">javax.persistence.schema-generation.*</code> properties. Their meaning and possible values are explained:

</div>
<table class="tableblock frame-all grid-all"><colgroup> <col /> <col /> <col /></colgroup>
<thead style="font-weight: bold;">
<tr>
<th class="tableblock halign-left valign-top">Property</th>
<th class="tableblock halign-left valign-top">Meaning</th>
<th class="tableblock halign-left valign-top">Values</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">javax.persistence.schema-generation.database.action</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Specifies the action to be taken by the persistence provider with regard to the database artifacts.</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">none</code>, <code style="color: #6d180b;">create</code>, <code style="color: #6d180b;">drop-and-create</code>, <code style="color: #6d180b;">drop</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">javax.persistence.schema-generation.create-source</code><code style="color: #6d180b;">javax.persistence.schema-generation.drop-source</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Specifies whether the creation or deletion of database artifacts is to occur on the basis of the object/relational mapping metadata, DDL script, or a combination of the two.</p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">metadata</code>, <code style="color: #6d180b;">script</code>, <code style="color: #6d180b;">metadata-then-script</code>, <code style="color: #6d180b;">script-then-metadata</code></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">javax.persistence.schema-generation.create-script-source</code><code style="color: #6d180b;">javax.persistence.schema-generation.drop-script-source</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Specifies a <code style="color: #6d180b;">java.IO.Reader</code>configured for reading of the SQL script or a string designating a file URL for the SQL script to create or delete database artifacts.</p>
</td>
<td class="tableblock halign-left valign-top"></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">javax.persistence.sql-load-script-source</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Specifies a <code style="color: #6d180b;">java.IO.Reader</code>configured for reading of the SQL load script for database initialization or a string designating a file URL for the script.</p>
</td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
<div class="paragraph">

Refer to the <a style="color: #005498;" href="http://jcp.org/en/jsr/detail?id=338">JPA 2.1 Specification</a> for a complete understanding of these properties.

</div>
<div class="paragraph">

In the application, the scripts are bundled in the WAR file in ‘META-INF’ directory. As the location of these scripts is specified as a URL, the scripts may be loaded from outside the WAR file as well.

</div>
<div class="paragraph">

Feel free to open ‘create.sql’, ‘drop.sql’ and ‘load.sql’ and read through the SQL scripts. The database schema is shown.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/3.5-schema.png" alt="3.5 schema" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 10. Database schema</div>
</div>
<div class="paragraph">

This folder also contains ‘sales.csv’ which carries some comma-separated data, and is used later in the application.

</div>
</div>
</div></li>
 	<li><strong>JPA entities, Stateless EJBs, and REST endpoints</strong>: Expand <code style="color: #6d180b;">Source Packages'. The package `org.javaee7.movieplex7.entities</code> contains the JPA entities corresponding to the database table definitions. Each JPA entity has several convenient <code style="color: #6d180b;">@NamedQuery</code> defined and uses Bean Validation constraints to enforce validation.
<div class="openblock">
<div class="content">
<div class="paragraph">

The package <code style="color: #6d180b;">org.javaee7.movieplex7.rest</code> contains stateless EJBs corresponding to different JPA entities.

</div>
<div class="paragraph">

Each EJB has methods to perform CRUD operations on the JPA entity and convenience query methods. Each EJB is also EL-injectable (@Named) and published as a REST endpoint (@Path). The AplicationConfig class defines the base path of REST endpoint. The path for the REST endpoint is the same as the JPA entity class name.

</div>
<div class="paragraph">

The mapping between JPA entity classes, EJB classes, and the URI of the corresponding REST endpoint is shown.

</div>
<table class="tableblock frame-all grid-all"><colgroup> <col /> <col /> <col /></colgroup>
<thead style="font-weight: bold;">
<tr>
<th class="tableblock halign-left valign-top">JPA Entity Class</th>
<th class="tableblock halign-left valign-top">EJB Class</th>
<th class="tableblock halign-left valign-top">RESTful Path</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">Movie</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">MovieFacadeREST</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><em>/webresources/movie</em></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">Sales</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">SalesFacadeREST</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><em>/webresources/sales</em></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">ShowTiming</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">ShowTimingFacadeREST</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><em>/webresources/showtiming</em></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">Theater</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">TheaterFacadeREST</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><em>/webresources/theater</em></p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">Timeslot</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">TimeslotFacadeREST</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><em>/webresources/timeslot</em></p>
</td>
</tr>
</tbody>
</table>
<div class="paragraph">

Feel free to browse through the code.

</div>
</div>
</div></li>
 	<li><strong>JSF pages</strong>: ‘WEB-INF/template.xhtml’ defines the template of the web page and has a header, left navigation bar, and a main content section. ‘index.xhtml’ uses this template and the EJBs to display the number of movies and theaters.
<div class="openblock">
<div class="content">
<div class="paragraph">

Java EE 7 enables CDI discovery of beans by default. No ‘beans.xml’ is required in ‘WEB-INF’. This allows all beans with bean defining annotation, i.e. either a bean with an explicit CDI scope or EJBs to be available for injection.

</div>
<div class="paragraph">

Note, ‘template.xhtml’ is in ‘WEB-INF’ folder as it allows the template to be accessible from the pages bundled with the application only. If it were bundled with rest of the pages then it would be accessible outside the application and thus allowing other external pages to use it as well.

</div>
</div>
</div></li>
 	<li><strong>Run the sample</strong>: Right-click on the project and select ‘Run’. This will download all the maven dependencies on your machine, build a WAR file, deploy on WildFly 8 , and show the URL <a style="color: #005498;" href="http://localhost:8080/movieplex7">localhost:8080/movieplex7</a> in the default browser configured in NetBeans. Note that this could take a while if you have never built a Maven application on your machine.
<div class="openblock">
<div class="content">
<div class="admonitionblock tip">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title" style="font-weight: bold;">TIP</div></td>
<td class="content" style="color: #6f6f6f;">The project will show red squiggly lines in the source code indicating that the classes cannot be resolved. This is expected before the dependencies are downloaded. However these references will be resolved correctly after the dependencies are downloaded during project building.</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

During the first run, the IDE will ask you to select a deployment server. Choose the configured WildFly server and click on ‘OK’.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/3.6-wildfly-server.png" alt="3.6 wildfly server" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 11. WildFly deployment server</div>
</div>
<div class="paragraph">

The output looks like as shown.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/3.8-first-page.png" alt="3.8 first page" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 12. Application main page</div>
</div>
</div>
</div></li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="websocket" style="color: #ba3925;">4. Chat Room (Java API for WebSocket)</h2>
<div class="sectionbody">
<div class="paragraph">

<strong>Purpose</strong>: Build a chat room for viewers. In doing so several new features of Java API for WebSocket 1.0 will be introduced and demonstrated by using them in the application.

</div>
<div class="paragraph">

<strong>Estimated Time</strong>: 30-45 mins

</div>
<div class="paragraph">

WebSocket provide a full-duplex and bi-directional communication protocol over a single TCP connection. WebSocket is a combination of <a style="color: #005498;" href="http://tools.ietf.org/html/rfc6455">IETF RFC 6455</a> <a style="color: #005498;" href="http://tools.ietf.org/html/rfc6455">Protocol</a> and <a style="color: #005498;" href="http://www.w3.org/TR/websockets/">W3C JavaScript WebSocket API</a> (a Candidate Recommendation as of this writing). The protocol defines an opening handshake and data transfer. The API enables Web pages to use the WebSocket protocol for two-way communication with the remote host.

</div>
<div class="paragraph">

<a style="color: #005498;" href="http://jcp.org/en/jsr/detail?id=356">JSR 356</a> defines a standard API for creating WebSocket applications in the Java EE 7 Platform. The JSR provides support for:

</div>
<div class="ulist">
<ul>
 	<li>Create WebSocket endpoint using annotations and interface</li>
 	<li>Initiating and intercepting WebSocket events</li>
 	<li>Creation and consumption of WebSocket text and binary messages</li>
 	<li>Configuration and management of WebSocket sessions</li>
 	<li>Integration with Java EE security model</li>
</ul>
</div>
<div class="paragraph">

This section will build a chat room for movie viewers.

</div>
<div class="olist arabic">
<ol class="arabic">
 	<li>Right-click on ‘Source Packages’ , select ‘New’, ‘Java Class’. Give the class name as ‘ChatServer’, package as ‘org.javaee7.movieplex7.chat’, and click on ‘Finish’.</li>
 	<li>Change the class such that it looks like:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@ServerEndpoint</span>(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">/websocket</span><span class="delimiter" style="color: #dd1144;">"</span></span>)
<span class="directive" style="color: #008888;">public</span> <span class="type" style="color: #333399;">class</span> <span class="class" style="color: #445588;">ChatServer</span> {
    <span class="directive" style="color: #008888;">private</span> <span class="directive" style="color: #008888;">static</span> <span class="directive" style="color: #008888;">final</span> <span class="predefined-type" style="color: #007744;">Set</span>&lt;Session&gt; peers =
               <span class="predefined-type" style="color: #007744;">Collections</span>.synchronizedSet(<span class="keyword" style="color: #000000;">new</span> <span class="predefined-type" style="color: #007744;">HashSet</span>&lt;Session&gt;());

    <span class="annotation" style="color: #000077;">@OnOpen</span>
    <span class="directive" style="color: #008888;">public</span> <span class="type" style="color: #333399;">void</span> onOpen(Session peer) {
        peers.add(peer);
    }

    <span class="annotation" style="color: #000077;">@OnClose</span>
    <span class="directive" style="color: #008888;">public</span> <span class="type" style="color: #333399;">void</span> onClose(Session peer) {
        peers.remove(peer);
    }

    <span class="annotation" style="color: #000077;">@OnMessage</span>
    <span class="directive" style="color: #008888;">public</span> <span class="type" style="color: #333399;">void</span> message(<span class="predefined-type" style="color: #007744;">String</span> message, Session client)
           <span class="directive" style="color: #008888;">throws</span> <span class="exception" style="color: #cc0000;">IOException</span>, EncodeException {
        <span class="keyword" style="color: #000000;">for</span> (Session peer : peers) {
            peer.getBasicRemote().sendText(message);
        }
    }
}</code></pre>
</div>
</div>
<div class="paragraph">

In this code:

</div>
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
 	<li><code style="color: #6d180b;">@ServerEndpoint</code> decorates the class to be a WebSocket endpoint. The value defines the URI where this endpoint is published.</li>
 	<li><code style="color: #6d180b;">@OnOpen</code> and <code style="color: #6d180b;">@OnClose</code> decorate the methods that must be called when WebSocket session is opened or closed. The peer parameter defines the client requesting connection initiation and termination.</li>
 	<li><code style="color: #6d180b;">@OnMessage</code> decorates the message that receives the incoming WebSocket message. The first parameter, message, is the payload of the message. The second parameter, <code style="color: #6d180b;">client</code>, defines the other end of the WebSocket connection. The method implementation transmits the received text message to all clients connected to this endpoint.
<div class="paragraph">

Resolve the imports by right-clicking in the editor and selecting ‘Fix Imports’ or (<kbd class="keyseq" style="color: #555555;"><kbd>Command</kbd>+<kbd>Shift</kbd>+<kbd>I</kbd></kbd> shortcut on OSX or <kbd class="keyseq" style="color: #555555;"><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>I</kbd></kbd> on Windows).

</div>
<div class="admonitionblock warning">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title" style="font-weight: bold;">WARNING</div></td>
<td class="content" style="color: #6f6f6f;">Make sure to pick <code style="color: #6d180b;">java.websocket.Session</code> for resolving imports. This is not the default option shown by NetBeans.</td>
</tr>
</tbody>
</table>
</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/4.2-imports.png" alt="4.2 imports" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 13. javax.websocket.Session import</div>
</div>
<div class="paragraph">

Right-click again in the editor pane and select ‘Format’ to format your code.

</div></li>
</ol>
</div></li>
 	<li>In ‘Web Pages’, select ‘New’, ‘Folder’, give the folder name as ‘chat’ and click on ‘Finish’.</li>
 	<li>Right-click on the newly created folder, select ‘New’, ‘Other’, ‘Java Server Faces’, ‘Facelets Template Client’, give the File Name as ‘chatroom’. Click on ‘Browse’ next to ‘Template:’, expand ‘Web Pages’, ‘WEB-INF’, select ‘template.xhtml’, and click on ‘Select File’. Click on ‘Finish’.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/4.4-template.png" alt="4.4 template" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 14. Choose template</div>
</div>
<div class="paragraph">

In this file, remove &lt;ui:define&gt; sections where name attribute value is ‘top’ and ‘left’. These sections are inherited from the template.

</div>
<div class="paragraph">

Replace <code style="color: #6d180b;">&lt;ui:define&gt;</code> section with ‘content’ name such that it looks like:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;ui:composition</span> <span class="attribute-name" style="color: #007700;">template</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">../WEB-INF/template.xhtml</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    <span class="tag" style="color: #007700;">&lt;ui:define</span> <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">content</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
        <span class="tag" style="color: #007700;">&lt;form</span> <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
            <span class="tag" style="color: #007700;">&lt;table&gt;</span>
                <span class="tag" style="color: #007700;">&lt;tr&gt;</span>
                    <span class="tag" style="color: #007700;">&lt;td&gt;</span>
                        Chat Log<span class="tag" style="color: #007700;">&lt;br</span><span class="tag" style="color: #007700;">/&gt;</span>
                        <span class="tag" style="color: #007700;">&lt;textarea</span> <span class="attribute-name" style="color: #007700;">readonly</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">true</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">rows</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">6</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">cols</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">50</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">id</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">chatlog</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span><span class="tag" style="color: #007700;">&lt;/textarea&gt;</span>
                    <span class="tag" style="color: #007700;">&lt;/td&gt;</span>
                    <span class="tag" style="color: #007700;">&lt;td&gt;</span>
                        Users<span class="tag" style="color: #007700;">&lt;br</span><span class="tag" style="color: #007700;">/&gt;</span>
                        <span class="tag" style="color: #007700;">&lt;textarea</span> <span class="attribute-name" style="color: #007700;">readonly</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">true</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">rows</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">6</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">cols</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">20</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">id</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">users</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span><span class="tag" style="color: #007700;">&lt;/textarea&gt;</span>
                    <span class="tag" style="color: #007700;">&lt;/td&gt;</span>
                <span class="tag" style="color: #007700;">&lt;/tr&gt;</span>
                <span class="tag" style="color: #007700;">&lt;tr&gt;</span>
                    <span class="tag" style="color: #007700;">&lt;td</span> <span class="attribute-name" style="color: #007700;">colspan</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">2</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
                        <span class="tag" style="color: #007700;">&lt;input</span> <span class="attribute-name" style="color: #007700;">id</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">textField</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">name</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Duke</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">type</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">text</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
                        <span class="tag" style="color: #007700;">&lt;input</span> <span class="attribute-name" style="color: #007700;">onclick</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span>join();<span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Join</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">type</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">button</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
                        <span class="tag" style="color: #007700;">&lt;input</span> <span class="attribute-name" style="color: #007700;">onclick</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span>send_message();<span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Send</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">type</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">button</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span><span class="tag" style="color: #007700;">&lt;p</span><span class="tag" style="color: #007700;">/&gt;</span>
                        <span class="tag" style="color: #007700;">&lt;input</span> <span class="attribute-name" style="color: #007700;">onclick</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span>disconnect();<span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Disconnect</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">type</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">button</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
                    <span class="tag" style="color: #007700;">&lt;/td&gt;</span>
                <span class="tag" style="color: #007700;">&lt;/tr&gt;</span>
            <span class="tag" style="color: #007700;">&lt;/table&gt;</span>
        <span class="tag" style="color: #007700;">&lt;/form&gt;</span>
        <span class="tag" style="color: #007700;">&lt;div</span> <span class="attribute-name" style="color: #007700;">id</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">output</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span><span class="tag" style="color: #007700;">&lt;/div&gt;</span>
            <span class="tag" style="color: #007700;">&lt;script</span> <span class="attribute-name" style="color: #007700;">language</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">javascript</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">type</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">text/javascript</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">src</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">${facesContext.externalContext.requestContextPath}/chat/websocket.js</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span><span class="tag" style="color: #007700;">&lt;/script&gt;</span>
    <span class="tag" style="color: #007700;">&lt;/ui:define&gt;</span>
<span class="tag" style="color: #007700;">&lt;/ui:composition&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

The code builds an HTML form that has two textareas – one to display the chat log and the other to display the list of users currently logged. A single text box is used to take the user name or the chat message. Clicking on ‘Join’ button takes the value as user name and clicking on ‘Send’ takes the value as chat message.

</div>
<div class="paragraph">

JavaScript methods are invoked when these buttons are clicked and these are explained in the next section. The chat messages are sent and received as WebSocket payloads. There is an explicit button to disconnect the WebSocket connection. <code style="color: #6d180b;">output</code> div is the placeholder for status messages. The WebSocket initialization occurs in ‘websocket.js’ included at the bottom of the fragment.

</div></li>
 	<li>Right-click on ‘chat’ in ‘Web Pages’, select ‘New’, ‘Other’, ‘Web’ categories, ‘JavaScript File’ file type. Click on ‘Next’.
<div class="paragraph">

Give the name as ‘websocket’ and click on ‘Finish’.

</div></li>
 	<li>Edit the contents of ‘websocket.js’ such that it looks like:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="javascript language-javascript" style="color: inherit;"><span class="keyword" style="color: #000000;">var</span> wsUri = <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">'</span><span class="content" style="color: #dd1144;">ws://</span><span class="delimiter" style="color: #dd1144;">'</span></span> + document.location.host
            + document.location.pathname.substr(<span class="integer" style="color: #009999;">0</span>,
              document.location.pathname.indexOf(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">/faces</span><span class="delimiter" style="color: #dd1144;">"</span></span>)) +
              <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">'</span><span class="content" style="color: #dd1144;">/websocket</span><span class="delimiter" style="color: #dd1144;">'</span></span>;
console.log(wsUri);

<span class="keyword" style="color: #000000;">var</span> websocket = <span class="keyword" style="color: #000000;">new</span> WebSocket(wsUri);
<span class="keyword" style="color: #000000;">var</span> textField = document.getElementById(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">textField</span><span class="delimiter" style="color: #dd1144;">"</span></span>);
<span class="keyword" style="color: #000000;">var</span> users = document.getElementById(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">users</span><span class="delimiter" style="color: #dd1144;">"</span></span>);
<span class="keyword" style="color: #000000;">var</span> chatlog = document.getElementById(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">chatlog</span><span class="delimiter" style="color: #dd1144;">"</span></span>);
<span class="keyword" style="color: #000000;">var</span> username;

websocket.<span class="function" style="color: #990000;">onopen</span> = <span class="keyword" style="color: #000000;">function</span>(evt) { onOpen(evt); };
websocket.<span class="function" style="color: #990000;">onmessage</span> = <span class="keyword" style="color: #000000;">function</span>(evt) { onMessage(evt); };
websocket.<span class="function" style="color: #990000;">onerror</span> = <span class="keyword" style="color: #000000;">function</span>(evt) { onError(evt); };
websocket.<span class="function" style="color: #990000;">onclose</span> = <span class="keyword" style="color: #000000;">function</span>(evt) { onClose(evt); };

<span class="keyword" style="color: #000000;">var</span> output = document.getElementById(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">output</span><span class="delimiter" style="color: #dd1144;">"</span></span>);

<span class="keyword" style="color: #000000;">function</span> <span class="function" style="color: #990000;">join</span>() {
    username = textField.value;
    websocket.send(username + <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;"> joined</span><span class="delimiter" style="color: #dd1144;">"</span></span>);
}

<span class="keyword" style="color: #000000;">function</span> <span class="function" style="color: #990000;">send_message</span>() {
    websocket.send(username + <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">: </span><span class="delimiter" style="color: #dd1144;">"</span></span> + textField.value);
}

<span class="keyword" style="color: #000000;">function</span> <span class="function" style="color: #990000;">onOpen</span>() {
    writeToScreen(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">CONNECTED</span><span class="delimiter" style="color: #dd1144;">"</span></span>);
}

<span class="keyword" style="color: #000000;">function</span> <span class="function" style="color: #990000;">onClose</span>() {
    writeToScreen(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">DISCONNECTED</span><span class="delimiter" style="color: #dd1144;">"</span></span>);
}

<span class="keyword" style="color: #000000;">function</span> <span class="function" style="color: #990000;">onMessage</span>(evt) {
    writeToScreen(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">RECEIVED: </span><span class="delimiter" style="color: #dd1144;">"</span></span> + evt.data);
    <span class="keyword" style="color: #000000;">if</span> (evt.data.indexOf(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">joined</span><span class="delimiter" style="color: #dd1144;">"</span></span>) !== -<span class="integer" style="color: #009999;">1</span>) {
        users.innerHTML += evt.data.substring(<span class="integer" style="color: #009999;">0</span>, evt.data.indexOf(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;"> joined</span><span class="delimiter" style="color: #dd1144;">"</span></span>)) + <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="char" style="color: #dd1144;">\n</span><span class="delimiter" style="color: #dd1144;">"</span></span>;
    } <span class="keyword" style="color: #000000;">else</span> {
        chatlog.innerHTML += evt.data + <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="char" style="color: #dd1144;">\n</span><span class="delimiter" style="color: #dd1144;">"</span></span>;
    }
}

<span class="keyword" style="color: #000000;">function</span> <span class="function" style="color: #990000;">onError</span>(evt) {
    writeToScreen(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">'</span><span class="content" style="color: #dd1144;">&lt;span style="color: red;"&gt;ERROR:&lt;/span&gt; </span><span class="delimiter" style="color: #dd1144;">'</span></span> + evt.data);
}

<span class="keyword" style="color: #000000;">function</span> <span class="function" style="color: #990000;">disconnect</span>() {
    websocket.close();
}

<span class="keyword" style="color: #000000;">function</span> <span class="function" style="color: #990000;">writeToScreen</span>(message) {
    <span class="keyword" style="color: #000000;">var</span> pre = document.createElement(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">p</span><span class="delimiter" style="color: #dd1144;">"</span></span>);
    pre.style.wordWrap = <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">break-word</span><span class="delimiter" style="color: #dd1144;">"</span></span>;
    pre.innerHTML = message;
    output.appendChild(pre);
}</code></pre>
</div>
</div>
<div class="paragraph">

The WebSocket endpoint URI is calculated by using standard JavaScript variables and appending the URI specified in the <code style="color: #6d180b;">ChatServer</code> class. WebSocket is initialized by calling new <code style="color: #6d180b;">WebSocket(...)</code>. Event handlers are registered for lifecycle events using <code style="color: #6d180b;">onXXX</code> messages. The listeners registered in this script are explained in the table.

</div>
<table class="tableblock frame-all grid-all"><colgroup> <col /> <col /></colgroup>
<thead style="font-weight: bold;">
<tr>
<th class="tableblock halign-left valign-top">Listeners</th>
<th class="tableblock halign-left valign-top">Called When</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">onOpen(evt)</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">WebSocket connection is initiated</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">onMessage(evt)</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">WebSocket message is received</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">onError(evt)</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">Error occurs during the communication</p>
</td>
</tr>
<tr>
<td class="tableblock halign-left valign-top">
<p class="tableblock"><code style="color: #6d180b;">onClose(evt)</code></p>
</td>
<td class="tableblock halign-left valign-top">
<p class="tableblock">WebSocket connection is terminated</p>
</td>
</tr>
</tbody>
</table>
<div class="paragraph">

Any relevant data is passed along as parameter to the function. Each method prints the status on the browser using <code style="color: #6d180b;">writeToScreen</code>utility method. The join method sends a message to the endpoint that a particular user has joined. The endpoint then broadcasts the message to all the listening clients. The <code style="color: #6d180b;">send_message</code> method appends the logged in user name and the value of the text field and broadcasts to all the clients similarly. The <code style="color: #6d180b;">onMessage</code> method updates the list of logged in users as well.

</div></li>
 	<li>Edit ‘WEB-INF/template.xhtml’ and change:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;h:outputLink</span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">item2.xhtml</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>Item 2<span class="tag" style="color: #007700;">&lt;/h:outputLink&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

to

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;h:outputLink</span>
    <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">${facesContext.externalContext.requestContextPath}/faces/chat/chatroom.xhtml</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    Chat Room
<span class="tag" style="color: #007700;">&lt;/h:outputLink&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

The <code style="color: #6d180b;">outputLink</code> tag renders an HTML anchor tag with an <code style="color: #6d180b;">href</code> attribute.<code style="color: #6d180b;">${facesContext.externalContext.requestContextPath}</code> provides the request URI that identifies the web application context for this request. This allows the links in the left navigation bar to be fully-qualified URLs.

</div></li>
 	<li>Run the project by right clicking on the project and selecting ‘Run’. The browser shows <a style="color: #005498;" href="http://localhost:8080/movieplex7">localhost:8080/movieplex7</a>.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/4.6-chatroom.png" alt="4.6 chatroom" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 15. Chatroom link on main page</div>
</div>
<div class="paragraph">

Click on ‘Chat Room’ to see the output.

</div>
<div class="paragraph">

The ‘CONNECTED’ status message is shown and indicates that the WebSocket connection with the endpoint is established.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/4.8-chatroom.png" alt="4.8 chatroom" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 16. Chatroom output</div>
</div>
<div class="paragraph">

Please make sure your browser supports WebSocket in order for this page to show up successfully. Chrome 14.0+, Firefox 11.0+, Safari 6.0+, and IE 10.0+ are the browsers that support WebSocket. A complete list of supported browsers is available at <a style="color: #005498;" href="http://caniuse.com/websockets">caniuse.com/websockets</a>.

</div>
<div class="paragraph">

Open the URI <a style="color: #005498;" href="http://localhost:8080/movieplex7">localhost:8080/movieplex7</a> in another browser window. Enter ‘Duke’ in the text box in the first browser and click ‘Join’.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/4.8-chatroom-joined.png" alt="4.8 chatroom joined" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 17. Chatroom with single user</div>
</div>
<div class="paragraph">

Notice that the user list and the status message in both the browsers gets updated. Enter ‘James’ in the text box of the second browser and click on ‘Join’. Once again the user list and the status message in both the browsers is updated. Now you can type any messages in any of the browser and click on ‘Send’ to send the message.

</div>
<div class="paragraph">

The output from two different browsers after the initial greeting looks like as shown.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/4.8-chatroom-two-browsers.png" alt="4.8 chatroom two browsers" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 18. Chatroom with two users</div>
</div>
<div class="paragraph">

Here it shows output from Chrome on the top and Firefox on the bottom.

</div>
<div class="paragraph">

Chrome Developer Tools or Firebug in Firefox can be used to monitor WebSocket traffic.

</div></li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="batch" style="color: #ba3925;">5. Ticket Sales (Batch Applications for the Java Platform)</h2>
<div class="sectionbody">
<div class="paragraph">

<strong>Purpose</strong>: Read the total sales for each show and populate the database. In doing so several new features of Java API for Batch Processing 1.0 will be introduced and demonstrated by using them in the application.

</div>
<div class="paragraph">

<strong>Estimated Time</strong>: 30-45 mins

</div>
<div class="paragraph">

Batch Processing is execution of series of ‘jobs’ that is suitable for non-interactive, bulk-oriented and long-running tasks. Batch Applications for the Java Platform (JSR 352) will define a programming model for batch applications and a runtime for scheduling and executing jobs.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/5.0-batch-intro.png" alt="5.0 batch intro" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 19. Introduction to Batch</div>
</div>
<div class="paragraph">

The core concepts of Batch Processing are:

</div>
<div class="ulist">
<ul>
 	<li>A <strong>Job</strong> is an instance that encapsulates an entire batch process. A job is typically put together using a Job Specification Language and consists of multiple steps. The Job Specification Language for JSR 352 is implemented with XML and is referred as ‘Job XML’.</li>
 	<li>A <strong>Step</strong> is a domain object that encapsulates an independent, sequential phase of a job. A step contains all of the information necessary to define and control the actual batch processing.</li>
 	<li><strong>JobOperator</strong> provides an interface to manage all aspects of job processing, including operational commands, such as start, restart, and stop, as well as job repository commands, such as retrieval of job and step executions.</li>
 	<li><strong>JobRepository</strong> holds information about jobs current running and jobs that run in the past. JobOperator provides access to this repository.</li>
 	<li>Reader-Processor-Writer pattern is the primary pattern and is called as <strong>Chunk-oriented<strong> </strong>Processing</strong>. In this, <strong>ItemReader</strong> reads one item at a time, <strong>ItemProcessor</strong> processes the item based upon the business logic, such as calculate account balance and hands it to <strong>ItemWriter</strong> for aggregation. Once the <em>chunk</em> numbers of items are aggregated, they are written out, and the transaction is committed.</li>
</ul>
</div>
<div class="paragraph">

This section will read the cumulative sales for each show from a CSV file and populate them in a database.

</div>
<div class="olist arabic">
<ol class="arabic">
 	<li>Right-click on Source Packages, select ‘New’, ‘Java Package’, specify the value as ‘org.javaee7.movieplex7.batch’, and click on ‘Finish’.</li>
 	<li>Right-click on newly created package, select ‘New’, ‘Java Class’, specify the name as ‘SalesReader’. Make this class extend from ‘AbstractItemReader’ by changing the class definition and add:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="directive" style="color: #008888;">extends</span> AbstractItemReader</code></pre>
</div>
</div>
<div class="paragraph">

<code style="color: #6d180b;">AbstractItemReader</code> is an abstract class that implements <code style="color: #6d180b;">ItemReader</code> interface. The <code style="color: #6d180b;">ItemReader</code> interface defines methods that read a stream of items for chunk processing. This reader implementation returns a String item type as indicated in the class definition.

</div>
<div class="paragraph">

Add <code style="color: #6d180b;">@Named</code> as a class-level annotations and it allows the bean to be injected in Job XML. Add <code style="color: #6d180b;">@Dependent</code> as another class-level annotation to mark this bean as a bean defining annotation so that this bean is available for injection.

</div>
<div class="paragraph">

Resolve the imports.

</div></li>
 	<li>Override <code style="color: #6d180b;">open()</code> method to initialize the reader by adding the following code:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="directive" style="color: #008888;">private</span> <span class="predefined-type" style="color: #007744;">BufferedReader</span> reader;

<span class="directive" style="color: #008888;">public</span> <span class="type" style="color: #333399;">void</span> open(<span class="predefined-type" style="color: #007744;">Serializable</span> checkpoint) <span class="directive" style="color: #008888;">throws</span> <span class="exception" style="color: #cc0000;">Exception</span> {
    reader = <span class="keyword" style="color: #000000;">new</span> <span class="predefined-type" style="color: #007744;">BufferedReader</span>(
        <span class="keyword" style="color: #000000;">new</span> <span class="predefined-type" style="color: #007744;">InputStreamReader</span>(
        <span class="predefined-type" style="color: #007744;">Thread</span>.currentThread()
            .getContextClassLoader()
            .getResourceAsStream(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">META-INF/sales.csv</span><span class="delimiter" style="color: #dd1144;">"</span></span>)));
}</code></pre>
</div>
</div>
<div class="paragraph">

This method initializes a BufferedReader from ‘META-INF/sales.csv’ that is bundled with the application.

</div>
<div class="paragraph">

Sampling of the first few lines from ‘sales.csv’ is shown below:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="csv language-csv" style="color: inherit;">1,500.00
2,660.00
3,80.00
4,470.00
5,1100.x0</code></pre>
</div>
</div>
<div class="paragraph">

Each line has a show identifier comma separated by the total sales for that show. Note that the last line (5th record in the sample) has an intentional typo. In addition, 17th record also has an additional typo. The lab will use these lines to demonstrate how to handle parsing errors.

</div></li>
 	<li>Override the following method from the abstract class:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@Override</span>
<span class="directive" style="color: #008888;">public</span> <span class="predefined-type" style="color: #007744;">String</span> readItem() {
    <span class="predefined-type" style="color: #007744;">String</span> string = <span class="predefined-constant">null</span>;
    <span class="keyword" style="color: #000000;">try</span> {
        string = reader.readLine();
    } <span class="keyword" style="color: #000000;">catch</span> (<span class="exception" style="color: #cc0000;">IOException</span> ex) {
        ex.printStackTrace();
    }
    <span class="keyword" style="color: #000000;">return</span> string;
}</code></pre>
</div>
</div>
<div class="paragraph">

The <code style="color: #6d180b;">readItem</code> method returns the next item from the stream. It returns <code style="color: #6d180b;">null</code> to indicate end of stream. Note end of stream indicates end of chunk, so the current chunk will be committed and the step will end.

</div>
<div class="paragraph">

Resolve the imports.

</div></li>
 	<li>Right-click on ‘org.javaee7.movieplex7.batch’ package, select ‘New’, ‘Java Class’, specify the name as ‘SalesProcessor’. Change the class definition and add:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="directive" style="color: #008888;">implements</span> ItemProcessor</code></pre>
</div>
</div>
<div class="paragraph">

<code style="color: #6d180b;">ItemProcessor</code> is an interface that defines a method that is used to operate on an input item and produce an output item. This processor accepts a String input item from the reader, <code style="color: #6d180b;">SalesReader</code> in our case, and returns a <code style="color: #6d180b;">Sales</code> instance to the writer (coming shortly). <code style="color: #6d180b;">Sales</code> is the pre-packaged JPA entity with the application starter source code.

</div>
<div class="paragraph">

Add <code style="color: #6d180b;">@Named</code> and <code style="color: #6d180b;">@Dependent</code> as class-level annotations so that it allows the bean to be injected in Job XML.

</div>
<div class="paragraph">

Resolve the imports.

</div></li>
 	<li>Add implementation of the abstract method from the interface as:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@Override</span>
<span class="directive" style="color: #008888;">public</span> Sales processItem(<span class="predefined-type" style="color: #007744;">Object</span> s) {
    Sales sales = <span class="keyword" style="color: #000000;">new</span> Sales();
    <span class="predefined-type" style="color: #007744;">StringTokenizer</span> tokens = <span class="keyword" style="color: #000000;">new</span> <span class="predefined-type" style="color: #007744;">StringTokenizer</span>((<span class="predefined-type" style="color: #007744;">String</span>)s, <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">,</span><span class="delimiter" style="color: #dd1144;">"</span></span>);
    sales.setId(<span class="predefined-type" style="color: #007744;">Integer</span>.parseInt(tokens.nextToken()));
    sales.setAmount(<span class="predefined-type" style="color: #007744;">Float</span>.parseFloat(tokens.nextToken()));

    <span class="keyword" style="color: #000000;">return</span> sales;
}</code></pre>
</div>
</div>
<div class="paragraph">

This method takes a <code style="color: #6d180b;">String</code> parameter coming from the <code style="color: #6d180b;">SalesReader</code>, parses the value, populates them in the <code style="color: #6d180b;">Sales</code> instance, and returns it. This is then aggregated with the writer.

</div>
<div class="paragraph">

The method can return null indicating that the item should not be aggregated. For example, the parsing errors can be handled within the method and return null if the values are not correct. However this method is implemented where any parsing errors are thrown as exception. Job XML can be instructed to skip these exceptions and thus that particular record is skipped from aggregation as well (shown later).

</div>
<div class="paragraph">

Resolve the imports.

</div></li>
 	<li>Right-click on <code style="color: #6d180b;">org.javaee7.movieplex7.batch</code> package, select ‘New’, ‘Java Class’, specify the name as ‘SalesWriter’. Change the class definition and add:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="directive" style="color: #008888;">extends</span> AbstractItemWriter</code></pre>
</div>
</div>
<div class="paragraph">

<code style="color: #6d180b;">AbstractItemWriter</code> is an abstract class that implements <code style="color: #6d180b;">ItemWriter</code> interface. The ItemWriter interface defines methods that write to a stream of items for chunk processing. This writer writes a list of <code style="color: #6d180b;">Sales</code> items.

</div>
<div class="paragraph">

Add <code style="color: #6d180b;">@Named</code> and <code style="color: #6d180b;">@Dependent</code> as class-level annotations so that it allows the bean to be injected in Job XML.

</div>
<div class="paragraph">

Resolve the imports.

</div></li>
 	<li>Inject <code style="color: #6d180b;">EntityManager</code> as:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@PersistenceContext</span> EntityManager em;</code></pre>
</div>
</div>
<div class="paragraph">

Override <code style="color: #6d180b;">writeItems</code> method from the abstract class by adding the following code:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@Override</span>
<span class="annotation" style="color: #000077;">@Transactional</span>
<span class="directive" style="color: #008888;">public</span> <span class="type" style="color: #333399;">void</span> writeItems(<span class="predefined-type" style="color: #007744;">List</span> list) {
    <span class="keyword" style="color: #000000;">for</span> (Sales s : (<span class="predefined-type" style="color: #007744;">List</span>&lt;Sales&gt;)list) {
        em.persist(s);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">

Batch runtime aggregates the list of <code style="color: #6d180b;">Sales</code> instances returned from the <code style="color: #6d180b;">SalesProessor</code> and makes it available as List in this method. This method iterates over the list and persist each item in the database.

</div>
<div class="paragraph">

The method also specifies <code style="color: #6d180b;">@Transactional</code> as a method level annotation. This is a new annotation introduced by JTA 1.2 that provides the ability to control transaction boundaries on CDI managed beans. This provides the semantics of EJB transaction attributes in CDI beans without dependencies such as RMI. This support is implemented via an implementation of a CDI interceptor that conducts the necessary suspending, resuming, etc.

</div>
<div class="paragraph">

In this case, a transaction is automatically started before the method is called, committed if no checked exceptions are thrown, and rolled back if runtime exceptions are thrown. This behavior can be overridden using <code style="color: #6d180b;">rollbackOn</code> and <code style="color: #6d180b;">dontRollbackOn</code> attributes of the annotation.

</div>
<div class="admonitionblock note">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title" style="font-weight: bold;">NOTE</div></td>
<td class="content" style="color: #6f6f6f;">
<div class="paragraph">

Each chunk is processed within a container-managed transaction already. There is really no need for <code style="color: #6d180b;">@Transactional</code> on <code style="color: #6d180b;">writeItems</code> method but shows a usage for the annotation.

</div></td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

Resolve the imports.

</div></li>
 	<li>Create Job XML that defines the job, step, and chunk.
<div class="paragraph">

In ‘Files’ tab, expand the project → ‘src’ → ‘main’ → ‘resources’, right-click on ‘META-INF’, select ‘New’, ‘Folder’, specify the name as ‘batch-jobs’, and click on ‘Finish’.

</div>
<div class="paragraph">

Right-click on the newly created folder, select ‘New’, ‘Other’, select ‘XML’, ‘XML Document’, click on ‘Next &gt;’, give the name as ‘eod-sales’, click on ‘Next’, take the default, and click on ‘Finish’.

</div>
<div class="paragraph">

Replace contents of the file with the following:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;job</span> <span class="attribute-name" style="color: #007700;">id</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">endOfDaySales</span><span class="delimiter" style="color: #dd1144;">"</span></span>
    <span class="attribute-name" style="color: #007700;">xmlns</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">http://xmlns.jcp.org/xml/ns/javaee</span><span class="delimiter" style="color: #dd1144;">"</span></span>
    <span class="attribute-name" style="color: #007700;">version</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">1.0</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    <span class="tag" style="color: #007700;">&lt;step</span> <span class="attribute-name" style="color: #007700;">id</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">populateSales</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
        <span class="tag" style="color: #007700;">&lt;chunk</span> <span class="attribute-name" style="color: #007700;">item-count</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">3</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">skip-limit</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">5</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
            <span class="tag" style="color: #007700;">&lt;reader</span> <span class="attribute-name" style="color: #007700;">ref</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">salesReader</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;processor</span> <span class="attribute-name" style="color: #007700;">ref</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">salesProcessor</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;writer</span> <span class="attribute-name" style="color: #007700;">ref</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">salesWriter</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;skippable-exception-classes&gt;</span>
                <span class="tag" style="color: #007700;">&lt;include</span> <span class="attribute-name" style="color: #007700;">class</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">java.lang.NumberFormatException</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;/skippable-exception-classes&gt;</span>
        <span class="tag" style="color: #007700;">&lt;/chunk&gt;</span>
    <span class="tag" style="color: #007700;">&lt;/step&gt;</span>
<span class="tag" style="color: #007700;">&lt;/job&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

This code shows that the job has one step of chunk type. The <code style="color: #6d180b;">&lt;reader&gt;</code>, <code style="color: #6d180b;">&lt;processor&gt;</code>, and <code style="color: #6d180b;">&lt;writer&gt;</code> elements define the CDI bean name of the implementations of <code style="color: #6d180b;">ItemReader</code>, <code style="color: #6d180b;">ItemProcessor</code>, and <code style="color: #6d180b;">ItemWriter</code> interfaces. The <code style="color: #6d180b;">item-count</code> attribute defines that 3 items are read/processed/aggregated and then given to the writer. The entire reader/processor/writer cycle is executed within a transaction.

</div>
<div class="paragraph">

The <code style="color: #6d180b;">&lt;skippable-exception-classes&gt;</code> element specifies a set of exceptions to be skipped by chunk processing.

</div>
<div class="paragraph">

CSV file used for this lab has intentionally introduced couple of typos that would generate <code style="color: #6d180b;">NumberFormatException</code>. Specifying this element allows skipping the exception, ignore that particular element, and continue processing. If this element is not specified then the batch processing will halt. The <code style="color: #6d180b;">skip-limit</code> attribute specifies the number of exceptions a step will skip.

</div></li>
 	<li>Lets invoke the batch job.
<div class="paragraph">

In ‘Projects’ tab, right-click on ‘org.javaee7.movieplex7.batch’ package, select ‘New’, ‘Java Class’. Enter the name as ‘SalesBean’ and click on ‘Finish’ button.

</div>
<div class="paragraph">

Add the following code to the bean:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="directive" style="color: #008888;">public</span> <span class="type" style="color: #333399;">void</span> runJob() {
    <span class="keyword" style="color: #000000;">try</span> {
        JobOperator jo = BatchRuntime.getJobOperator();
        <span class="type" style="color: #333399;">long</span> jobId = jo.start(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">eod-sales</span><span class="delimiter" style="color: #dd1144;">"</span></span>, <span class="keyword" style="color: #000000;">new</span> <span class="predefined-type" style="color: #007744;">Properties</span>());
        <span class="predefined-type" style="color: #007744;">System</span>.out.println(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Started job: with id: </span><span class="delimiter" style="color: #dd1144;">"</span></span> + jobId);
    } <span class="keyword" style="color: #000000;">catch</span> (JobStartException ex) {
        ex.printStackTrace();
    }
}</code></pre>
</div>
</div>
<div class="paragraph">

This method uses <code style="color: #6d180b;">BatchRuntime</code> to get an instance of <code style="color: #6d180b;">JobOperator</code>, which is then used to start the job. <code style="color: #6d180b;">JobOperator</code> is the interface for operating on batch jobs. It can be used to start, stop, and restart jobs. It can additionally inspect job history, to discover what jobs are currently running and what jobs have previously run.

</div>
<div class="paragraph">

Add <code style="color: #6d180b;">@Named</code> and <code style="color: #6d180b;">@RequestScoped</code> as class-level annotations. This allows the bean to be injectable in an EL expression.

</div>
<div class="paragraph">

Resolve the imports.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/5.10-imports.png" alt="5.10 imports" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 20. RequestScoped import</div>
</div></li>
 	<li>Inject <code style="color: #6d180b;">EntityManagerFactory</code> in the class as:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@PersistenceUnit</span> EntityManagerFactory emf;</code></pre>
</div>
</div>
<div class="paragraph">

and add the following method:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="directive" style="color: #008888;">public</span> <span class="predefined-type" style="color: #007744;">List</span>&lt;Sales&gt; getSalesData() {
    <span class="keyword" style="color: #000000;">return</span> emf.
        createEntityManager().
        createNamedQuery(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Sales.findAll</span><span class="delimiter" style="color: #dd1144;">"</span></span>, Sales.class).
        getResultList();
}</code></pre>
</div>
</div>
<div class="paragraph">

This method uses a pre-defined <code style="color: #6d180b;">@NamedQuery</code> to query the database and return all the rows from the table.

</div>
<div class="paragraph">

Resolve the imports.

</div></li>
 	<li>Right-click on ‘Web Pages’, select ‘New’, ‘Folder’, specify the name as ‘batch’, and click on ‘Finish’.
<div class="paragraph">

Right-click on the newly created folder, select ‘New’, ‘Other’, ‘JavaServer Faces’, ‘Facelets Template Client’, and click on ‘Next &gt;’.

</div>
<div class="paragraph">

Give the File Name as ‘sales’. Click on ‘Browse’ next to ‘Template:’, expand ‘Web Pages’, ‘WEB-INF’, select ‘template.xhtml’, and click on ‘Select File’. Click on ‘Finish’.

</div>
<div class="paragraph">

In this file, remove <code style="color: #6d180b;">&lt;ui:define&gt;</code> sections where name attribute value is ‘top’ and ‘left’. These sections are inherited from the template.

</div>
<div class="paragraph">

Replace <code style="color: #6d180b;">&lt;ui:define&gt;</code> section with ‘content’ name such that it looks like:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;ui:composition</span> <span class="attribute-name" style="color: #007700;">template</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">../WEB-INF/template.xhtml</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    <span class="tag" style="color: #007700;">&lt;ui:define</span> <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">content</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
        <span class="tag" style="color: #007700;">&lt;h1&gt;</span>Movie Sales<span class="tag" style="color: #007700;">&lt;/h1&gt;</span>
        <span class="tag" style="color: #007700;">&lt;h:form&gt;</span>
            <span class="tag" style="color: #007700;">&lt;h:dataTable</span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{salesBean.salesData}</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">var</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">s</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">border</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">1</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
                <span class="tag" style="color: #007700;">&lt;h:column&gt;</span>
                    <span class="tag" style="color: #007700;">&lt;f:facet</span> <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">header</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
                        <span class="tag" style="color: #007700;">&lt;h:outputText</span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Show ID</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="tag" style="color: #007700;">/&gt;</span>
                    <span class="tag" style="color: #007700;">&lt;/f:facet&gt;</span>
                    #{s.id}
                <span class="tag" style="color: #007700;">&lt;/h:column&gt;</span>
                <span class="tag" style="color: #007700;">&lt;h:column&gt;</span>
                    <span class="tag" style="color: #007700;">&lt;f:facet</span> <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">header</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
                        <span class="tag" style="color: #007700;">&lt;h:outputText</span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Sales</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="tag" style="color: #007700;">/&gt;</span>
                    <span class="tag" style="color: #007700;">&lt;/f:facet&gt;</span>
                    #{s.amount}
                <span class="tag" style="color: #007700;">&lt;/h:column&gt;</span>
            <span class="tag" style="color: #007700;">&lt;/h:dataTable&gt;</span>
            <span class="tag" style="color: #007700;">&lt;h:commandButton</span>
                <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Run Job</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">sales</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">actionListener</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{salesBean.runJob()}</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;h:commandButton</span>
                <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Refresh</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">sales</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="tag" style="color: #007700;">/&gt;</span>
        <span class="tag" style="color: #007700;">&lt;/h:form&gt;</span>
    <span class="tag" style="color: #007700;">&lt;/ui:define&gt;</span>
<span class="tag" style="color: #007700;">&lt;/ui:composition&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

This code displays the show identifier and sales from that show in a table by invoking <code style="color: #6d180b;">SalesBean.getSalesData()</code>. First command button allows invoking the job that processes the CSV file and populates the database. The second command button refreshes the page.

</div>
<div class="paragraph">

Right-click on the yellow bulb to fix namespace prefix/URI mapping for <code style="color: #6d180b;">h:</code>. This needs to be repeated for <code style="color: #6d180b;">f:</code> prefix.

</div></li>
 	<li>Add the following code in <code style="color: #6d180b;">template.xhtml</code> along with other &lt;outputLink&gt;s:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;p</span><span class="tag" style="color: #007700;">/&gt;</span><span class="tag" style="color: #007700;">&lt;h:outputLink</span>
    <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">${facesContext.externalContext.requestContextPath}/faces/batch/sales.xhtml</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    Sales
    <span class="tag" style="color: #007700;">&lt;/h:outputLink&gt;</span></code></pre>
</div>
</div></li>
 	<li>Run the project to see the output as shown.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/5.14-sales.png" alt="5.14 sales" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 21. Sales link on main page</div>
</div>
<div class="paragraph">

Notice, a new ‘Sales’ entry is displayed in the left navigation bar.

</div></li>
 	<li>Click on ‘Sales’ to see the output as shown.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/5.15-sales.png" alt="5.15 sales" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 22. Movie Sales page</div>
</div>
<div class="paragraph">

The empty table indicates that there is no sales data in the database.

</div></li>
 	<li>Click on ‘Run Job’ button to initiate data processing of CSV file. Look for ‘Waiting for localhost’ in the browser status bar, wait for a couple of seconds for the processing to finish, and then click on ‘Refresh’ button to see the updated output as shown.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/5.16-sales-output.png" alt="5.16 sales output" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 23. Movie Sales output page</div>
</div>
<div class="paragraph">

Now the table is populated with the sales data.

</div>
<div class="paragraph">

Note that record 5 is missing from the table, as this records did not have correct numeric entries for the sales total. The Job XML for the application explicitly mentioned to skip such errors.

</div></li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="jaxrs" style="color: #ba3925;">6. View and Delete Movie (Java API for RESTful Web Services)</h2>
<div class="sectionbody">
<div class="paragraph">

<strong>Purpose</strong>: View, and delete a movie. In doing so several new features of JAX-RS 2 will be introduced and demonstrated by using them in the application.

</div>
<div class="paragraph">

<strong>Estimated Time</strong>: 30-45 mins

</div>
<div class="paragraph">

JAX-RS 2 defines a standard API to create, publish, and invoke a REST endpoint. JAX-RS 2 adds several new features to the API:

</div>
<div class="ulist">
<ul>
 	<li>Client API that can be used to access Web resources and provides integration with JAX-RS Providers. Without this API, the users need to use a low-level HttpUrlConnection to access the REST endpoint.</li>
 	<li>Asynchronous processing capabilities in Client and Server that enables more scalable applications.</li>
 	<li>Message Filters and Entity Interceptors as well-defined extension points to extend the capabilities of an implementation.</li>
 	<li>Validation constraints can be specified to validate the parameters and return type.</li>
</ul>
</div>
<div class="paragraph">

This section will provide the ability to view all the movies, details of a selected movie, and delete an existing movie using the JAX-RS Client API.

</div>
<div class="olist arabic">
<ol class="arabic">
 	<li>Right-click on ‘Source Packages’, select ‘New’, ‘Java Class’. Give the class name as ‘MovieClientBean’, package as ‘org.javaee7.movieplex7.client’, and click on ‘Finish’.
<div class="paragraph">

This bean will be used to invoke the REST endpoint.

</div></li>
 	<li>Add <code style="color: #6d180b;">@Named</code> and <code style="color: #6d180b;">@RequestScoped</code> class-level annotations. This allows the class to be injected in an EL expression and also defines the bean to be automatically activated and passivated with the request.
<div class="paragraph">

Resolve the imports.

</div>
<div class="admonitionblock warning">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title" style="font-weight: bold;">WARNING</div></td>
<td class="content" style="color: #6f6f6f;">Make sure to pick <code style="color: #6d180b;">javax.enterprise.context.RequestScoped</code> class.</td>
</tr>
</tbody>
</table>
</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/6.2-imports.png" alt="6.2 imports" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 24. RequestScoped import</div>
</div></li>
 	<li>Add the following code to the class:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;">Client client;
WebTarget target;

<span class="annotation" style="color: #000077;">@Inject</span> HttpServletRequest httpServletRequest;

<span class="annotation" style="color: #000077;">@PostConstruct</span>
<span class="directive" style="color: #008888;">public</span> <span class="type" style="color: #333399;">void</span> init() {
    client = ClientBuilder.newClient();
    target = client
                .target(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">http://</span><span class="delimiter" style="color: #dd1144;">"</span></span> +
                httpServletRequest.getLocalName() +
                <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">:</span><span class="delimiter" style="color: #dd1144;">"</span></span> +
                httpServletRequest.getLocalPort() +
                <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">/</span><span class="delimiter" style="color: #dd1144;">"</span></span> +
                httpServletRequest.getContextPath() +
                <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">/webresources/movie/</span><span class="delimiter" style="color: #dd1144;">"</span></span>);

}

<span class="annotation" style="color: #000077;">@PreDestroy</span>
<span class="directive" style="color: #008888;">public</span> <span class="type" style="color: #333399;">void</span> destroy() {
    client.close();
}</code></pre>
</div>
</div>
<div class="paragraph">

<code style="color: #6d180b;">ClientBuilder</code> is the main entry point to the Client API. It uses a fluent builder API to invoke REST endpoints. A new <code style="color: #6d180b;">Client</code>instance is created using the default client builder implementation provided by the JAX-RS implementation provider. Client are heavy-weight objects that manage the client-side communication infrastructure. It is highly recommended to create only required number of instances of Client and close it appropriately.

</div>
<div class="paragraph">

In this case, <code style="color: #6d180b;">Client</code> instance is created and destroyed in the lifecycle callback methods. The endpoint URI is set on this instance by calling the target method. Note that the endpoint address is dynamically created by injecting an instance of <code style="color: #6d180b;">HttpServletRequest</code>. This is a new feature added in CDI 1.1

</div></li>
 	<li>Add the following method to the class:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="directive" style="color: #008888;">public</span> Movie<span class="type" style="color: #333399;">[]</span> getMovies() {
    <span class="keyword" style="color: #000000;">return</span> target
        .request()
        .get(Movie<span class="type" style="color: #333399;">[]</span>.class);
}</code></pre>
</div>
</div>
<div class="paragraph">

A request is prepared by calling the request method. HTTP GET method is invoked by calling get method. The response type is specified in the last method call and so return value is of the type <code style="color: #6d180b;">Movie[]</code>.

</div></li>
 	<li>Right-click on ‘Web Pages’, select ‘New’, ‘Folder’, specify the name as ‘client’, and click on ‘Finish’.
<div class="paragraph">

Right-click on the newly created folder, select ‘New’, ‘Other’, ‘JavaServer Faces’, ‘Facelets Template Client’, and click on ‘Next &gt;’.

</div>
<div class="paragraph">

Give the File Name as ‘movies’. Click on ‘Browse’ next to ‘Template:’, expand ‘Web Pages’, ‘WEB-INF’, select ‘template.xhtml’, and click on ‘Select File’. Click on ‘Finish’.

</div></li>
 	<li>In this file, remove <code style="color: #6d180b;">&lt;ui:define&gt;</code> sections where name attribute value is ‘top’ and ‘left’. These sections are inherited from the template.
<div class="paragraph">

Replace <code style="color: #6d180b;">&lt;ui:define&gt;</code> section with ‘content’ name such that it looks like:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;ui:composition</span> <span class="attribute-name" style="color: #007700;">template</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">../WEB-INF/template.xhtml</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    <span class="tag" style="color: #007700;">&lt;ui:define</span> <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">content</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
        <span class="tag" style="color: #007700;">&lt;h:form</span> <span class="attribute-name" style="color: #007700;">prependId</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">false</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
            <span class="tag" style="color: #007700;">&lt;h:selectOneRadio</span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{movieBackingBean.movieId}</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">layout</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">pageDirection</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
                <span class="tag" style="color: #007700;">&lt;c:forEach</span> <span class="attribute-name" style="color: #007700;">items</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{movieClientBean.movies}</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">var</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">m</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
                    <span class="tag" style="color: #007700;">&lt;f:selectItem</span> <span class="attribute-name" style="color: #007700;">itemValue</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{m.id}</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">itemLabel</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{m.name}</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
                <span class="tag" style="color: #007700;">&lt;/c:forEach&gt;</span>
            <span class="tag" style="color: #007700;">&lt;/h:selectOneRadio&gt;</span>
            <span class="tag" style="color: #007700;">&lt;h:commandButton</span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Details</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">movie</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="tag" style="color: #007700;">/&gt;</span>
        <span class="tag" style="color: #007700;">&lt;/h:form&gt;</span>
    <span class="tag" style="color: #007700;">&lt;/ui:define&gt;</span>
<span class="tag" style="color: #007700;">&lt;/ui:composition&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

This code fragment invokes <code style="color: #6d180b;">getMovies</code> method from <code style="color: #6d180b;">MovieClientBean</code>, iterates over the response in a for loop, and display the name of each movie with a radio button. The selected radio button value is bound to the EL expression <code style="color: #6d180b;">#{movieBackingBean.movieId}</code>.

</div>
<div class="paragraph">

The code also has a button with ‘Details’ label and looks for ‘movie.xhtml’ in the same directory. We will create this file later.

</div>
<div class="paragraph">

Click on the yellow bulb in the left bar to resolve the namespace prefix-to-URI resolution. This needs to be completed for <code style="color: #6d180b;">h:</code>, <code style="color: #6d180b;">c:</code>, and <code style="color: #6d180b;">f:</code> prefixes.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/6.6-imports.png" alt="6.6 imports" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 25. Namespace prefix imports</div>
</div></li>
 	<li>Right-click on ‘org.javaee7.movieplex7.client’ package, select ‘New’, ‘Java Class’, specify the value as ‘MovieBackingBean’ and click on ‘Finish’.
<div class="paragraph">

Add the following field:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="type" style="color: #333399;">int</span> movieId;</code></pre>
</div>
</div>
<div class="paragraph">

Add getters/setters by right-clicking on the editor pane and selecting ‘Insert Code’ (<kbd class="keyseq" style="color: #555555;"><kbd>Ctrl</kbd>+<kbd>I</kbd></kbd> shortcut on OSX). Select the field and click on ‘Generate’.

</div>
<div class="paragraph">

Add <code style="color: #6d180b;">@Named</code> and <code style="color: #6d180b;">@SessionScoped</code> class-level annotations and implements <code style="color: #6d180b;">Serializable</code>.

</div>
<div class="paragraph">

Resolve the imports.

</div>
<div class="admonitionblock warning">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title" style="font-weight: bold;">WARNING</div></td>
<td class="content" style="color: #6f6f6f;">Make sure to import <code style="color: #6d180b;">javax.enterprise.context.SessionScoped</code>.</td>
</tr>
</tbody>
</table>
</div></li>
 	<li>In ‘template.xhtml’, add the following code along with other &lt;outputLink&gt;s:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;p</span><span class="tag" style="color: #007700;">/&gt;</span><span class="tag" style="color: #007700;">&lt;h:outputLink</span>
        <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">${facesContext.externalContext.requestContextPath}/faces/client/movies.xhtml</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
        Movies
    <span class="tag" style="color: #007700;">&lt;/h:outputLink&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

Running the project (<kbd class="keyseq" style="color: #555555;"><kbd>Fn</kbd>+<kbd>F6</kbd></kbd> shortcut on OSX) and clicking on ‘Movies’ in the left navigation bar shows the output as shown.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/6.8-output.png" alt="6.8 output" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 26. List of movies output page</div>
</div>
<div class="paragraph">

The list of all the movies with a radio button next to them is displayed.

</div></li>
 	<li>In <code style="color: #6d180b;">MovieClientBean</code>, inject <code style="color: #6d180b;">MovieBackingBean</code> to read the value of selected movie from the page. Add the following code:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@Inject</span>
MovieBackingBean bean;</code></pre>
</div>
</div></li>
 	<li>In <code style="color: #6d180b;">MovieClientBean</code>, add the following method:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="directive" style="color: #008888;">public</span> Movie getMovie() {
    Movie m = target
        .path(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">{movie}</span><span class="delimiter" style="color: #dd1144;">"</span></span>)
        .resolveTemplate(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">movie</span><span class="delimiter" style="color: #dd1144;">"</span></span>, bean.getMovieId())
        .request()
        .get(Movie.class);
    <span class="keyword" style="color: #000000;">return</span> m;
}</code></pre>
</div>
</div>
<div class="paragraph">

This code reuses the <code style="color: #6d180b;">Client</code> and <code style="color: #6d180b;">WebTarget</code> instances created in <code style="color: #6d180b;">@PostConstruct</code>. It also adds a variable part to the URI of the REST endpoint, defined using <code style="color: #6d180b;">{movie}</code>, and binds it to a concrete value using <code style="color: #6d180b;">resolveTemplate</code> method. The return type is specified as a parameter to the get method.

</div></li>
 	<li>Right-click on ‘client’ folder, select ‘New’, ‘Facelets Template Client’, give the File Name as ‘movie’. Click on ‘Browse’ next to ‘Template:’, expand ‘Web Pages’, ‘WEB-INF’, select ‘template.xhtml’, and click on ‘Select File’. Click on ‘Finish’.</li>
 	<li>In this file, remove <code style="color: #6d180b;">&lt;ui:define&gt;</code> sections where name attribute value is ‘top’ and ‘left’. These sections are inherited from the template.
<div class="paragraph">

Replace <code style="color: #6d180b;">&lt;ui:define&gt;</code> with ‘content’ name such that it looks like:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;ui:define</span> <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">content</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    <span class="tag" style="color: #007700;">&lt;h1&gt;</span>Movie Details<span class="tag" style="color: #007700;">&lt;/h1&gt;</span>
    <span class="tag" style="color: #007700;">&lt;h:form&gt;</span>
        <span class="tag" style="color: #007700;">&lt;table</span> <span class="attribute-name" style="color: #007700;">cellpadding</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">5</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">cellspacing</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">5</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
            <span class="tag" style="color: #007700;">&lt;tr&gt;</span>
                <span class="tag" style="color: #007700;">&lt;th</span> <span class="attribute-name" style="color: #007700;">align</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">left</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>Movie Id:<span class="tag" style="color: #007700;">&lt;/th&gt;</span>
                <span class="tag" style="color: #007700;">&lt;td&gt;</span>#{movieClientBean.movie.id}<span class="tag" style="color: #007700;">&lt;/td&gt;</span>
            <span class="tag" style="color: #007700;">&lt;/tr&gt;</span>
            <span class="tag" style="color: #007700;">&lt;tr&gt;</span>
                <span class="tag" style="color: #007700;">&lt;th</span> <span class="attribute-name" style="color: #007700;">align</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">left</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>Movie Name:<span class="tag" style="color: #007700;">&lt;/th&gt;</span>
                <span class="tag" style="color: #007700;">&lt;td&gt;</span>#{movieClientBean.movie.name}<span class="tag" style="color: #007700;">&lt;/td&gt;</span>
            <span class="tag" style="color: #007700;">&lt;/tr&gt;</span>
            <span class="tag" style="color: #007700;">&lt;tr&gt;</span>
                <span class="tag" style="color: #007700;">&lt;th</span> <span class="attribute-name" style="color: #007700;">align</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">left</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>Movie Actors:<span class="tag" style="color: #007700;">&lt;/th&gt;</span>
                <span class="tag" style="color: #007700;">&lt;td&gt;</span>#{movieClientBean.movie.actors}<span class="tag" style="color: #007700;">&lt;/td&gt;</span>
            <span class="tag" style="color: #007700;">&lt;/tr&gt;</span>
        <span class="tag" style="color: #007700;">&lt;/table&gt;</span>
        <span class="tag" style="color: #007700;">&lt;h:commandButton</span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Back</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">movies</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="tag" style="color: #007700;">/&gt;</span>
    <span class="tag" style="color: #007700;">&lt;/h:form&gt;</span>
<span class="tag" style="color: #007700;">&lt;/ui:define&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

Click on the yellow-bulb to resolve the namespace prefix-URI mapping for <code style="color: #6d180b;">h:</code>.

</div>
<div class="paragraph">

The output values are displayed by calling the <code style="color: #6d180b;">getMovie</code> method and using the <code style="color: #6d180b;">id</code>, <code style="color: #6d180b;">name</code>, and <code style="color: #6d180b;">actors</code> property values.

</div></li>
 	<li>Run the project, select ‘Movies’ in the left navigation bar, select a radio button next to any movie, and click on details to see the output as shown.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/6.12-output.png" alt="6.12 output" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 27. Movie Details page</div>
</div>
<div class="paragraph">

Click on the ‘Back’ button to select another movie.

</div></li>
 	<li>Add the ability to delete a movie. In ‘movies.xhtml’, add the following code with other &lt;commandButton&gt;.
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;h:commandButton</span>
    <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Delete</span><span class="delimiter" style="color: #dd1144;">"</span></span>
    <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">movies</span><span class="delimiter" style="color: #dd1144;">"</span></span>
    <span class="attribute-name" style="color: #007700;">actionListener</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{movieClientBean.deleteMovie()}</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

This button displays a label ‘Delete’, invokes the method deleteMovie from ‘MovieClientBean’, and then renders ‘movies.xhtml’.

</div></li>
 	<li>Add the following code to ‘MovieClientBean’:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="directive" style="color: #008888;">public</span> <span class="type" style="color: #333399;">void</span> deleteMovie() {
    target
        .path(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">{movieId}</span><span class="delimiter" style="color: #dd1144;">"</span></span>)
        .resolveTemplate(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">movieId</span><span class="delimiter" style="color: #dd1144;">"</span></span>, bean.getMovieId())
        .request()
        .delete();
}</code></pre>
</div>
</div>
<div class="paragraph">

This code again reuses the <code style="color: #6d180b;">Client</code> and <code style="color: #6d180b;">WebTarget</code> instances created in <code style="color: #6d180b;">@PostConstruct</code>. It also adds a variable part to the URI of the REST endpoint, defined using <code style="color: #6d180b;">{movieId}</code>, and binds it to a concrete value using <code style="color: #6d180b;">resolveTemplate</code> method. The URI of the resource to be deleted is prepared and then delete method is called to delete the resource.

</div>
<div class="paragraph">

Make sure to resolve the imports.

</div>
<div class="paragraph">

Running the project shows the output shown.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/6.14-output.png" alt="6.14 output" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 28. Delete button</div>
</div>
<div class="paragraph">

Select a movie and click on Delete button. This deletes the movie from the database and refreshes list on the page. Note that a redeploy of the project will delete all the movies anyway and add them all back.

</div></li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="json" style="color: #ba3925;">7. Add Movie (Java API for JSON Processing)</h2>
<div class="sectionbody">
<div class="paragraph">

<strong>Purpose</strong>: Add a new movie. In doing so several new features of the Java API for JSON Processing 1.0 will be introduced and demonstrated by using them in the application.

</div>
<div class="paragraph">

<strong>Estimated Time</strong>: 30-45 mins

</div>
<div class="paragraph">

Java API for JSON Processing provides a standard API to parse and generate JSON so that the applications can rely upon a portable API. This API will provide:

</div>
<div class="ulist">
<ul>
 	<li>Produce/Consume JSON in a streaming fashion (similar to StAX API for XML)</li>
 	<li>Build a Java Object Model for JSON (similar to DOM API for XML)</li>
</ul>
</div>
<div class="paragraph">

This section will define a JAX-RS Entity Providers that will allow reading and writing JSON for a Movie POJO. The JAX-RS Client API will request this JSON representation.

</div>
<div class="paragraph">

JAX-RS Entity Providers supply mapping services between on-the-wire representations and their associated Java types.  Several standard Java types such as <code style="color: #6d180b;">String</code>, <code style="color: #6d180b;">byte[]</code>, <code style="color: #6d180b;">javax.xml.bind.JAXBElement</code>, <code style="color: #6d180b;">java.io.InputStream</code>, <code style="color: #6d180b;">java.io.File</code>, and others have a pre-defined mapping and is required by the specification. Applications may provide their own mapping to custom types using <code style="color: #6d180b;">MessageBodyReader</code> and <code style="color: #6d180b;">MessageBodyWriter</code> interfaces.

</div>
<div class="paragraph">

This section will provide the ability to add a new movie to the application. Typically, this functionality will be available after proper authentication and authorization.

</div>
<div class="olist arabic">
<ol class="arabic">
 	<li>Right-click on Source Packages, select ‘New’, ‘Java Class’, specify the name as ‘MovieReader’, package as ‘org.javaee7.movieplex7.json’ and click on ‘Finish’. Add the following class-level annotations:</li>
 	<li>Right-click on newly created package, select ‘New’, ‘Java Class’, specify the name as ‘MovieReader’, and click on ‘Finish’. Add the following class-level annotations:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@Provider</span>
<span class="annotation" style="color: #000077;">@Consumes</span>(MediaType.APPLICATION_JSON)</code></pre>
</div>
</div>
<div class="paragraph">

<code style="color: #6d180b;">@Provider</code> allows this implementation to be discovered by the JAX-RS runtime during the provider scanning phase. <code style="color: #6d180b;">@Consumes</code>indicates that this implementation will consume a JSON representation of the resource.

</div>
<div class="paragraph">

Make sure to resolve imports from the appropriate package as shown.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/7.2-imports.png" alt="7.2 imports" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 29. Provider import</div>
</div></li>
 	<li>Make the class implements <code style="color: #6d180b;">MessageBodyReader&lt;Movie&gt;</code>.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/7.3-implements.png" alt="7.3 implements" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 30. Implement abstract methods for MessageBodyReader</div>
</div>
<div class="paragraph">

Click on the hint (shown as yellow bulb) on the class definition and select ‘Implement all abstract methods’.

</div></li>
 	<li>Change implementation of the <code style="color: #6d180b;">isReadable</code> method as:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="keyword" style="color: #000000;">return</span> Movie.class.isAssignableFrom(type);</code></pre>
</div>
</div>
<div class="paragraph">

This method ascertains if the <code style="color: #6d180b;">MessageBodyReader</code> can produce an instance of a particular type.

</div></li>
 	<li>Replace the <code style="color: #6d180b;">readFrom</code> method with:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@Override</span>
<span class="directive" style="color: #008888;">public</span> Movie readFrom(
    <span class="predefined-type" style="color: #007744;">Class</span>&lt;Movie&gt; type,
    <span class="predefined-type" style="color: #007744;">Type</span> type1,
    <span class="predefined-type" style="color: #007744;">Annotation</span><span class="type" style="color: #333399;">[]</span> antns,
    MediaType mt,
    MultivaluedMap&lt;<span class="predefined-type" style="color: #007744;">String</span>, <span class="predefined-type" style="color: #007744;">String</span>&gt; mm,
    <span class="predefined-type" style="color: #007744;">InputStream</span> in)
      <span class="directive" style="color: #008888;">throws</span> <span class="exception" style="color: #cc0000;">IOException</span>, WebApplicationException {

    Movie movie = <span class="keyword" style="color: #000000;">new</span> Movie();
    JsonParser parser = Json.createParser(in);
    <span class="keyword" style="color: #000000;">while</span> (parser.hasNext()) {
        <span class="keyword" style="color: #000000;">switch</span> (parser.next()) {
            <span class="keyword" style="color: #000000;">case</span> KEY_NAME:
                <span class="predefined-type" style="color: #007744;">String</span> key = parser.getString();
                parser.next();
                <span class="keyword" style="color: #000000;">switch</span> (key) {
                    <span class="keyword" style="color: #000000;">case</span> <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">id</span><span class="delimiter" style="color: #dd1144;">"</span></span>:
                        movie.setId(parser.getInt());
                        <span class="keyword" style="color: #000000;">break</span>;
                    <span class="keyword" style="color: #000000;">case</span> <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">name</span><span class="delimiter" style="color: #dd1144;">"</span></span>:
                        movie.setName(parser.getString());
                        <span class="keyword" style="color: #000000;">break</span>;
                    <span class="keyword" style="color: #000000;">case</span> <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">actors</span><span class="delimiter" style="color: #dd1144;">"</span></span>:
                        movie.setActors(parser.getString());
                        <span class="keyword" style="color: #000000;">break</span>;
                    <span class="keyword" style="color: #000000;">default</span>:
                        <span class="keyword" style="color: #000000;">break</span>;
                }
                <span class="keyword" style="color: #000000;">break</span>;
            <span class="keyword" style="color: #000000;">default</span>:
                <span class="keyword" style="color: #000000;">break</span>;
        }
    }
    <span class="keyword" style="color: #000000;">return</span> movie;
}</code></pre>
</div>
</div>
<div class="paragraph">

This code reads a type from the input stream in. <code style="color: #6d180b;">JsonParser</code>, a streaming parser, is created from the input stream. Key values are read from the parser and a <code style="color: #6d180b;">Movie</code> instance is populated and returned.

</div>
<div class="paragraph">

Resolve the imports.

</div></li>
 	<li>Right-click on ‘org.javaee7.movieplex7.json’ package, select ‘New’, ‘Java Class’, specify the name as ‘MovieWriter’, and click on ‘Finish’. Add the following class-level annotations:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@Provider</span>
<span class="annotation" style="color: #000077;">@Produces</span>(MediaType.APPLICATION_JSON)</code></pre>
</div>
</div>
<div class="paragraph">

<code style="color: #6d180b;">@Provider</code> allows this implementation to be discovered by the JAX-RS runtime during the provider scanning phase. <code style="color: #6d180b;">@Produces</code>indicates that this implementation will produce a JSON representation of the resource.

</div>
<div class="paragraph">

Resolve the imports as shown.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/7.6-imports.png" alt="7.6 imports" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 31. Provider import</div>
</div></li>
 	<li>Make this class implement <code style="color: #6d180b;">MessageBodyWriter</code> interface by adding the following code:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="directive" style="color: #008888;">implements</span> MessageBodyWriter&lt;Movie&gt;</code></pre>
</div>
</div>
<div class="paragraph">

Resolve the imports.

</div>
<div class="paragraph">

The IDE provide a hint to implement abstract methods as:

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/7.7-implements.png" alt="7.7 implements" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 32. Implement abstract methods for MessageBodyWriter</div>
</div>
<div class="paragraph">

Click on the hint (show as yellow bulb) on the class definition and select ‘Implement all abstract methods’.

</div></li>
 	<li>Change implementation of the <code style="color: #6d180b;">isWritable</code> method to:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="keyword" style="color: #000000;">return</span> Movie.class.isAssignableFrom(type);</code></pre>
</div>
</div>
<div class="paragraph">

This method ascertains if the <code style="color: #6d180b;">MessageBodyWriter</code> supports a particular type.

</div></li>
 	<li>Add implementation of the <code style="color: #6d180b;">getSize</code> method as:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="keyword" style="color: #000000;">return</span> -<span class="integer" style="color: #009999;">1</span>;</code></pre>
</div>
</div>
<div class="paragraph">

Originally, this method was called to ascertain the length in bytes of the serialized form of <code style="color: #6d180b;">t</code>. In JAX-RS 2.0, this method is deprecated and the value returned by the method is ignored by a JAX-RS runtime. All <code style="color: #6d180b;">MessageBodyWriter</code> implementations are advised to return -1.

</div></li>
 	<li>Change implementation of the <code style="color: #6d180b;">writeTo</code> method to:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;">JsonGenerator gen = Json.createGenerator(entityStream);
gen.writeStartObject()
    .write(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">id</span><span class="delimiter" style="color: #dd1144;">"</span></span>, t.getId())
    .write(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">name</span><span class="delimiter" style="color: #dd1144;">"</span></span>, t.getName())
    .write(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">actors</span><span class="delimiter" style="color: #dd1144;">"</span></span>, t.getActors())
    .writeEnd();
    gen.flush();</code></pre>
</div>
</div>
<div class="paragraph">

This method writes a type to an HTTP message. <code style="color: #6d180b;">JsonGenerator</code> writes JSON data to an output stream in a streaming way. Overloaded write methods are used to write different data types to the stream.

</div>
<div class="paragraph">

Resolve the imports.

</div></li>
 	<li>In ‘Web Pages’, right-click on ‘client’ folder, select ‘New’, ‘Facelets Template Client’. Give the File Name as ‘addmovie’. Click on ‘Browse’ next to ‘Template:’, expand ‘Web Pages’, ‘WEB-INF’, select ‘template.xhtml’, and click on ‘Select File’. Click on ‘Finish’.</li>
 	<li>In this file, remove <code style="color: #6d180b;">&lt;ui:define&gt;</code> sections where name attribute value is ‘top’ and ‘left’. These sections are inherited from the template.
<div class="paragraph">

Replace <code style="color: #6d180b;">&lt;ui:define&gt;</code> section with ‘content’ name such that it looks like:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;ui:composition</span> <span class="attribute-name" style="color: #007700;">template</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">../WEB-INF/template.xhtml</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    <span class="tag" style="color: #007700;">&lt;ui:define</span> <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">content</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    <span class="tag" style="color: #007700;">&lt;h1&gt;</span>Add a New Movie<span class="tag" style="color: #007700;">&lt;/h1&gt;</span>
    <span class="tag" style="color: #007700;">&lt;h:form&gt;</span>
        <span class="tag" style="color: #007700;">&lt;table</span> <span class="attribute-name" style="color: #007700;">cellpadding</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">5</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">cellspacing</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">5</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
            <span class="tag" style="color: #007700;">&lt;tr&gt;</span>
                <span class="tag" style="color: #007700;">&lt;th</span> <span class="attribute-name" style="color: #007700;">align</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">left</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>Movie Id:<span class="tag" style="color: #007700;">&lt;/th&gt;</span>
                <span class="tag" style="color: #007700;">&lt;td&gt;</span><span class="tag" style="color: #007700;">&lt;h:inputText</span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{movieBackingBean.movieId}</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span><span class="tag" style="color: #007700;">&lt;/td&gt;</span>
            <span class="tag" style="color: #007700;">&lt;/tr&gt;</span>
            <span class="tag" style="color: #007700;">&lt;tr&gt;</span>
                <span class="tag" style="color: #007700;">&lt;th</span> <span class="attribute-name" style="color: #007700;">align</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">left</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>Movie Name:<span class="tag" style="color: #007700;">&lt;/th&gt;</span>
                <span class="tag" style="color: #007700;">&lt;td&gt;</span><span class="tag" style="color: #007700;">&lt;h:inputText</span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{movieBackingBean.movieName}</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span> <span class="tag" style="color: #007700;">&lt;/td&gt;</span>
            <span class="tag" style="color: #007700;">&lt;/tr&gt;</span>
            <span class="tag" style="color: #007700;">&lt;tr&gt;</span>
                <span class="tag" style="color: #007700;">&lt;th</span> <span class="attribute-name" style="color: #007700;">align</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">left</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>Movie Actors:<span class="tag" style="color: #007700;">&lt;/th&gt;</span>
                <span class="tag" style="color: #007700;">&lt;td&gt;</span><span class="tag" style="color: #007700;">&lt;h:inputText</span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{movieBackingBean.actors}</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span><span class="tag" style="color: #007700;">&lt;/td&gt;</span>
            <span class="tag" style="color: #007700;">&lt;/tr&gt;</span>
        <span class="tag" style="color: #007700;">&lt;/table&gt;</span>
        <span class="tag" style="color: #007700;">&lt;h:commandButton</span>
            <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Add</span><span class="delimiter" style="color: #dd1144;">"</span></span>
            <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">movies</span><span class="delimiter" style="color: #dd1144;">"</span></span>
            <span class="attribute-name" style="color: #007700;">actionListener</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{movieClientBean.addMovie()}</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
    <span class="tag" style="color: #007700;">&lt;/h:form&gt;</span>
    <span class="tag" style="color: #007700;">&lt;/ui:define&gt;</span>
<span class="tag" style="color: #007700;">&lt;/ui:composition&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

This code creates a form to accept input of <code style="color: #6d180b;">id</code>, <code style="color: #6d180b;">name</code>, and <code style="color: #6d180b;">actors</code> of a movie. These values are bound to fields in <code style="color: #6d180b;">MovieBackingBean</code>. The click of command button invokes the addMovie method from <code style="color: #6d180b;">MovieClientBean</code> and then renders ‘movies.xhtml’.

</div>
<div class="paragraph">

Click on the hint (show as yellow bulb) to resolve the namespace prefix/URI mapping as shown.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/7.11-imports.png" alt="7.11 imports" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 33. Namespace prefix mapping imports</div>
</div></li>
 	<li>Add <code style="color: #6d180b;">movieName</code> and <code style="color: #6d180b;">actors</code> field to <code style="color: #6d180b;">MovieBackingBean</code> as:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="predefined-type" style="color: #007744;">String</span> movieName;
<span class="predefined-type" style="color: #007744;">String</span> actors;</code></pre>
</div>
</div>
<div class="paragraph">

Generate getters and setters by clicking on the menu item ‘Source’ and then ‘Insert Code’.

</div></li>
 	<li>Add the following code to ‘movies.xhtml’
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;h:commandButton</span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">New Movie</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">addmovie</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="tag" style="color: #007700;">/&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

along with rest of the &lt;commandButton&gt;s.

</div></li>
 	<li>Add the following method in <code style="color: #6d180b;">MovieClientBean</code>:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="directive" style="color: #008888;">public</span> <span class="type" style="color: #333399;">void</span> addMovie() {
    Movie m = <span class="keyword" style="color: #000000;">new</span> Movie();
    m.setId(bean.getMovieId());
    m.setName(bean.getMovieName());
    m.setActors(bean.getActors());
    target
        .register(MovieWriter.class)
        .request()
        .post(<span class="predefined-type" style="color: #007744;">Entity</span>.entity(m, MediaType.APPLICATION_JSON));
}</code></pre>
</div>
</div>
<div class="paragraph">

This method creates a new <code style="color: #6d180b;">Movie</code> instance, populates it with the values from the backing bean, and POSTs the bean to the REST endpoint. The register method registers a MovieWriter that provides conversion from the POJO to JSON. Media type of <code style="color: #6d180b;">application/json</code> is specified using <code style="color: #6d180b;">MediaType.APPLICATION_JSON</code>.

</div>
<div class="paragraph">

Resolve the imports as shown

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/7.14-imports.png" alt="7.14 imports" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 34. Entity import</div>
</div></li>
 	<li>Run the project to see the updated main page as:
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/7.15-output.png" alt="7.15 output" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 35. New Movie button</div>
</div>
<div class="paragraph">

A new movie can be added by clicking on ‘New Movie’ button.

</div></li>
 	<li>Enter the details as shown:
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/7.16-output.png" alt="7.16 output" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 36. Add a New Movie page</div>
</div>
<div class="paragraph">

Click on ‘Add’ button. The ‘Movie Id’ value has to be greater than 20 otherwise the primary key constraint will be violated. The table definition may be updated to generate the primary key based upon a sequence; however this is not done in the application.

</div>
<div class="paragraph">

The updated page looks like as shown

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/7.16-output2.png" alt="7.16 output2" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 37. Newly added movie</div>
</div>
<div class="paragraph">

Note that the newly added movie is now displayed.

</div></li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="jms" style="color: #ba3925;">8. Movie Points (Java Message Service)</h2>
<div class="sectionbody">
<div class="paragraph">

<strong>Purpose</strong>: Customers accrue points for watching a movie.

</div>
<div class="paragraph">

<strong>Estimated Time</strong>: 30-45 mins

</div>
<div class="paragraph">

Java Message Service 2.0 allows sending and receiving messages between distributed systems. JMS 2 introduced several improvements over the previous version such as:

</div>
<div class="ulist">
<ul>
 	<li>New <code style="color: #6d180b;">JMSContext</code> interface</li>
 	<li>AutoCloseable <code style="color: #6d180b;">JMSContext</code>, <code style="color: #6d180b;">Connection</code>, and <code style="color: #6d180b;">Session</code></li>
 	<li>Use of runtime exceptions</li>
 	<li>Method chaining on <code style="color: #6d180b;">JMSProducer</code></li>
 	<li>Simplified message sending</li>
</ul>
</div>
<div class="paragraph">

This section will provide a page to simulate submission of movie points accrued by a customer. These points are submitted to a JMS queue that is then read synchronously by another bean. JMS queue for further processing, possibly storing in the database using JPA.

</div>
<div class="olist arabic">
<ol class="arabic">
 	<li>Right-click on Source Packages, select ‘New’, ‘Java Class’, specify the name as ‘SendPointsBean’, package as ‘org.javaee7.movieplex7.points’, and click on ‘Finish’.
<div class="paragraph">

Add the following class-level annotations:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@Named</span>
<span class="annotation" style="color: #000077;">@RequestScoped</span></code></pre>
</div>
</div>
<div class="paragraph">

This makes the bean to be EL-injectable and automatically activated and passivated with the request.

</div>
<div class="paragraph">

Resolve the imports.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/8.2-imports.png" alt="8.2 imports" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 38. RequestScoped import</div>
</div></li>
 	<li>A message to a JMS Queue is sent after the customer has bought the tickets. Another bean will then retrieve this message and update the points for that customer. This allows the two systems, one generating the data about tickets purchased and the other about crediting the account with the points, completely decoupled.
<div class="paragraph">

This lab will mimic the sending and consuming of a message by an explicit call to the bean from a JSF page.

</div>
<div class="paragraph">

Add the following field to the class:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@NotNull</span>
<span class="annotation" style="color: #000077;">@Pattern</span>(regexp = <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">^</span><span class="char" style="color: #dd1144;">\\</span><span class="content" style="color: #dd1144;">d{2},</span><span class="char" style="color: #dd1144;">\\</span><span class="content" style="color: #dd1144;">d{2}</span><span class="delimiter" style="color: #dd1144;">"</span></span>,
         message = <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Message format must be 2 digits, comma, 2 digits, e.g.12,12</span><span class="delimiter" style="color: #dd1144;">"</span></span>)
<span class="directive" style="color: #008888;">private</span> <span class="predefined-type" style="color: #007744;">String</span> message;</code></pre>
</div>
</div>
<div class="paragraph">

This field contains the message sent to the queue. This field’s value is bound to an inputText in a JSF page (created later). Constraints have been specified on this bean that enable validation of data on form submit. It requires the data to consists of two numerical digits, followed by a comma, and then two more numerical digits. If the message does not meet the validation criteria then the error message to be displayed is specified using message attribute.

</div>
<div class="paragraph">

This could be thought as conveying the customer identifier and the points accrued by that customer.

</div>
<div class="paragraph">

Generate getter/setters for this field. Right-click in the editor pane, select ‘Insert Code’ (<kbd class="keyseq" style="color: #555555;"><kbd>Ctrl</kbd>+<kbd>I</kbd></kbd> shortcut on OSX), select ‘Getter and Setter’, select the field, and click on ‘Generate’.

</div></li>
 	<li>Add the following code to the class:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@Inject</span>
JMSContext context;

<span class="annotation" style="color: #000077;">@Resource</span>(lookup = <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">java:global/jms/pointsQueue</span><span class="delimiter" style="color: #dd1144;">"</span></span>)
<span class="predefined-type" style="color: #007744;">Queue</span> pointsQueue;

<span class="directive" style="color: #008888;">public</span> <span class="type" style="color: #333399;">void</span> sendMessage() {
    <span class="predefined-type" style="color: #007744;">System</span>.out.println(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Sending message: </span><span class="delimiter" style="color: #dd1144;">"</span></span> + message);
    context.createProducer().send(pointsQueue, message);
}</code></pre>
</div>
</div>
<div class="paragraph">

The Java EE Platform requires a pre-configured JMS connection factory under the JNDI name <code style="color: #6d180b;">java:comp/DefaultJMSConnectionFactory</code>. If no connection factory is specified then the pre-configured connection factory is used. In a Java EE environment, where CDI is enabled by default anyway, a container-managed <code style="color: #6d180b;">JMSContext</code> can be injected as:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@Inject</span>
JMSContext context;</code></pre>
</div>
</div>
<div class="paragraph">

This code uses the default factory to inject an instance of container-managed <code style="color: #6d180b;">JMSContext</code>.

</div>
<div class="paragraph">

<code style="color: #6d180b;">JMSContext</code> is a new interface introduced in JMS 2. This combines in a single object the functionality of two separate objects from the JMS 1.1 API: a <code style="color: #6d180b;">Connection</code> and a <code style="color: #6d180b;">Session</code>.

</div>
<div class="paragraph">

When an application needs to send messages it use the <code style="color: #6d180b;">createProducer</code> method to create a <code style="color: #6d180b;">JMSProducer</code> that provides methods to configure and send messages. Messages may be sent either synchronously or asynchronously.

</div>
<div class="paragraph">

When an application needs to receive messages it uses one of several <code style="color: #6d180b;">createConsumer</code> or <code style="color: #6d180b;">createDurableConsumer</code> methods to create a <code style="color: #6d180b;">JMSConsumer</code>. A <code style="color: #6d180b;">JMSConsumer</code> provides methods to receive messages either synchronously or asynchronously.

</div>
<div class="paragraph">

All messages are then sent to a <code style="color: #6d180b;">Queue</code> instance (created later) identified by <code style="color: #6d180b;">java:global/jms/pointsQueue</code> JNDI name. The actual message is obtained from the value entered in the JSF page and bound to the message field.

</div>
<div class="paragraph">

Resolve the imports.

</div>
<div class="admonitionblock warning">
<table>
<tbody>
<tr>
<td class="icon">
<div class="title" style="font-weight: bold;">WARNING</div></td>
<td class="content" style="color: #6f6f6f;">Make sure <code style="color: #6d180b;">Queue</code> class is imported from <code style="color: #6d180b;">javax.jms.Queue</code> instead of the default <code style="color: #6d180b;">java.util.Queue</code>.</td>
</tr>
</tbody>
</table>
</div>
<div class="paragraph">

Click on ‘OK’.

</div></li>
 	<li>Right-click on ‘org.javaee7.movieplex7.points’ package, select ‘New’, ‘Java Class’, specify the name as ‘ReceivePointsBean’.
<div class="paragraph">

Add the following class-level annotations:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@JMSDestinationDefinition</span>(name = <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">java:global/jms/pointsQueue</span><span class="delimiter" style="color: #dd1144;">"</span></span>,
interfaceName = <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">javax.jms.Queue</span><span class="delimiter" style="color: #dd1144;">"</span></span>)
<span class="annotation" style="color: #000077;">@Named</span>
<span class="annotation" style="color: #000077;">@RequestScoped</span></code></pre>
</div>
</div>
<div class="paragraph">

This allows the bean to refered from an EL expression. It also activates and passivates the bean with the request.

</div>
<div class="paragraph">

<code style="color: #6d180b;">JMSDestinationDefinition</code> is a new annotation introduced in JMS 2. It is used by the application to provision the required resources and allow an application to be deployed into a Java EE environment with minimal administrative configuration. This code will create Queue with the JNDI name <code style="color: #6d180b;">java:global/jms/pointsQueue</code>.

</div></li>
 	<li>Add the following code to the class:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@Inject</span>
JMSContext context;

<span class="annotation" style="color: #000077;">@Resource</span>(lookup=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">java:global/jms/pointsQueue</span><span class="delimiter" style="color: #dd1144;">"</span></span>)
<span class="predefined-type" style="color: #007744;">Queue</span> pointsQueue;

<span class="directive" style="color: #008888;">public</span> <span class="predefined-type" style="color: #007744;">String</span> receiveMessage() {
    <span class="keyword" style="color: #000000;">try</span> (JMSConsumer consumer = context.createConsumer(pointsQueue)) {
        <span class="predefined-type" style="color: #007744;">String</span> message = consumer.receiveBody(<span class="predefined-type" style="color: #007744;">String</span>.class);
        <span class="predefined-type" style="color: #007744;">System</span>.out.println(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Received message: </span><span class="delimiter" style="color: #dd1144;">"</span></span> + message);
        <span class="keyword" style="color: #000000;">return</span> message;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">

This code creates <code style="color: #6d180b;">JMSConsumer</code> in a try-with-resources block which is then used to synchronously receive a message. Note that <code style="color: #6d180b;">JMSConsumer</code> is created as an auto-managed resource and so is closed automatically after receiving each message. Alternatively asynchronous message delivery can also be setup using Message Driven Beans. However that is not covered in this lab.

</div></li>
 	<li>Add the following method to the class:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="directive" style="color: #008888;">public</span> <span class="type" style="color: #333399;">int</span> getQueueSize() {
    <span class="type" style="color: #333399;">int</span> count = <span class="integer" style="color: #009999;">0</span>;
    <span class="keyword" style="color: #000000;">try</span> {
        QueueBrowser browser = context.createBrowser(pointsQueue);
        <span class="predefined-type" style="color: #007744;">Enumeration</span> elems = browser.getEnumeration();
        <span class="keyword" style="color: #000000;">while</span> (elems.hasMoreElements()) {
            elems.nextElement();
            count++;
        }
    } <span class="keyword" style="color: #000000;">catch</span> (JMSException ex) {
        ex.printStackTrace();
    }
    <span class="keyword" style="color: #000000;">return</span> count;
}</code></pre>
</div>
</div>
<div class="paragraph">

This code creates a <code style="color: #6d180b;">QueueBrowser</code> to look at the messages on a queue without removing them. It calculates and returns the total number of messages in the queue.

</div>
<div class="paragraph">

Make sure to resolve the import from <code style="color: #6d180b;">javax.jms.Queue</code>, take all other defaults.

</div></li>
 	<li>Right-click on ‘Web Pages’, select ‘New’, ‘Folder’, specify the name as ‘points’, and click on ‘Finish’.
<div class="paragraph">

In ‘Web Pages’, right-click on newly created folder, select ‘Facelets Template Client’, give the File Name as ‘points’. Click on ‘Browse’ next to ‘Template:’, expand ‘Web Pages’, ‘WEB-INF’, select ‘template.xhtml’, and click on ‘Select File’. Click on ‘Finish’.

</div></li>
 	<li>In this file, remove <code style="color: #6d180b;">&lt;ui:define&gt;</code> sections where name attribute value is ‘top’ and ‘left’. These sections are inherited from the template.
<div class="paragraph">

Replace the <code style="color: #6d180b;">&lt;ui:define&gt;</code> section with ‘content’ name such that it looks like:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;ui:composition</span> <span class="attribute-name" style="color: #007700;">template</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">../WEB-INF/template.xhtml</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    <span class="tag" style="color: #007700;">&lt;ui:define</span> <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">content</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
        <span class="tag" style="color: #007700;">&lt;h1&gt;</span>Points<span class="tag" style="color: #007700;">&lt;/h1&gt;</span>
        <span class="tag" style="color: #007700;">&lt;h:form&gt;</span>
        Queue size:
            <span class="tag" style="color: #007700;">&lt;h:outputText</span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{receivePointsBean.queueSize}</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span><span class="tag" style="color: #007700;">&lt;p</span><span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;h:inputText</span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{sendPointsBean.message}</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;h:commandButton</span>
                <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Send Message</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">points</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">actionListener</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{sendPointsBean.sendMessage()}</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
        <span class="tag" style="color: #007700;">&lt;/h:form&gt;</span>
        <span class="tag" style="color: #007700;">&lt;h:form&gt;</span>
            <span class="tag" style="color: #007700;">&lt;h:commandButton</span>
                <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Receive Message</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">points</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">actionListener</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{receivePointsBean.receiveMessage()}</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
        <span class="tag" style="color: #007700;">&lt;/h:form&gt;</span>
    <span class="tag" style="color: #007700;">&lt;/ui:define&gt;</span>
<span class="tag" style="color: #007700;">&lt;/ui:composition&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

Click on the yellow bulb to resolve namespace prefix/URI mapping for <code style="color: #6d180b;">h:</code> prefix.

</div>
<div class="paragraph">

This page displays the number of messages in the current queue. It provides a text box for entering the message that can be sent to the queue. The first command button invokes <code style="color: #6d180b;">sendMessage</code> method from <code style="color: #6d180b;">SendPointsBean</code> and refreshes the page. Updated queue count, incremented by 1 in this case, is displayed. The second command button invokes <code style="color: #6d180b;">receiveMessage</code> method from <code style="color: #6d180b;">ReceivePointsBean</code> and refreshes the page. The queue count is updated again, decremented by 1 in this case.

</div>
<div class="paragraph">

If the message does not meet the validation criteria then the error message is displayed on the screen.

</div></li>
 	<li>Add the following code in ‘template.xhtml’ along with other &lt;outputLink&gt;s:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;p</span><span class="tag" style="color: #007700;">/&gt;</span><span class="tag" style="color: #007700;">&lt;h:outputLink</span>
        <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">${facesContext.externalContext.requestContextPath}/faces/points/points.xhtml</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
        Points
    <span class="tag" style="color: #007700;">&lt;/h:outputLink&gt;</span></code></pre>
</div>
</div></li>
 	<li>Run the project. The update page looks like as shown:
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/8.10-output.png" alt="8.10 output" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 39. Points link on main page</div>
</div>
<div class="paragraph">

Click on ‘Points’ to see the output as:

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/8.10-output2.png" alt="8.10 output2" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 40. Points output page</div>
</div>
<div class="paragraph">

The output shows that the queue has 0 messages. Enter a message ‘1212’ in the text box and click on ‘Send Message’ to see the output as shown.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/8.10-output3.png" alt="8.10 output3" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 41. Validation message on Points page</div>
</div>
<div class="paragraph">

This message is not meeting the validation criteria and so the error message is displayed.

</div>
<div class="paragraph">

Enter a message as ‘12,12’ in the text box and click on ‘Send Message’ button to see the output as:

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/8.10-output4.png" alt="8.10 output4" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 42. Correct input for Points page - Send Message (queue size=1)</div>
</div>
<div class="paragraph">

The updated count now shows that there is 1 message in the queue. Click on ‘Receive Message’ button to see output as:

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/8.10-output5.png" alt="8.10 output5" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 43. Correct input for Points page - Receive Message (queue size=0)</div>
</div>
<div class="paragraph">

The updated count now shows that the message has been consumed and the queue has 0 messages.

</div>
<div class="paragraph">

Click on ‘Send Message’ 4 times to see the output as:

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/8.10-output6.png" alt="8.10 output6" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 44. Correct input for Points page - Send Message (queue size=4)</div>
</div>
<div class="paragraph">

The updated count now shows that the queue has 4 messages. Click on ‘Receive Message’ 2 times to see the output as:

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/8.10-output7.png" alt="8.10 output7" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 45. Correct input for Points page - Receive Message (queue size=2)</div>
</div>
<div class="paragraph">

The count is once again updated to reflect the 2 consumed and 2 remaining messages in the queue.

</div></li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="jsf" style="color: #ba3925;">9. Show Booking (JavaServer Faces)</h2>
<div class="sectionbody">
<div class="paragraph">

<strong>Purpose</strong>: Build pages that allow a user to book a particular movie show in a theater. In doing so a new feature of JavaServer Faces 2.2 will be introduced and demonstrated by using in the application.

</div>
<div class="paragraph">

<strong>Estimated Time</strong>: 30-45 mins

</div>
<div class="paragraph">

JavaServer Faces 2.2 introduces a new feature called <em>Faces Flow</em> that provides an encapsulation of related views/pages with application defined entry and exit points. Faces Flow borrows core concepts from ADF TaskFlow, Spring Web Flow, and Apache MyFaces CODI.

</div>
<div class="paragraph">

It introduces <code style="color: #6d180b;">@FlowScoped</code> CDI annotation for flow-local storage and <code style="color: #6d180b;">@FlowDefinition</code> to define the flow using CDI producer methods. There are clearly defined entry and exit points with well-defined parameters. This allows the flow to be packaged together as a JAR or ZIP file and be reused. The application thus becomes a collection of flows and non-flow pages. Usually the objects in a flow are designed to allow the user to accomplish a task that requires input over a number of different views.

</div>
<div class="paragraph">

This application will build a flow that allows the user to make a movie reservation. The flow will contain four pages:

</div>
<div class="ulist">
<ul>
 	<li>Display the list of movies</li>
 	<li>Display the list of available show timings</li>
 	<li>Confirm the choices</li>
 	<li>Make the reservation and show the ticket</li>
</ul>
</div>
<div class="paragraph">

Lets build the application.

</div>
<div class="olist arabic">
<ol class="arabic">
 	<li>Items in a flow are logically related to each other and so it is required to keep them together in a directory. In NetBeans, right-click on the ‘Web Pages’, select ‘New’, ‘Folder’, specify the folder name ‘booking’, and click on ‘Finish’.</li>
 	<li>Right-click on the newly created folder, select ‘New’, ‘Facelets Template Client’, give the File Name as ‘booking’. Click on ‘Browse’ next to ‘Template:’, expand ‘Web Pages’, ‘WEB-INF’, select ‘template.xhtml’, and click on ‘Select File’. Click on ‘Finish’.</li>
 	<li>‘booking.xhtml’ is the entry point to the flow (more on this later).
<div class="paragraph">

In this file, remove <code style="color: #6d180b;">&lt;ui:define&gt;</code> sections with ‘top’ and ‘left’ name attributes. These sections are inherited from the template.

</div>
<div class="paragraph">

Replace <code style="color: #6d180b;">&lt;ui:define&gt;</code> section with ‘content’ name such that it looks like:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;ui:composition</span> <span class="attribute-name" style="color: #007700;">template</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">../WEB-INF/template.xhtml</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    <span class="tag" style="color: #007700;">&lt;ui:define</span> <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">content</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
        <span class="tag" style="color: #007700;">&lt;h2&gt;</span>Pick a movie<span class="tag" style="color: #007700;">&lt;/h2&gt;</span>
        <span class="tag" style="color: #007700;">&lt;h:form</span> <span class="attribute-name" style="color: #007700;">prependId</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">false</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
            <span class="tag" style="color: #007700;">&lt;h:selectOneRadio</span>
                <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{booking.movieId}</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">layout</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">pageDirection</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                <span class="attribute-name" style="color: #007700;">required</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">true</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
                <span class="tag" style="color: #007700;">&lt;f:selectItems</span>
                    <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{movieFacadeREST.all}</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                    <span class="attribute-name" style="color: #007700;">var</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">m</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                    <span class="attribute-name" style="color: #007700;">itemValue</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{m.id}</span><span class="delimiter" style="color: #dd1144;">"</span></span>
                    <span class="attribute-name" style="color: #007700;">itemLabel</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{m.name}</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;/h:selectOneRadio&gt;</span>
            <span class="tag" style="color: #007700;">&lt;h:commandButton</span> <span class="attribute-name" style="color: #007700;">id</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">shows</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Pick a time</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">showtimes</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="tag" style="color: #007700;">/&gt;</span>
        <span class="tag" style="color: #007700;">&lt;/h:form&gt;</span>
    <span class="tag" style="color: #007700;">&lt;/ui:define&gt;</span>
<span class="tag" style="color: #007700;">&lt;/ui:composition&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

The code builds an HTML form that displays the list of movies as radio button choices. The chosen movie is bound to <code style="color: #6d180b;">#{booking.movieId}</code> which will be defined as a flow-scoped bean. The value of action attribute on commandButton refers to the next view in the flow, i.e. ‘showtimes.xhtml’ in the same directory in our case.

</div>
<div class="paragraph">

Click on the yellow bulb as shown and click on the suggestion to add namespace prefix/URI mapping for <code style="color: #6d180b;">h:</code>. Repeat the same for <code style="color: #6d180b;">f:</code> prefix as well.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/9.3-imports.png" alt="9.3 imports" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 46. Namespace prefix mapping imports</div>
</div></li>
 	<li>Right-click on ‘Source Packages’, select ‘New’, ‘Java Class’. Specify the class name as ‘Booking’ and the package name as ‘org.javaee7.movieplex7.booking’.
<div class="paragraph">

Add <code style="color: #6d180b;">@Named</code> class-level annotation to make the class EL-injectable.

</div>
<div class="paragraph">

Add <code style="color: #6d180b;">@FlowScoped("booking")</code> to define the scope of bean as the flow. The bean is automatically activated and passivated as the flow is entered or exited.

</div>
<div class="paragraph">

Add <code style="color: #6d180b;">implements Serializable</code> to the class as beans with <code style="color: #6d180b;">@FlowScoped</code> annotation need to be passivation capable, and thus serializable.

</div>
<div class="paragraph">

Add the following field:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="type" style="color: #333399;">int</span> movieId;</code></pre>
</div>
</div>
<div class="paragraph">

and generate getters/setters by going to ‘Source’, ‘Insert Code’, selecting ‘Getter and Setter’, and select the field.

</div>
<div class="paragraph">

Inject <code style="color: #6d180b;">EntityManager</code> in this class by adding the following code:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@PersistenceContext</span>
EntityManager em;</code></pre>
</div>
</div>
<div class="paragraph">

Add the following convenience method:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="directive" style="color: #008888;">public</span> <span class="predefined-type" style="color: #007744;">String</span> getMovieName() {
    <span class="keyword" style="color: #000000;">try</span> {
        <span class="keyword" style="color: #000000;">return</span> em.createNamedQuery(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Movie.findById</span><span class="delimiter" style="color: #dd1144;">"</span></span>, Movie.class)
                  .setParameter(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">id</span><span class="delimiter" style="color: #dd1144;">"</span></span>, movieId)
                  .getSingleResult()
                  .getName();
    } <span class="keyword" style="color: #000000;">catch</span> (NoResultException e) {
        <span class="keyword" style="color: #000000;">return</span> <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="delimiter" style="color: #dd1144;">"</span></span>;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">

This method will return the movie name based upon the selected movie.

</div>
<div class="paragraph">

Alternatively, movie id and name may be passed from the selected radio button and parsed in the backing bean. This will reduce an extra trip to the database.

</div>
<div class="paragraph">

Resolve the imports.

</div></li>
 	<li>Create ‘showtimes.xhtml’ in the ‘booking’ folder following the steps used to create ‘booking.xhtml’.
<div class="paragraph">

In this file, remove <code style="color: #6d180b;">&lt;ui:define&gt;</code> sections with ‘top’ and ‘left’ name attributes. These sections are inherited from the template.

</div>
<div class="paragraph">

Replace <code style="color: #6d180b;">&lt;ui:define&gt;</code> section with ‘content’ name such that it looks like:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;ui:composition</span> <span class="attribute-name" style="color: #007700;">template</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">../WEB-INF/template.xhtml</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    <span class="tag" style="color: #007700;">&lt;ui:define</span> <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">content</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
        <span class="tag" style="color: #007700;">&lt;h2&gt;</span>Show Timings for <span class="tag" style="color: #007700;">&lt;font</span> <span class="attribute-name" style="color: #007700;">color</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">red</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>#{booking.movieName}<span class="tag" style="color: #007700;">&lt;/font&gt;</span><span class="tag" style="color: #007700;">&lt;/h2&gt;</span>
        <span class="tag" style="color: #007700;">&lt;h:form&gt;</span>
            <span class="tag" style="color: #007700;">&lt;h:selectOneRadio</span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{booking.startTime}</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">layout</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">pageDirection</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">required</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">true</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
                <span class="tag" style="color: #007700;">&lt;c:forEach</span> <span class="attribute-name" style="color: #007700;">items</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{timeslotFacadeREST.all}</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">var</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">s</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
                    <span class="tag" style="color: #007700;">&lt;f:selectItem</span> <span class="attribute-name" style="color: #007700;">itemValue</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{s.id},#{s.startTime}</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">itemLabel</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{s.startTime}</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
                <span class="tag" style="color: #007700;">&lt;/c:forEach&gt;</span>
            <span class="tag" style="color: #007700;">&lt;/h:selectOneRadio&gt;</span>
            <span class="tag" style="color: #007700;">&lt;h:commandButton</span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Confirm</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">confirm</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;h:commandButton</span> <span class="attribute-name" style="color: #007700;">id</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">back</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Back</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">booking</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">immediate</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">true</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
        <span class="tag" style="color: #007700;">&lt;/h:form&gt;</span>
    <span class="tag" style="color: #007700;">&lt;/ui:define&gt;</span>
<span class="tag" style="color: #007700;">&lt;/ui:composition&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

This code builds an HTML form that displays the chosen movie name and all the show times. <code style="color: #6d180b;">#{timeslotFacadeREST.all}</code> returns the list of all the movies and iterates over them using a <code style="color: #6d180b;">c:forEach</code> loop. The id and start time of the selected show are bound to <code style="color: #6d180b;">#{booking.startTime}</code>. Command button with value ‘Back’ allows going back to the previous page and the other command button with value ‘Confirm’ takes to the next view in the flow, ‘confirm.xhtml’ in our case.

</div>
<div class="paragraph">

Typically a user will expect the show times only for the selected movie but all the show times are shown here. This allows us to demonstrate going back and forth within a flow if an incorrect show time for a movie is chosen. A different query may be written that displays only the shows available for this movie; however this is not part of the application.

</div>
<div class="paragraph">

Right-click on the yellow bulb to fix namespace prefix/URI mapping for <code style="color: #6d180b;">h:</code>. This needs to be repeated for <code style="color: #6d180b;">c:</code> and <code style="color: #6d180b;">f:</code> prefix as well.

</div></li>
 	<li>Add the following fields to the <code style="color: #6d180b;">Booking</code> class:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="predefined-type" style="color: #007744;">String</span> startTime;
<span class="type" style="color: #333399;">int</span> startTimeId;</code></pre>
</div>
</div>
<div class="paragraph">

And the following methods:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="directive" style="color: #008888;">public</span> <span class="predefined-type" style="color: #007744;">String</span> getStartTime() {
    <span class="keyword" style="color: #000000;">return</span> startTime;
}

<span class="directive" style="color: #008888;">public</span> <span class="type" style="color: #333399;">void</span> setStartTime(<span class="predefined-type" style="color: #007744;">String</span> startTime) {
    <span class="predefined-type" style="color: #007744;">StringTokenizer</span> tokens = <span class="keyword" style="color: #000000;">new</span> <span class="predefined-type" style="color: #007744;">StringTokenizer</span>(startTime, <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">,</span><span class="delimiter" style="color: #dd1144;">"</span></span>);
    startTimeId = <span class="predefined-type" style="color: #007744;">Integer</span>.parseInt(tokens.nextToken());
    <span class="local-variable" style="color: #996633;">this</span>.startTime = tokens.nextToken();
}

<span class="directive" style="color: #008888;">public</span> <span class="type" style="color: #333399;">int</span> getStartTimeId() {
    <span class="keyword" style="color: #000000;">return</span> startTimeId;
}</code></pre>
</div>
</div>
<div class="paragraph">

These methods will parse the values received from the form. Also add the following method:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="directive" style="color: #008888;">public</span> <span class="predefined-type" style="color: #007744;">String</span> getTheater() {
    <span class="comment" style="font-style: italic; color: #999999;">// for a movie and show</span>
    <span class="keyword" style="color: #000000;">try</span> {

        <span class="comment" style="font-style: italic; color: #999999;">// Always return the first theater</span>
        <span class="predefined-type" style="color: #007744;">List</span>&lt;ShowTiming&gt; list =
            em.createNamedQuery(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">ShowTiming.findByMovieAndTimingId</span><span class="delimiter" style="color: #dd1144;">"</span></span>,
                ShowTiming.class)
                .setParameter(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">movieId</span><span class="delimiter" style="color: #dd1144;">"</span></span>, movieId)
                .setParameter(<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">timingId</span><span class="delimiter" style="color: #dd1144;">"</span></span>, startTimeId)
                .getResultList();

        <span class="keyword" style="color: #000000;">if</span> (list.isEmpty())
            <span class="keyword" style="color: #000000;">return</span> <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">none</span><span class="delimiter" style="color: #dd1144;">"</span></span>;

        <span class="keyword" style="color: #000000;">return</span> list
                .get(<span class="integer" style="color: #009999;">0</span>)
                .getTheaterId()
                .getId()
                .toString();
    } <span class="keyword" style="color: #000000;">catch</span> (NoResultException e) {
        <span class="keyword" style="color: #000000;">return</span> <span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">none</span><span class="delimiter" style="color: #dd1144;">"</span></span>;
    }
}</code></pre>
</div>
</div>
<div class="paragraph">

This method will find the first theater available for the chosen movie and show the timing.

</div>
<div class="paragraph">

Additionally a list of theaters offering that movie may be shown in a separate page.

</div>
<div class="paragraph">

Resolve the imports.

</div></li>
 	<li>Create ‘confirm.xhtml’ page in the ‘booking’ folder by following the steps used to create ‘booking.xhtml’.
<div class="paragraph">

In this file, remove <code style="color: #6d180b;">&lt;ui:define&gt;</code> sections wht ‘top’ and ‘left’ name attributes. These sections are inherited from the template.

</div>
<div class="paragraph">

Replace ‘&lt;ui:define&gt;’ section with ‘content’ name such that it looks like:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;ui:composition</span> <span class="attribute-name" style="color: #007700;">template</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">../WEB-INF/template.xhtml</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    <span class="tag" style="color: #007700;">&lt;ui:define</span> <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">content</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
        <span class="tag" style="color: #007700;">&lt;c:choose&gt;</span>
            <span class="tag" style="color: #007700;">&lt;c:when</span> <span class="attribute-name" style="color: #007700;">test</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">#{booking.theater == 'none'}</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
                <span class="tag" style="color: #007700;">&lt;h2&gt;</span>No theater found, choose a different time<span class="tag" style="color: #007700;">&lt;/h2&gt;</span>
                <span class="tag" style="color: #007700;">&lt;h:form&gt;</span>
                    Movie name: #{booking.movieName}<span class="tag" style="color: #007700;">&lt;p</span><span class="tag" style="color: #007700;">/&gt;</span>
                    Starts at: #{booking.startTime}<span class="tag" style="color: #007700;">&lt;p</span><span class="tag" style="color: #007700;">/&gt;</span>
                    <span class="tag" style="color: #007700;">&lt;h:commandButton</span> <span class="attribute-name" style="color: #007700;">id</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">back</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Back</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">showtimes</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
                <span class="tag" style="color: #007700;">&lt;/h:form&gt;</span>
            <span class="tag" style="color: #007700;">&lt;/c:when&gt;</span>
            <span class="tag" style="color: #007700;">&lt;c:otherwise&gt;</span>
                <span class="tag" style="color: #007700;">&lt;h2&gt;</span>Confirm ?<span class="tag" style="color: #007700;">&lt;/h2&gt;</span>
                <span class="tag" style="color: #007700;">&lt;h:form&gt;</span>
                    Movie name: #{booking.movieName}<span class="tag" style="color: #007700;">&lt;p</span><span class="tag" style="color: #007700;">/&gt;</span>
                    Starts at: #{booking.startTime}<span class="tag" style="color: #007700;">&lt;p</span><span class="tag" style="color: #007700;">/&gt;</span>
                    Theater: #{booking.theater}<span class="tag" style="color: #007700;">&lt;p</span><span class="tag" style="color: #007700;">/&gt;</span>
                    <span class="tag" style="color: #007700;">&lt;h:commandButton</span> <span class="attribute-name" style="color: #007700;">id</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">next</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Book</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">print</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
                    <span class="tag" style="color: #007700;">&lt;h:commandButton</span> <span class="attribute-name" style="color: #007700;">id</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">back</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">Back</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">showtimes</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">/&gt;</span>
                <span class="tag" style="color: #007700;">&lt;/h:form&gt;</span>
            <span class="tag" style="color: #007700;">&lt;/c:otherwise&gt;</span>
        <span class="tag" style="color: #007700;">&lt;/c:choose&gt;</span>
    <span class="tag" style="color: #007700;">&lt;/ui:define&gt;</span>
<span class="tag" style="color: #007700;">&lt;/ui:composition&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

The code displays the selected movie, show timing, and theater if available. The reservation can proceed if all three are available. ‘print.xhtml’ is the last page that shows the confirmed reservation and is shown when ‘Book’ commandButton is clicked.

</div>
<div class="paragraph">

<code style="color: #6d180b;">actionListener</code> can be added to <code style="color: #6d180b;">commandButton</code> to invoke the business logic for making the reservation. Additional pages may be added to take the credit card details and email address.

</div>
<div class="paragraph">

Right-click on the yellow bulb to fix namespace prefix/URI mapping for ‘c:’. This needs to be repeated for ‘h:’ prefix as well.

</div></li>
 	<li>Create ‘print.xhtml’ page in the ‘booking’ folder by following the steps used to create ‘booking.xhtml’.
<div class="paragraph">

In this file, remove <code style="color: #6d180b;">&lt;ui:define&gt;</code> sections wht ‘top’ and ‘left’ name attributes. These sections are inherited from the template.

</div>
<div class="paragraph">

Replace <code style="color: #6d180b;">&lt;ui:define&gt;</code> section with ‘content’ name such that it looks like:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;ui:composition</span> <span class="attribute-name" style="color: #007700;">template</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">../WEB-INF/template.xhtml</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    <span class="tag" style="color: #007700;">&lt;ui:define</span> <span class="attribute-name" style="color: #007700;">name</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">content</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
        <span class="tag" style="color: #007700;">&lt;h2&gt;</span>Reservation Confirmed<span class="tag" style="color: #007700;">&lt;/h2&gt;</span>
        <span class="tag" style="color: #007700;">&lt;h:form&gt;</span>
            Movie name: #{booking.movieName}<span class="tag" style="color: #007700;">&lt;p</span><span class="tag" style="color: #007700;">/&gt;</span>
            Starts at: #{booking.startTime}<span class="tag" style="color: #007700;">&lt;p</span><span class="tag" style="color: #007700;">/&gt;</span>
            Theater: #{booking.theater}<span class="tag" style="color: #007700;">&lt;p</span><span class="tag" style="color: #007700;">/&gt;</span>
            <span class="tag" style="color: #007700;">&lt;h:commandButton</span> <span class="attribute-name" style="color: #007700;">id</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">home</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">value</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">home</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">goHome</span><span class="delimiter" style="color: #dd1144;">"</span></span> <span class="tag" style="color: #007700;">/&gt;</span><span class="tag" style="color: #007700;">&lt;p</span><span class="tag" style="color: #007700;">/&gt;</span>
        <span class="tag" style="color: #007700;">&lt;/h:form&gt;</span>
    <span class="tag" style="color: #007700;">&lt;/ui:define&gt;</span>
<span class="tag" style="color: #007700;">&lt;/ui:composition&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

This code displays the movie name, show timings, and the selected theater.

</div>
<div class="paragraph">

Right-click on the yellow bulb to fix namespace prefix/URI mapping for ‘h:’.

</div>
<div class="paragraph">

The <code style="color: #6d180b;">commandButton</code> initiates exit from the flow. The <code style="color: #6d180b;">action</code> attribute defines a navigation rule that will be defined in the next step.

</div></li>
 	<li>‘booking.xhtml’, ‘showtimes.xhtml’, ‘confirm.xhtml’, and ‘print.xhtml’ are all in the same directory. Now the runtime needs to be informed that the views in this directory are to be treated as view nodes in a flow. This can be done declaratively by adding ‘booking/booking-flow.xml’ or programmatically by having a class with a method with the following annotations:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="java language-java" style="color: inherit;"><span class="annotation" style="color: #000077;">@Produces</span> <span class="annotation" style="color: #000077;">@FlowDefinition</span></code></pre>
</div>
</div>
<div class="paragraph">

This lab takes the declarative approach.

</div>
<div class="paragraph">

Right-click on ‘Web Pages/booking’ folder, select ‘New’, ‘Other’, ‘XML’, ‘XML Document’, give the name as ‘booking-flow’, click on ‘Next&gt;’, take the default of ‘Well-formed Document’, and click on ‘Finish’.

</div>
<div class="paragraph">

Replace the generated code with the following:

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;faces-config</span>
    <span class="attribute-name" style="color: #007700;">version</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">2.2</span><span class="delimiter" style="color: #dd1144;">"</span></span>
    <span class="attribute-name" style="color: #007700;">xmlns</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">http://xmlns.jcp.org/xml/ns/javaee</span><span class="delimiter" style="color: #dd1144;">"</span></span>
    <span class="attribute-name" style="color: #007700;">xmlns:xsi</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">http://www.w3.org/2001/XMLSchema-instance</span><span class="delimiter" style="color: #dd1144;">"</span></span>
    <span class="attribute-name" style="color: #007700;">xsi:schemaLocation</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">http://xmlns.jcp.org/xml/ns/javaee</span>
        <span class="content" style="color: #dd1144;">http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
    <span class="tag" style="color: #007700;">&lt;flow-definition</span> <span class="attribute-name" style="color: #007700;">id</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">booking</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
        <span class="tag" style="color: #007700;">&lt;flow-return</span> <span class="attribute-name" style="color: #007700;">id</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">goHome</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>
        <span class="tag" style="color: #007700;">&lt;from-outcome&gt;</span>/index<span class="tag" style="color: #007700;">&lt;/from-outcome&gt;</span>
        <span class="tag" style="color: #007700;">&lt;/flow-return&gt;</span>
    <span class="tag" style="color: #007700;">&lt;/flow-definition&gt;</span>
<span class="tag" style="color: #007700;">&lt;/faces-config&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

This defines the flow graph. It uses the parent element used in a standard <code style="color: #6d180b;">faces-config.xml</code> but defines a <code style="color: #6d180b;">&lt;flow-definition&gt;</code>inside it.

</div>
<div class="paragraph">

<code style="color: #6d180b;">&lt;flow-return&gt;</code> defines a return node in a flow graph. <code style="color: #6d180b;">&lt;from-outcome&gt;</code> contains the node value, or an EL expression that defines the node, to return to. In this case, the navigation returns to the home page.

</div></li>
 	<li>Finally, invoke the flow by editing ‘WEB-INF/template.xhtml’ and changing:
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;h:commandLink</span> <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">item1</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>Item 1<span class="tag" style="color: #007700;">&lt;/h:commandLink&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

to

</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay" style="color: inherit;"><code class="xml language-xml" style="color: inherit;"><span class="tag" style="color: #007700;">&lt;h:commandLink</span> <span class="attribute-name" style="color: #007700;">action</span>=<span class="string" style="color: #dd2200;"><span class="delimiter" style="color: #dd1144;">"</span><span class="content" style="color: #dd1144;">booking</span><span class="delimiter" style="color: #dd1144;">"</span></span><span class="tag" style="color: #007700;">&gt;</span>Book a movie<span class="tag" style="color: #007700;">&lt;/h:commandLink&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">

<code style="color: #6d180b;">commandLink</code> renders an HTML anchor tag that behaves like a form submit button. The action attribute points to the directory where all views for the flow are stored. This directory already contains ‘booking-flow.xml’ which defines the flow of the pages.

</div></li>
 	<li>Run the project by right clicking on the project and selecting ‘Run’. The browser shows the updated output.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/9.11-output.png" alt="9.11 output" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 47. Book a movie link on main page</div>
</div>
<div class="paragraph">

Click on ‘Book a movie’ to see the page as shown.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/9.11-output2.png" alt="9.11 output2" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 48. Book a movie page</div>
</div>
<div class="paragraph">

Select a movie, say ‘The Shiningr and click on `Pick a time’ to see the page output as shown.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/9.11-output3.png" alt="9.11 output3" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 49. Show Timings page</div>
</div>
<div class="paragraph">

Pick a time slot, say ‘04:00’, click on ‘Confirm’ to see the output as shown.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/9.11-output4.png" alt="9.11 output4" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 50. Confirm? page</div>
</div>
<div class="paragraph">

Click on ‘Book’ to confirm and see the output as:

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/9.11-output5.png" alt="9.11 output5" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 51. Reservation Confirmed page</div>
</div>
<div class="paragraph">

Feel free to enter other combinations, go back and forth in the flow and notice how the values in the bean are preserved.

</div>
<div class="paragraph">

Click on ‘home’ takes to the main application page.

</div></li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion" style="color: #ba3925;">10. Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">

This hands-on lab built a trivial 3-tier web application using Java EE 7 and demonstrated the following features of the platform:

</div>
<div class="olist arabic">
<ol class="arabic">
 	<li>Java EE 7 Platform
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
 	<li>Maven coordinates</li>
 	<li>Default DataSource</li>
 	<li>Default JMSConnectionFactory</li>
</ol>
</div></li>
 	<li>Java API for WebSocket 1.0
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
 	<li>Annotated server endpoint</li>
 	<li>JavaScript client</li>
</ol>
</div></li>
 	<li>Batch Applications for the Java Platform 1.0
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
 	<li>Chunk-style processing</li>
 	<li>Exception handling</li>
</ol>
</div></li>
 	<li>Java API for JSON Processing 1.0
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
 	<li>Streaming API for generating JSON</li>
 	<li>Streaming API for consuming JSON</li>
</ol>
</div></li>
 	<li>Java API for RESTful Web Services 2.0
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
 	<li>Client API</li>
 	<li>Custom Entity Providers</li>
</ol>
</div></li>
 	<li>Java Message Service 2.0
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
 	<li>Default ConnectionFactory</li>
 	<li>Injecting JMSContext</li>
 	<li>Synchronous message send and receive</li>
</ol>
</div></li>
 	<li>Contexts and Dependency Injection 1.1
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
 	<li>Automatic discovery of beans</li>
 	<li>Injection of beans</li>
</ol>
</div></li>
 	<li>JavaServer Faces 2.2
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
 	<li>Faces Flow</li>
</ol>
</div></li>
 	<li>Bean Validation 1.1
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
 	<li>Integration with JavaServer Faces</li>
</ol>
</div></li>
 	<li>Java Transaction API 1.2
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
 	<li>@Transactional</li>
</ol>
</div></li>
 	<li>Java Persistence API 2.1
<div class="olist loweralpha">
<ol class="loweralpha" type="a">
 	<li>Schema generation properties</li>
</ol>
</div></li>
</ol>
</div>
<div class="paragraph">

&nbsp;

</div>
</div>
</div>
<div class="sect1">
<h2 id="_troubleshooting" style="color: #ba3925;">11. Troubleshooting</h2>
<div class="sectionbody">
<div class="qlist qanda">
<ol>
 	<li><em style="color: #00467f;">How can I start/stop/restart the application server from within the IDE ? </em>In the ‘Services’ tab, right-click on ‘WildFly 8’. All the commands to start, stop, and restart are available from the pop-up menu.</li>
 	<li><em style="color: #00467f;">I accidentally closed the output log window. How do I bring it back ? </em>In “Services” tab of NetBeans, expand ‘Servers’, choose the application server node, and select ‘View Server Log’.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/11-wildfly-server-log.png" alt="11 wildfly server log" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 52. View WildFly server log in NetBeans</div>
</div>
<div class="paragraph">

In addition, the web-based administration console can be seen by clicking on ‘View Admin Console’.

</div></li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_acknowledgements" style="color: #ba3925;">12. Acknowledgements</h2>
</div>
<div class="sect1">
<h2 id="_completed_solutions" style="color: #ba3925;">13. Completed Solutions</h2>
<div class="sectionbody">
<div class="paragraph">

The completed solution for this lab can be downloaded from <a style="color: #005498;" href="https://github.com/roryp/javaee7-hol/blob/master/solution/movieplex7-solution.zip">javaee7-hol</a>.

</div>
</div>
</div>
<div class="sect1">
<h2 id="_todo" style="color: #ba3925;">14. TODO</h2>
</div>
<div class="sect1">
<h2 id="_revision_history" style="color: #ba3925;">15. Revision History</h2>
</div>
<div class="sect1">
<h2 id="_appendix" style="color: #ba3925;">16. Appendix A: Appendix</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="appendix-wildfly-netbeans" style="color: #ba3925;">16.1. Configure WildFly 8 in NetBeans</h3>
<div class="sect3">
<h4 id="install-wildfly-plugin" style="color: #ba3925;">16.1.1. Install WildFly plugin</h4>
<div class="olist arabic">
<ol class="arabic">
 	<li>In NetBeans, click on ‘Tools’, ‘Plugins’, ‘Available Plugins’, type “wildfly” in ‘Search:’ box, and select the plugin by clicking on the checkbox in ‘Install’ column.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/16-netbeans-available-plugins-wildfly.png" alt="16 netbeans available plugins wildfly" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 53. Available Plugins in NetBeans</div>
</div>
<div class="paragraph">

The exact plugin version and the date may be different.

</div></li>
 	<li>Click the <b class="button">Install</b> button, then <b class="button">Next &gt;</b>, accept the license agreement by clicking on the checkbox, then click the <b class="button">Install</b> button to install the plugin. Click the <b class="button">Finish</b> button to restart the IDE and complete installation.</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="_configure_wildfly_8" style="color: #ba3925;">16.1.2. Configure WildFly 8</h4>
<div class="olist arabic">
<ol class="arabic">
 	<li>In NetBeans, click on ‘Services’ tab.</li>
 	<li>Right-click on Servers, choose ‘Add Server…’ in the pop-up menu.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/netbeans-addserver.png" alt="netbeans addserver" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 54. Add Server in NetBeans</div>
</div></li>
 	<li>Select ‘WildFly Application Server’ in the Add Server Instance wizard, set the name to ‘WildFly 8’ and click <b class="button">Next &gt;</b>.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/16-netbeans-add-instance-wildfly.png" alt="16 netbeans add instance wildfly" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 55. Add WildFly instance to NetBeans</div>
</div></li>
 	<li>Click on <b class="button">Browse…</b> for ‘Server Location’ and select the directory that got created when WildFly archive was unzipped. Click on <b class="button">Browse…</b> for ‘Server Configuration’ and select the ‘standalone/configuration/standalone-full.xml’ file in the unzipped WildFly archive.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/16-netbeans-wildfly-full-platform.png" alt="16 netbeans wildfly full platform" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 56. Configure WildFly full instance in NetBeans</div>
</div>
<div class="paragraph">

Click on <b class="button">Next</b> and then <b class="button">Finish</b>. The ‘Services’ should show the WildFly instance.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/16-netbeans-wildfly-server.png" alt="16 netbeans wildfly server" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 57. WildFly instance in NetBeans Services tab</div>
</div></li>
</ol>
</div>
</div>
</div>
<div class="sect2">
<h3 id="appendix-wildfly-idea" style="color: #ba3925;">16.2. Prepare IntelliJ IDEA for working with WildFly 8</h3>
<div class="paragraph">

To be able to perform the exercises discussed in this tutorial, you need the Ultimate Edition of IntelliJ IDEA. Keep that in mind when downloading IntelliJ IDEA from <a style="color: #005498;" href="http://www.jetbrains.com/idea/download/">http://www.jetbrains.com/idea/download/</a>.

</div>
<div class="paragraph">

When the appropriate edition of IntelliJ IDEA is installed, you can start preparing the IDE for the exercises:

</div>
<div class="olist arabic">
<ol class="arabic">
 	<li><a style="color: #005498;" href="#specify-jdk-wildfly-idea">Specify the JDK</a></li>
 	<li><a style="color: #005498;" href="#define-wildfly-idea">Define WildFly</a></li>
 	<li><a style="color: #005498;" href="#create-project-wildfly-idea">Create a project</a></li>
 	<li><a style="color: #005498;" href="#create-run-config-wildfly-idea">Create a run/debug configuration</a></li>
 	<li><a style="color: #005498;" href="#run-app-wildfly-idea">Run the application</a></li>
</ol>
</div>
<div class="sect3">
<h4 id="specify-jdk-wildfly-idea" style="color: #ba3925;">16.2.1. Specify the JDK</h4>
<div class="paragraph">

First of all, you should specify the JDK that you are going to use. In IntelliJ IDEA, this is done in the <strong>Project Structure</strong> dialog:

</div>
<div class="olist arabic">
<ol class="arabic">
 	<li>Start IntelliJ IDEA. If, as a result, a project opens, close the project (<span class="menuseq" style="color: #090909;"><span class="menu">File</span> ▸ <span class="menuitem">Close Project</span></span>).</li>
 	<li>On the Welcome screen, under <strong>Quick Start</strong>, click <strong>Configure</strong>.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-welcome-configure.png" alt="i13 welcome configure" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 58. Welcome to IntelliJ IDEA</div>
</div></li>
 	<li>Under <strong>Configure</strong>, click <strong>Project Defaults</strong>, and then, under <strong>Project Defaults</strong>, click <strong>Project Structure</strong>.</li>
 	<li>In the left-hand pane of the <strong>Project Structure</strong> dialog, under <strong>Platform Settings</strong>, select <strong>SDKs</strong>. Click <span class="image"><img title="Plus icon in IntelliJ IDEA" src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-plus-icon.png" alt="i13-plus-icon" /></span> and select <strong>JDK</strong>.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-plus-jdk.png" alt="i13 plus jdk" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 59. Add JDK in IntelliJ IDEA</div>
</div></li>
 	<li>In the <strong>Select Home Directory for JDK</strong> dialog, select the folder in which the JDK that you are going to use is installed, and click <b class="button">OK</b>.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-jdk-home.png" alt="i13 jdk home" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 60. JDK home in IntelliJ IDEA</div>
</div></li>
 	<li>In the <strong>Project Structure</strong> dialog, click <b class="button">Apply</b>.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-jdk-defined.png" alt="i13 jdk defined" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 61. JDK defined in IntelliJ IDEA</div>
</div>
<div class="paragraph">

Now, let’s make the JDK that we have specified the default SDK.

</div></li>
 	<li>In the left-hand pane, under <strong>Project Settings</strong>, select <strong>Project</strong>. In the right-hand part of the dialog, under <strong>Project SDK</strong>, select the JDK from the list.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-project-sdk.png" alt="i13 project sdk" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 62. Project SDK in IntelliJ IDEA</div>
</div></li>
 	<li>Click <b class="button">OK</b>.</li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="define-wildfly-idea" style="color: #ba3925;">16.2.2. Define WildFly</h4>
<div class="paragraph">

Defining an application server in IntelliJ IDEA, normally, is just telling the IDE where the server is installed. The servers are defined in the <strong>Settings</strong> dialog. (On OSX, this dialog is called <strong>Preferences</strong>.)

</div>
<div class="olist arabic">
<ol class="arabic">
 	<li>On the Welcome screen, to the left of <strong>Project Defaults</strong>, click <strong>Back</strong> <span class="image"><img title="Back icon in IntelliJ IDEA" src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-back-icon.png" alt="i13-back-icon" /></span>.</li>
 	<li>Under <strong>Configure</strong>, click <strong>Settings</strong>.</li>
 	<li>In the left-hand pane of the <strong>Settings</strong> (<strong>Preferences</strong>) dialog, under <strong>IDE Settings</strong>, select <strong>Application Servers</strong>. On the <strong>Application Servers</strong> page, click <span class="image"><img title="Plus icon in IntelliJ IDEA" src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-plus-icon.png" alt="i13-plus-icon" /></span> and select <strong>JBoss Server</strong>. (WildFly is a server from the "JBoss family".)
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-plus-jboss.png" alt="i13 plus jboss" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 63. Add WildFly in IntelliJ IDEA</div>
</div></li>
 	<li>In the <strong>JBoss Server</strong> dialog, click <span class="image"><img title="Ellipsis button in IntelliJ IDEA" src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-ellipsis-button.png" alt="i13-ellipsis-button" /></span> to the right of the <strong>JBoss Home</strong> field.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-jboss-server-dialog-initial.png" alt="i13 jboss server dialog initial" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 64. WildFly server dialog in IntelliJ IDEA</div>
</div></li>
 	<li>In the <strong>JBoss Home Directory</strong> dialog, select the folder in which you have the WildFly server installed, and click <b class="button">OK</b>.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-jboss-home-directory.png" alt="i13 jboss home directory" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 65. WildFly home in IntelliJ IDEA</div>
</div></li>
 	<li>Click <strong>OK</strong> in the <strong>JBoss Server</strong> dialog.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-jboss-server-dialog-final.png" alt="i13 jboss server dialog final" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 66. WildFly final dialog in IntelliJ IDEA</div>
</div></li>
 	<li>In the <strong>Settings</strong> (<strong>Preferences</strong>) dialog, click <b class="button">OK</b>.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-jboss-defined.png" alt="i13 jboss defined" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 67. WildFly defined in IntelliJ IDEA</div>
</div></li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="create-project-wildfly-idea" style="color: #ba3925;">16.2.3. Create a project</h4>
<div class="paragraph">

The sample application is supplied as a Maven project with an associated <a style="color: #005498;" href="http://maven.apache.org/pom.html">pom.xml</a> file that contains all the necessary project definitions. The corresponding IntelliJ IDEA project in such a case can be created by simply "opening" the <code style="color: #6d180b;">pom.xml</code> file. (Obviously, this isn’t the only way to create projects in IDEA. You can create projects for existing collections of source files, import Eclipse and Flash Builder projects, and Gradle build scripts. Finally, you can create projects from scratch.)

</div>
<div class="olist arabic">
<ol class="arabic">
 	<li>On the Welcome screen, to the left of <strong>Configure</strong>, click <strong>Back</strong> <span class="image"><img title="Back icon in IntelliJ IDEA" src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-back-icon.png" alt="i13-back-icon" /></span>.</li>
 	<li>Under <strong>Quick Start</strong>, click <strong>Open Project</strong>.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-open-project.png" alt="i13 open project" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 68. Open project in IntelliJ IDEA</div>
</div></li>
 	<li>In the <strong>Open Project</strong> dialog, select the <code style="color: #6d180b;">pom.xml</code> file associated with the sample application, and click <b class="button">OK</b>.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-select-pom.png" alt="i13 select pom" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 69. Select pom in IntelliJ IDEA</div>
</div>
<div class="paragraph">

Wait while IntelliJ IDEA is processing <code style="color: #6d180b;">pom.xml</code> and creating the project. When this process is complete, the following message is shown:

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-jpa-detected.png" alt="i13 jpa detected" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 70. Configure JPA in IntelliJ IDEA</div>
</div></li>
 	<li>Click <strong>Configure</strong> in the message box. (If by now the message has disappeared, click <span class="image"><img title="Mark icon in IntelliJ IDEA" src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-exclamation-mark-icon.png" alt="i13-exclamation-mark-icon" /></span> on the Status bar.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-jpa-detected-status-bar.png" alt="i13 jpa detected status bar" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 71. JPA detected in status bar in IntelliJ IDEA</div>
</div>
<div class="paragraph">

The <strong>Event Log</strong> tool window will open. Click <strong>Configure</strong> in this window.)

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-jpa-detected-event-log.png" alt="i13 jpa detected event log" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 72. JPA detected event log in IntelliJ IDEA</div>
</div></li>
 	<li>In the <strong>Setup Frameworks</strong> dialog, just click <b class="button">OK</b>. (By doing so you confirm that the file <code style="color: #6d180b;">persistence.xml</code> found in the project belongs to the JPA framework.)
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-setup-frameworks-jpa.png" alt="i13 setup frameworks jpa" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 73. Setup frameworks in IntelliJ IDEA</div>
</div>
<div class="paragraph">

Now, as an intermediate check, make sure that the project structure looks something similar to this:

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-initial-project-structure.png" alt="i13 initial project structure" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 74. Project structure in IntelliJ IDEA</div>
</div></li>
</ol>
</div>
</div>
<div class="sect3">
<h4 id="create-run-config-wildfly-idea" style="color: #ba3925;">16.2.4. Create a run/debug configuration</h4>
<div class="paragraph">

Applications in IntelliJ IDEA are run and debugged according to what is called run/debug configurations. Now we are going to create the configuration for running and debugging the sample application in the context of WildFly.

</div>
<div class="olist arabic">
<ol class="arabic">
 	<li>In the main menu, select <span class="menuseq" style="color: #090909;"><span class="menu">Run</span> ▸ <span class="menuitem">Edit Configurations…</span></span>.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-run-edit-configurations.png" alt="i13 run edit configurations" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 75. Edit configurations in IntelliJ IDEA</div>
</div></li>
 	<li>In the <strong>Run/Debug Configurations</strong> dialog, click <span class="image"><img title="Plus icon in IntelliJ IDEA" src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-plus-icon.png" alt="i13-plus-icon" /></span>, select <strong>JBoss Server</strong>, and then select <strong>Local</strong>.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-run-configs-plus-jboss.png" alt="i13 run configs plus jboss" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 76. WildFly configuration in IntelliJ IDEA</div>
</div>
<div class="paragraph">

As a result, the run/debug configuration for the WildFly server is created and its settings are shown in the right-hand part of the dialog.

</div></li>
 	<li>Change the name of the run/debug configuration to <code style="color: #6d180b;">WildFly8</code> (optional).</li>
 	<li>In the lower part of the dialog, within the line <em>Warning: No artifacts marked for deployment</em>, click <b class="button">Fix</b> and select <strong>movieplex7:war exploded</strong>. (Artifacts in IntelliJ IDEA are deployment-ready project outputs and also the configurations according to which such outputs are produced. In our case, there are two configurations for the sample application (<em>movieplex7:war</em> and <em>movieplex7:war exploded</em>). Both configurations represent a format suitable for deployment onto a Java EE 7-enabled application server. <em>movieplex7:war</em> corresponds to a Web archive (WAR). <em>movieplex7:war exploded</em> corresponds to the sample application directory structure (a decompressed archive). The second of the formats is more suitable at the development stage because manipulations with it are faster.)
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-jboss-fix-deployment.png" alt="i13 jboss fix deployment" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 77. Fixing deployment warning in IntelliJ IDEA</div>
</div></li>
 	<li>Within the line <em>Error: Artifact 'movieplex7: exploded' has invalid extension</em>, click <b class="button">Fix</b>.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-jboss-invalid-extension.png" alt="i13 jboss invalid extension" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 78. Invalid extension error message in IntelliJ IDEA</div>
</div></li>
 	<li>In the <strong>Project Structure</strong> dialog, add <code style="color: #6d180b;">.war</code> at the end of the output directory path, and click <b class="button">OK</b>. (For the servers of the JBoss family, the application root directory has to have <code style="color: #6d180b;">.war</code> at the end.)
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-jboss-fix-extension.png" alt="i13 jboss fix extension" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 79. Extension error fix in IntelliJ IDEA</div>
</div></li>
 	<li>In the <strong>Run/Debug Configurations</strong> dialog, switch to the <strong>Server</strong> tab. In the field for the application starting page URL, replace <code style="color: #6d180b;">http://localhost:8080/movieplex7-1/</code> with <code style="color: #6d180b;">http://localhost:8080/movieplex7-1.0-SNAPSHOT/</code> and click <b class="button">OK</b>.
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-jboss-url-fixed.png" alt="i13 jboss url fixed" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 80. Fixing application URL in IntelliJ IDEA</div>
</div></li>
</ol>
</div>
<div class="paragraph">

The <strong>Application Servers</strong> tool window opens in the lower part of the workspace. Shown in this window are the server run/debug configuration and the associated deployment artifact. Now you are ready to run the application.

</div>
</div>
<div class="sect3">
<h4 id="run-app-wildfly-idea" style="color: #ba3925;">16.2.5. Run the application</h4>
<div class="paragraph">

In the <strong>Application Servers</strong> tool window, select the server run/debug configuration (<em>WildFly8 [local]</em>) and click <strong>Run</strong> <span class="image"><img title="Run icon in IntelliJ IDEA" src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-run-icon.png" alt="i13-run-icon" /></span>.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-run-wildfly.png" alt="i13 run wildfly" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 81. Run WildFly in IntelliJ IDEA</div>
</div>
<div class="paragraph">

IntelliJ IDEA compiles the code, builds the artifact, starts WildFly and deploys the artifact to the server. You can monitor this process in the <strong>Run</strong> tool window that opens in the lower part of the workspace.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-run-tool-window-wildfly.png" alt="i13 run tool window wildfly" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 82. Run tool window in IntelliJ IDEA</div>
</div>
<div class="paragraph">

Finally, your default Web browser opens and the starting page of the application is shown.

</div>
<div class="imageblock">
<div class="content"><img src="https://raw.githubusercontent.com/roryp/javaee7-hol/master/docs/images/i13-starting-page-in-browser.png" alt="i13 starting page in browser" /></div>
<div class="title" style="font-weight: bold; color: #7a2518;">Figure 83. Starting page in browser from IntelliJ IDEA</div>
</div>
<div class="paragraph">

At this step IntelliJ IDEA is fully prepared for your development work, and you can continue with your exercises.

</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>